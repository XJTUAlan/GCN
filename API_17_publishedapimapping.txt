Permission:android.permission.USE_SIP
13 Callers:
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: void close(java.lang.String)>
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>
Permission:android.permission.VIBRATE
3 Callers:
<android.os.Vibrator: void vibrate(long[],int)>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: void vibrate(long)>
Permission:android.permission.AUTHENTICATE_ACCOUNTS
7 Callers:
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
Permission:android.permission.READ_USER_DICTIONARY
2 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
Permission:android.permission.NFC
87 Callers:
<android.nfc.tech.NdefFormatable: void reconnect()>
<android.nfc.tech.Ndef: void reconnect()>
<android.nfc.tech.NfcA: void reconnect()>
<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)>
<android.nfc.tech.IsoDep: void reconnect()>
<android.nfc.tech.NfcF: void setTimeout(int)>
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)>
<android.nfc.tech.Ndef: boolean makeReadOnly()>
<android.nfc.tech.MifareClassic: void increment(int,int)>
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>
<android.nfc.tech.BasicTagTechnology: void connect()>
<android.nfc.tech.NfcBarcode: void connect()>
<android.nfc.tech.NfcA: byte[] transceive(byte[])>
<android.nfc.tech.NfcB: void reconnect()>
<android.nfc.tech.NfcB: void close()>
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>
<android.nfc.tech.NfcB: void connect()>
<android.nfc.tech.NfcF: int getTimeout()>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)>
<android.nfc.tech.IsoDep: int getTimeout()>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)>
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)>
<android.nfc.tech.NfcBarcode: byte[] transceive(byte[],boolean)>
<android.nfc.tech.IsoDep: void setTimeout(int)>
<android.nfc.tech.NdefFormatable: void close()>
<android.nfc.tech.MifareClassic: boolean authenticate(int,byte[],boolean)>
<android.nfc.tech.MifareClassic: void setTimeout(int)>
<android.nfc.tech.NfcF: byte[] transceive(byte[])>
<android.nfc.tech.MifareClassic: void writeBlock(int,byte[])>
<android.nfc.tech.NfcBarcode: void reconnect()>
<android.nfc.tech.MifareUltralight: void writePage(int,byte[])>
<android.nfc.tech.MifareClassic: void decrement(int,int)>
<android.nfc.tech.MifareClassic: void connect()>
<android.nfc.tech.MifareUltralight: void reconnect()>
<android.nfc.tech.NfcF: void reconnect()>
<android.nfc.tech.IsoDep: void connect()>
<android.nfc.tech.BasicTagTechnology: byte[] transceive(byte[],boolean)>
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])>
<android.nfc.tech.IsoDep: void close()>
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,byte[])>
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage,boolean)>
<android.nfc.tech.NdefFormatable: void connect()>
<android.nfc.tech.MifareUltralight: void setTimeout(int)>
<android.nfc.tech.MifareClassic: void reconnect()>
<android.nfc.tech.NfcV: void close()>
<android.nfc.tech.NfcB: byte[] transceive(byte[])>
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)>
<android.nfc.tech.NfcF: void close()>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>
<android.nfc.tech.NfcV: byte[] transceive(byte[])>
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])>
<android.nfc.tech.NfcA: void connect()>
<android.nfc.tech.Ndef: byte[] transceive(byte[],boolean)>
<android.nfc.tech.NfcA: void setTimeout(int)>
<android.nfc.tech.MifareClassic: void transfer(int)>
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])>
<android.nfc.tech.NfcA: void close()>
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>
<android.nfc.tech.NdefFormatable: byte[] transceive(byte[],boolean)>
<android.nfc.tech.MifareUltralight: void close()>
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)>
<android.nfc.tech.MifareUltralight: void connect()>
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>
<android.nfc.tech.MifareClassic: void restore(int)>
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)>
<android.nfc.tech.NfcF: void connect()>
<android.nfc.tech.NfcA: int getTimeout()>
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>
<android.nfc.tech.NfcV: void reconnect()>
<android.nfc.tech.BasicTagTechnology: void reconnect()>
<android.nfc.tech.MifareUltralight: int getTimeout()>
<android.nfc.tech.NfcV: void connect()>
<android.nfc.tech.Ndef: void close()>
<android.nfc.tech.MifareClassic: void close()>
<android.nfc.tech.MifareClassic: int getTimeout()>
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)>
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>
<android.nfc.tech.Ndef: void connect()>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>
<android.nfc.tech.NfcA: byte[] transceive(byte[],boolean)>
<android.nfc.tech.BasicTagTechnology: void close()>
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>
<android.nfc.tech.NfcBarcode: void close()>
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)>
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
7 Callers:
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
Permission:android.permission.READ_CALL_LOG
1 Callers:
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
Permission:android.permission.READ_SOCIAL_STREAM
26 Callers:
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
Permission:android.permission.GET_TASKS
3 Callers:
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)>
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
Permission:android.permission.SET_WALLPAPER_HINTS
1 Callers:
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>
Permission:android.permission.DISABLE_KEYGUARD
3 Callers:
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
Permission:android.permission.ACCESS_COARSE_LOCATION
29 Callers:
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
Permission:android.permission.ACCESS_FINE_LOCATION
28 Callers:
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
Permission:android.permission.READ_CONTACTS
26 Callers:
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
Permission:android.permission.SYSTEM_ALERT_WINDOW
3 Callers:
<android.service.wallpaper.WallpaperService$Engine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)>
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)>
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)>
Permission:android.permission.WAKE_LOCK
47 Callers:
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.net.sip.SipAudioCall: void startAudio()>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.os.PowerManager$WakeLock: void finalize()>
<android.media.Ringtone: void setUri(android.net.Uri)>
<android.os.PowerManager$WakeLock: void release()>
<android.net.sip.SipManager: void close(java.lang.String)>
<android.media.Ringtone: void play()>
<android.media.AsyncPlayer: void stop()>
<android.media.MediaPlayer: void stop()>
<android.media.Ringtone: void stop()>
<android.net.sip.SipAudioCall: void close()>
<android.os.PowerManager$WakeLock: void acquire(long)>
<android.net.wifi.WifiManager$WifiLock: void acquire()>
<android.net.wifi.WifiManager$WifiLock: void finalize()>
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.widget.VideoView: void suspend()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)>
<android.net.wifi.WifiManager$WifiLock: void release()>
<android.media.MediaPlayer: void pause()>
<android.widget.VideoView: void start()>
<android.os.PowerManager$WakeLock: void acquire()>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void setVideoPath(java.lang.String)>
<android.media.Ringtone: void setStreamType(int)>
<android.media.MediaPlayer: void start()>
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.net.sip.SipAudioCall: void endCall()>
<android.widget.VideoView: void stopPlayback()>
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<android.os.PowerManager$WakeLock: void release(int)>
<android.widget.VideoView: void resume()>
<android.net.sip.SipAudioCall: void close(boolean)>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>
<android.media.MediaPlayer: void release()>
<android.widget.VideoView: void pause()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.media.effect.EffectContext: void release()>
<android.widget.VideoView: void release(boolean)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.os.Vibrator: void vibrate(long)>
<android.media.MediaPlayer: void reset()>
Permission:android.permission.WRITE_SYNC_SETTINGS
11 Callers:
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)>
<android.test.mock.MockContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.test.mock.MockContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.test.mock.MockContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.test.mock.MockContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
Permission:android.permission.MODIFY_AUDIO_SETTINGS
15 Callers:
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)>
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.media.AudioManager: void startBluetoothSco()>
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)>
<android.media.AudioManager: void setMode(int)>
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>
Permission:android.permission.KILL_BACKGROUND_PROCESSES
2 Callers:
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<android.app.ActivityManager: void restartPackage(java.lang.String)>
Permission:android.permission.READ_SYNC_SETTINGS
25 Callers:
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.test.mock.MockContentResolver: boolean getMasterSyncAutomatically()>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
Permission:android.permission.BLUETOOTH
75 Callers:
<android.bluetooth.BluetoothDevice: java.lang.String getName()>
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)>
<android.media.AudioManager: void stopBluetoothSco()>
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: boolean isEnabled()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>
<android.bluetooth.BluetoothHeadset: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)>
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.bluetooth.BluetoothA2dp: void close()>
<android.bluetooth.BluetoothAdapter: int getConnectionState()>
<android.bluetooth.BluetoothAdapter: int getScanMode()>
<android.bluetooth.BluetoothAdapter: int getState()>
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,java.lang.String,int)>
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)>
<android.media.AudioManager: void setMode(int)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,int)>
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothDevice: int getBondState()>
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothA2dp: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)>
<android.bluetooth.BluetoothHealth: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)>
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)>
<android.media.AudioManager: void startBluetoothSco()>
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothAdapter: void finalize()>
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)>
<android.bluetooth.BluetoothHeadset: boolean isEnabled()>
<android.bluetooth.BluetoothHealth: void close()>
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothSocket: void connect()>
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: void close()>
<android.bluetooth.BluetoothA2dp: void finalize()>
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()>
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>
<android.bluetooth.BluetoothHealth: boolean isEnabled()>
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,android.os.ParcelUuid)>
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
Permission:android.permission.INTERNET
26 Callers:
<java.net.NetworkInterface: void <init>(int)>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.URL: java.net.URLConnection openConnection()>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
<java.net.DatagramSocket: void <init>(int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.net.HttpURLConnection: void connect()>
<java.net.MulticastSocket: void <init>(int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map,boolean)>
<java.net.HttpURLConnection: void <init>(int)>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<java.net.URL: java.lang.Object getContent()>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<java.net.ServerSocket: void <init>(int)>
<java.net.URL: java.io.InputStream openStream()>
<java.net.Socket: void <init>(int)>
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>
<android.net.nsd.NsdManager: void init()>
<java.net.URLConnection: void connect()>
<android.webkit.WebViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.net.nsd.NsdManager: void <init>(android.content.Context,android.net.nsd.INsdManager)>
Permission:android.permission.CHANGE_NETWORK_STATE
4 Callers:
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
Permission:android.permission.SEND_SMS
6 Callers:
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
Permission:android.permission.REORDER_TASKS
2 Callers:
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>
<android.app.ActivityManager: void moveTaskToFront(int,int)>
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
3 Callers:
<android.net.wifi.WifiManager$MulticastLock: void finalize()>
<android.net.wifi.WifiManager$MulticastLock: void acquire()>
<android.net.wifi.WifiManager$MulticastLock: void release()>
Permission:android.permission.RESTART_PACKAGES
2 Callers:
<android.app.ActivityManager: void restartPackage(java.lang.String)>
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
Permission:android.permission.SET_WALLPAPER
10 Callers:
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.app.WallpaperManager: void clear()>
<android.app.WallpaperManager: void setResource(int)>
<android.app.WallpaperManager: void setStream(java.io.InputStream)>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: void clearWallpaper()>
<android.content.ContextWrapper: void clearWallpaper()>
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: void setWallpaper(java.io.InputStream)>
Permission:android.permission.READ_SYNC_STATS
9 Callers:
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()>
<android.test.mock.MockContentResolver: java.util.List getCurrentSyncs()>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.test.mock.MockContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)>
Permission:android.permission.WRITE_SOCIAL_STREAM
17 Callers:
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
Permission:android.permission.WRITE_USER_DICTIONARY
2 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
Permission:android.permission.WRITE_EXTERNAL_STORAGE
3 Callers:
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
Permission:android.permission.BLUETOOTH_ADMIN
19 Callers:
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>
Permission:android.permission.WRITE_CONTACTS
26 Callers:
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
Permission:android.permission.ACCESS_NETWORK_STATE
8 Callers:
<android.net.ConnectivityManager: int getNetworkPreference()>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
Permission:android.permission.MANAGE_ACCOUNTS
15 Callers:
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
Permission:android.permission.CAMERA
2 Callers:
<android.hardware.Camera: android.hardware.Camera open()>
<android.media.MediaRecorder: void setVideoSource(int)>
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
1 Callers:
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
Permission:android.permission.READ_PHONE_STATE
9 Callers:
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
11 Callers:
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
Permission:android.permission.RECORD_AUDIO
6 Callers:
<android.media.MediaRecorder: void setAudioSource(int)>
<android.speech.SpeechRecognizer: void stopListening()>
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
<android.speech.SpeechRecognizer: void cancel()>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
Permission:com.android.voicemail.permission.ADD_VOICEMAIL
3 Callers:
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
Permission:android.permission.WRITE_CALENDAR
1 Callers:
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
Permission:android.permission.READ_CALENDAR
6 Callers:
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
Permission:android.permission.ACCESS_WIFI_STATE
12 Callers:
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
<android.net.wifi.WifiManager: boolean isWifiEnabled()>
<android.net.wifi.WifiManager: void init()>
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)>
<android.net.wifi.WifiManager: int getWifiState()>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
Permission:android.permission.USE_CREDENTIALS
10 Callers:
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
Permission:android.permission.WRITE_SETTINGS
74 Callers:
<android.widget.Chronometer: void onEditorAction(int)>
<android.webkit.WebView: void setLayerType(int,android.graphics.Paint)>
<android.webkit.WebView: void clearMatches()>
<android.webkit.WebView: void goBackOrForward(int)>
<android.webkit.WebView: void goBack()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.webkit.WebView: void pauseTimers()>
<android.widget.ToggleButton: void onEditorAction(int)>
<android.webkit.WebView: void clearView()>
<android.webkit.WebView: int findAll(java.lang.String)>
<android.webkit.WebViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.widget.CheckBox: void onEditorAction(int)>
<android.webkit.WebView: boolean showFindDialog(java.lang.String,boolean)>
<android.webkit.WebView: void setBackgroundColor(int)>
<android.widget.AutoCompleteTextView: void onEditorAction(int)>
<android.webkit.WebView: boolean zoomIn()>
<android.webkit.WebView: void findAllAsync(java.lang.String)>
<android.webkit.WebView: boolean setFrame(int,int,int,int)>
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)>
<android.webkit.WebView: boolean requestFocus(int,android.graphics.Rect)>
<android.widget.DigitalClock: void onEditorAction(int)>
<android.webkit.WebView: boolean performLongClick()>
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>
<android.webkit.WebView: boolean zoomOut()>
<android.widget.TextClock: void onEditorAction(int)>
<android.webkit.WebView: void saveWebArchive(java.lang.String)>
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.webkit.WebView: void computeScroll()>
<android.webkit.WebView: void destroy()>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
<android.inputmethodservice.ExtractEditText: void onEditorAction(int)>
<android.widget.EditText: void onEditorAction(int)>
<android.widget.TextView: void onEditorAction(int)>
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>
<android.webkit.WebView: boolean performAccessibilityAction(int,android.os.Bundle)>
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>
<android.webkit.WebViewFragment: void onDestroy()>
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.view.inputmethod.InputMethodManager: void dispatchKeyEvent(android.content.Context,int,android.view.KeyEvent,android.view.inputmethod.InputMethodManager$FinishedEventCallback)>
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<android.webkit.WebView: void setNetworkAvailable(boolean)>
<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>
<android.app.KeyguardManager: boolean isKeyguardSecure()>
<android.webkit.WebView: void stopLoading()>
<android.webkit.WebView: void resumeTimers()>
<android.webkit.WebView: void goForward()>
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.widget.CompoundButton: void onEditorAction(int)>
<android.view.inputmethod.InputMethodManager: void dispatchGenericMotionEvent(android.content.Context,int,android.view.MotionEvent,android.view.inputmethod.InputMethodManager$FinishedEventCallback)>
<android.view.inputmethod.InputMethodManager: void dispatchTrackballEvent(android.content.Context,int,android.view.MotionEvent,android.view.inputmethod.InputMethodManager$FinishedEventCallback)>
<android.view.inputmethod.BaseInputConnection: boolean commitText(java.lang.CharSequence,int)>
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>
<android.webkit.WebView: void documentHasImages(android.os.Message)>
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)>
<android.webkit.WebView: void loadUrl(java.lang.String)>
<android.view.inputmethod.InputMethodManager: void finishedEvent(int,boolean)>
<android.webkit.WebView: void clearHistory()>
<android.webkit.WebView: void freeMemory()>
<android.widget.CheckedTextView: void onEditorAction(int)>
<android.webkit.WebView: void findNext(boolean)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.widget.Button: void onEditorAction(int)>
<android.widget.Switch: void onEditorAction(int)>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.webkit.WebView: void clearCache(boolean)>
<android.webkit.WebView: void clearSslPreferences()>
<android.webkit.WebView: void reload()>
<android.widget.MultiAutoCompleteTextView: void onEditorAction(int)>
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)>
<android.widget.RadioButton: void onEditorAction(int)>
Permission:android.permission.GET_ACCOUNTS
23 Callers:
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
Permission:android.permission.BROADCAST_STICKY
12 Callers:
<android.content.Context: void removeStickyBroadcast(android.content.Intent)>
<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
Permission:android.permission.ACCESS_MOCK_LOCATION
8 Callers:
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
Permission:android.permission.CHANGE_WIFI_STATE
15 Callers:
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.WifiManager: boolean startScan()>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)>
<android.net.wifi.WifiManager: void init()>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
Permission:android.permission.SET_TIME_ZONE
1 Callers:
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
