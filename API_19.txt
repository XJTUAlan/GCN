Permission:android.permission.ACCESS_MOCK_LOCATION
43 Callers:
<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> (8)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> (2)
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> (2)
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> ()
<android.location.ILocationManager$Stub: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderStatus(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeTestProvider(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.ILocationManager$Stub: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.ILocationManager$Stub: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<android.location.ILocationManager$Stub: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (1)
<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)> (1)
<android.location.ILocationManager: void removeTestProvider(java.lang.String)> (1)
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (1)
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (1)
<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> ()
<android.location.LocationManager: void removeTestProvider(java.lang.String)> ()
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
Permission:android.permission.GET_TASKS
14 Callers:
<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<android.app.ActivityManagerNative: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)> (1)
<android.app.ActivityManager: java.util.List getRunningTasks(int)> ()
<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)> (1)
<android.app.ActivityManagerNative: java.util.List getRecentTasks(int,int,int)> (2)
<android.app.IActivityManager: java.util.List getRecentTasks(int,int,int)> (2)
<android.app.ActivityManager: java.util.List getRecentTasksForUser(int,int,int)> ()
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void reloadButtons()> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void onStart()> (1)
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
267 Callers:
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete(android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> (2)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<com.android.browser.Controller$10: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$10: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage: boolean handleContextItem(int,int,int)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$2: boolean onMenuItemClick(android.view.MenuItem)> (1)
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.BrowserSettings: void clearHistory()> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (2)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.view.BookmarkExpandableView: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (1)
<com.android.browser.BreadCrumbView: void popView()> (1)
<com.android.browser.AddBookmarkPage: void setupTopCrumb()> (2)
<com.android.browser.AddBookmarkPage: void onRootFolderFound(long)> (2)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.AddBookmarkPage: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.AddBookmarkPage: void setAccount(java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run()> (2)
<com.android.browser.BrowserHistoryPage$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.DataController$DataControllerHandler: void handleMessage(com.android.browser.DataController$DCMessage)> (1)
<com.android.browser.DataController$DataControllerHandler: void run()> (2)
<com.android.browser.DataController: void <init>(android.content.Context)> (1)
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> (6)
<com.android.browser.Controller: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.Controller: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Tab: void deleteThumbnail()> (3)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (3)
<com.android.browser.Tab: void persistThumbnail()> (1)
<com.android.browser.Tab: void restoreState(android.os.Bundle)> (1)
<com.android.browser.WebViewController: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.WebViewController: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.TabControl: void saveState(android.os.Bundle)> (1)
<com.android.browser.Tab: void removeFromTree()> (2)
<com.android.browser.Tab: void updateShouldCaptureThumbnails()> (3)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (1)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (1)
<com.android.browser.Tab: void capture()> (5)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (1)
<com.android.browser.Tab$3: void onReceivedTitle(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: android.os.Bundle createSaveState()> (2)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void removeParentChildRelationShips()> (1)
<com.android.browser.Tab: void setController(com.android.browser.WebViewController)> (1)
<com.android.browser.XLargeUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init>(com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.PhoneUi: void showNavScreen()> (2)
<com.android.browser.PieControl: void buildTabs()> (1)
<com.android.browser.Tab: void putInBackground()> (4)
<com.android.browser.Tab: void postCapture()> (2)
<com.android.browser.Controller: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.CrashRecoveryHandler$2: void run()> (1)
<com.android.browser.Controller: void closeCurrentTab(boolean)> (2)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (3)
<com.android.browser.Controller: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.TabControl: void addPreloadedTab(com.android.browser.Tab)> (1)
<com.android.browser.BaseUi: void setUseQuickControls(boolean)> (3)
<com.android.browser.XLargeUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab(boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> ()
<com.android.browser.Controller: void onPreloginFinished(android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.PhoneUi: void toggleNavScreen()> (1)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.PieControl: void access$000(com.android.browser.PieControl)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.Tab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (1)
<com.android.browser.ActivityController: void onSaveInstanceState(android.os.Bundle)> (2)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void closeOtherTabs()> (2)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.PhoneUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.UI: void setUseQuickControls(boolean)> (1)
<com.android.browser.BaseUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: void cancelSearchBoxPreload(java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest(java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.NavigationBarPhone: void onClick(android.view.View)> (1)
<com.android.browser.PieControl$1: void onLayout(int,int,boolean)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (3)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab()> (2)
<com.android.browser.UiController: void closeCurrentTab()> (3)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeOtherTabs()> ()
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (1)
<com.android.browser.ActivityController: void onDestroy()> (1)
<com.android.browser.PhoneUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run()> (1)
<com.android.browser.PreloadRequestReceiver: void handlePreload(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onClick(android.view.View)> (3)
<com.android.browser.view.PieMenu$PieView$OnLayoutListener: void onLayout(int,int,boolean)> (1)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (7)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.NavScreen: void onCloseTab(com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarTablet: void onClick(android.view.View)> (1)
<com.android.browser.view.BasePieView: void layout(int,int,boolean,float,int)> (3)
<com.android.browser.Controller: boolean switchToTab(com.android.browser.Tab)> (8)
<com.android.browser.UiController: void setActiveTab(com.android.browser.Tab)> (2)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (1)
<com.android.browser.NavScreen: void access$000(com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.ActivityController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.NavScreen: void openNewTab()> (1)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.view.PieListView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieMenu$PieView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieStackView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.UiController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab(com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen(int,boolean)> (5)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition(int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.NavScreen: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1700(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.view.PieMenu: void layoutPieView(com.android.browser.view.PieMenu$PieView,int,int,float)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100(com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition(int)> (1)
<com.android.browser.NavigationBarPhone: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavScreen$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb(boolean)> (3)
<com.android.browser.NavTabScroller$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.NavTabScroller: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb(boolean)> (2)
<com.android.browser.XLargeUi: void showWeb(boolean)> (1)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.view.ScrollerView: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UI: boolean onBackKey()> (1)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
<com.android.browser.Controller$PruneThumbnails: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail(com.android.browser.Tab)> (1)
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
Permission:android.permission.READ_SMS
145 Callers:
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpSmsTable()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpMessages()> ()
<com.android.providers.telephony.MmsSmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void handleMsgListChangesMms()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void handleMsgListChanges()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void access$000(com.android.bluetooth.map.BluetoothMapContentObserver)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver$1: void onChange(boolean,android.net.Uri)> (2)
<com.android.bluetooth.map.BluetoothMapContentObserver$1: void onChange(boolean)> (1)
<com.android.bluetooth.map.BluetoothMapContent: com.android.bluetooth.map.BluetoothMapMessageListing msgListing(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (2)
<com.android.bluetooth.map.BluetoothMapObexServer: int sendMessageListingRsp(javax.obex.Operation,com.android.bluetooth.map.BluetoothMapAppParams,java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusDeleted(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int setMessageStatus(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageMms(long)> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> ()
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> (6)
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> (2)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: long pushMmsToFolder(int,java.lang.String,com.android.bluetooth.map.BluetoothMapbMessageMmsEmail)> (1)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)> ()
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> ()
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insertInner(android.net.Uri,android.content.ContentValues)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: long sendMmsMessage(java.lang.String,java.lang.String,com.android.bluetooth.map.BluetoothMapbMessageMmsEmail)> ()
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void failPendingMessages()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void deinit()> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void shutdown()> (3)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnectMap(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService: void closeService()> (3)
<com.android.bluetooth.map.BluetoothMapService: void stopObexServerSession()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1400(com.android.bluetooth.map.BluetoothMapService)> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1000(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.btservice.ProfileService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService$MapBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<com.android.bluetooth.btservice.ProfileService: void doStop(android.content.Intent)> (8)
<android.bluetooth.IBluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.bluetooth.a2dp.A2dpService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (8)
<com.android.bluetooth.gatt.GattService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStop(android.content.Intent)> (1)
<android.bluetooth.BluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapContent: int msgListingSize(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void initMsgList()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void registerObserver(com.android.bluetooth.map.BluetoothMnsObexClient,int)> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void handleRegistration(int,int)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean msgListingHasUnread(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageMms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void handleMsgListChangesSms()> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> ()
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.bluetooth.map.BluetoothMapContent: void dumpMmsTable()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void resendPendingMessages()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void access$900(com.android.bluetooth.map.BluetoothMapContentObserver)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver$2: void onServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.bluetooth.map.BluetoothMapContent: byte[] getMmsMessage(long,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: byte[] getMessage(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int sendGetMessageRsp(javax.obex.Operation,java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<com.android.bluetooth.map.BluetoothMapContent: byte[] getSmsMessage(long,int)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void addSmsEntry()> (1)
Permission:android.permission.EXPAND_STATUS_BAR
19 Callers:
<com.android.server.StatusBarManagerService: void enforceExpandStatusBar()> (3)
<com.android.server.StatusBarManagerService: void collapsePanels()> (3)
<com.android.server.StatusBarManagerService: void expandNotificationsPanel()> (2)
<com.android.server.StatusBarManagerService: void expandSettingsPanel()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void collapsePanels()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void collapsePanels()> (2)
<com.android.server.StatusBarManagerService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void expandNotificationsPanel()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void expandNotificationsPanel()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void expandSettingsPanel()> ()
<com.android.internal.statusbar.IStatusBarService$Stub: void expandSettingsPanel()> (2)
<com.android.internal.statusbar.IStatusBarService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.statusbar.IStatusBarService: void collapsePanels()> (1)
<com.android.internal.statusbar.IStatusBarService: void expandNotificationsPanel()> (1)
<com.android.internal.statusbar.IStatusBarService: void expandSettingsPanel()> (1)
<com.android.server.StatusBarManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.StatusBarManager: void collapsePanels()> ()
<android.app.StatusBarManager: void expandNotificationsPanel()> (1)
<android.app.StatusBarManager: void expandSettingsPanel()> (1)
Permission:android.permission.REORDER_TASKS
18 Callers:
<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)> (1)
<android.app.ActivityManagerNative: void moveTaskToFront(int,int,android.os.Bundle)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void moveTaskToFront(int,int,android.os.Bundle)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)> (1)
<com.android.internal.app.HeavyWeightSwitcherActivity$1: void onClick(android.view.View)> (1)
<android.app.ActivityManager: void moveTaskToFront(int,int)> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void switchTo(com.android.internal.policy.impl.RecentApplicationsDialog$RecentTag)> (2)
<com.android.internal.policy.impl.RecentApplicationsDialog: void dismissAndSwitch()> (1)
<com.android.internal.policy.impl.RecentApplicationsDialog: void onClick(android.view.View)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$5: void run()> (1)
<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)> (1)
<android.app.ActivityManagerNative: void moveTaskToBack(int)> (2)
<android.app.IActivityManager: void moveTaskToBack(int)> ()
<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)> (1)
<android.app.ActivityManagerNative: void moveTaskBackwards(int)> (2)
<android.app.IActivityManager: void moveTaskBackwards(int)> ()
Permission:android.permission.WRITE_CONTACTS
255 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: boolean addIccRecordToEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.telephony.IccProvider: boolean deleteIccRecordFromEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.telephony.IccProvider: boolean updateIccRecordInEf(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.internal.telephony.IccProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$200()> (1)
<com.android.email.activity.setup.AccountSetupNames$3: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupNames$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (4)
<com.android.email.activity.setup.AccountSetupNames$3: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.vcard.VCardEntry$BirthdayData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$EntryElement: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$InsertOperationConstrutor: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (1)
<com.android.vcard.VCardEntry$EntryElementIterator: boolean onElement(com.android.vcard.VCardEntry$EntryElement)> (2)
<com.android.vcard.VCardEntry: void iterateAllData(com.android.vcard.VCardEntry$EntryElementIterator)> (3)
<com.android.vcard.VCardEntry: void iterateOneList(java.util.List,com.android.vcard.VCardEntry$EntryElementIterator)> (1)
<com.android.vcard.VCardEntry: boolean isIgnorable()> (1)
<com.android.vcard.VCardEntry: java.lang.String toString()> ()
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)> (1)
<com.android.vcard.VCardEntryCommitter: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)> (1)
<com.android.vcard.VCardEntryConstructor: void onEntryEnded()> (1)
<com.android.vcard.VCardInterpreter: void onEntryEnded()> (2)
<com.android.vcard.VCardParserImpl_V21: boolean parseOneVCard()> (4)
<com.android.vcard.VCardParserImpl_V21: void handleNest()> (3)
<com.android.vcard.VCardParserImpl_V21: void parse(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V21: void parseOne(java.io.InputStream)> (3)
<com.android.vcard.VCardParserImpl_V30: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseOneVCard()> (1)
<com.android.vcard.VCardParserImpl_V21: boolean parseItem()> (3)
<com.android.vcard.VCardParserImpl_V30: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V40: void handleNest()> (1)
<com.android.vcard.VCardParserImpl_V30: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parse(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V30: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParserImpl_V40: void parseOne(java.io.InputStream)> (2)
<com.android.vcard.VCardParser_V21: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParserImpl_V21: void parseItems()> (4)
<com.android.vcard.VCardParserImpl_V30: boolean parseItem()> (1)
<com.android.vcard.VCardParserImpl_V40: boolean parseItem()> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V30: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser_V40: void parseOne(java.io.InputStream)> (1)
<com.android.vcard.VCardParser: void parseOne(java.io.InputStream)> ()
<com.android.vcard.VCardParserImpl_V30: void parseItems()> (1)
<com.android.vcard.VCardParserImpl_V40: void parseItems()> (1)
<com.android.vcard.VCardParser: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (3)
<com.android.vcard.VCardParser_V21: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V30: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<com.android.vcard.VCardParser_V40: void parse(java.io.InputStream,com.android.vcard.VCardInterpreter)> (1)
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.vcard.VCardEntry$ImData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<com.android.exchange.eas.EasSyncContacts: void dirtyContactsWithinDirtyGroups(android.content.ContentResolver,com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.eas.EasSyncContacts: void setUpsyncCommands(com.android.exchange.adapter.Serializer,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,double)> (1)
<com.android.exchange.eas.EasSyncContacts: void setSyncOptions(android.content.Context,com.android.exchange.adapter.Serializer,double,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,int)> (1)
<com.android.exchange.eas.EasSyncCollectionTypeBase: void setSyncOptions(android.content.Context,com.android.exchange.adapter.Serializer,double,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,int)> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.eas.EasOperation: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.eas.EasOperation: org.apache.http.client.methods.HttpUriRequest makeRequest()> (12)
<com.android.exchange.eas.EasFolderSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasLoadAttachment: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasMoveItems: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.exchange.eas.EasOptions: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOutboxSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasPing: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasProvision: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSearch: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSettings: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.adapter.ContactsSyncParser$ContactOperations: void delete(long)> (1)
<com.android.exchange.adapter.ContactsSyncParser: void deleteParser(com.android.exchange.adapter.ContactsSyncParser$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (6)
<com.android.exchange.adapter.CalendarSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.ContactsSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.eas.EasSyncBase: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasSync: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.eas.EasOperation: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (5)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<com.android.vcard.VCardEntry$NicknameData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.email.service.EmailServiceUtils: void moveContactsData(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.email.service.EmailServiceUtils: void updateAccountManagerType(android.content.Context,android.accounts.Account,java.util.Map)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void updateAccountManagerAccountsOfType(java.lang.String,java.util.Map)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onAppUpgrade()> (2)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void reconcileAndStartServices()> (2)
<com.android.email.service.EmailBroadcastProcessorService: void onBootCompleted()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.vcard.VCardEntry$NameData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$OrganizationData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> ()
<com.android.vcard.VCardEntry$SipData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<com.android.common.contacts.DataUsageStatUpdater: boolean update(java.util.Collection,java.util.Collection,java.lang.String)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> ()
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithRfc822Address(java.util.Collection)> ()
<com.android.mail.compose.ComposeActivity$SendOrSaveTask: void incrementRecipientsTimesContacted(android.content.Context,java.lang.String)> (1)
<com.android.mail.compose.ComposeActivity$SendOrSaveTask: void run()> (1)
<com.android.vcard.VCardEntry$AndroidCustomData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$WebsiteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$PostalData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$AnniversaryData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.exchange.adapter.ContactsSyncParser: void commit()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commit()> (1)
<com.android.vcard.VCardEntry$EmailData: void constructInsertOperation(java.util.List,int)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> ()
<com.android.vcard.VCardEntry$PhoneData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$NoteData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.vcard.VCardEntry$PhotoData: void constructInsertOperation(java.util.List,int)> (1)
<com.android.exchange.eas.EasSyncContacts: void cleanup(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.eas.EasSyncCollectionTypeBase: void cleanup(android.content.Context,com.android.emailcommon.provider.Account)> (2)
<com.android.exchange.eas.EasSyncMail: void cleanup(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.READ_PHONE_STATE
687 Callers:
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceId()> (1)
<com.android.internal.telephony.IPhoneSubInfo$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> (3)
<com.android.internal.telephony.PhoneSubInfo: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.Device: java.lang.String getConsistentDeviceId(android.content.Context)> (1)
<com.android.exchange.eas.EasOperation: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (12)
<com.android.server.ConnectivityService: java.lang.String getMobileProvisioningUrl()> (3)
<com.android.emailcommon.Device: java.lang.String getDeviceIdInternal(android.content.Context)> (1)
<com.android.exchange.eas.EasFolderSync: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasLoadAttachment: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasMoveItems: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasOperation: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (11)
<com.android.exchange.eas.EasOptions: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasOutboxSync: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasPing: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasProvision: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (2)
<com.android.exchange.eas.EasSearch: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasSettings: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasSyncBase: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<com.android.exchange.eas.EasSync: void expandedAddDeviceInformationToSerializer(com.android.exchange.adapter.Serializer,android.content.Context,java.lang.String)> (1)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String getMobileProvisioningUrl()> ()
<android.net.IConnectivityManager$Stub: java.lang.String getMobileProvisioningUrl()> (2)
<com.android.server.ConnectivityService$5: void onComplete(java.lang.Integer)> (1)
<com.android.emailcommon.Device: java.lang.String getDeviceId(android.content.Context)> (4)
<com.android.exchange.eas.EasFolderSync: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasLoadAttachment: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasMoveItems: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasOptions: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasOutboxSync: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasPing: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasProvision: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasSearch: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasSettings: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (2)
<com.android.exchange.eas.EasSyncBase: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasSync: void addDeviceInformationToSerializer(com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasProvision: com.android.exchange.adapter.Serializer generateRequestEntitySerializer(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,double)> (1)
<android.net.IConnectivityManager: java.lang.String getMobileProvisioningUrl()> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp$CallBack: void onComplete(java.lang.Integer)> (1)
<com.android.email.activity.setup.AccountSetupIncomingFragment: void onUseSslChanged(boolean)> (1)
<com.android.emailcommon.service.EmailServiceProxy: void <init>(android.content.Context,android.content.Intent)> (3)
<com.android.email.service.AccountService$1: java.lang.String getDeviceId()> (2)
<com.android.email.service.AccountService: android.os.IBinder onBind(android.content.Intent)> (3)
<com.android.exchange.eas.EasSettings: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.eas.EasProvision: org.apache.http.HttpEntity getRequestEntity()> (1)
<android.net.ConnectivityManager: java.lang.String getMobileProvisioningUrl()> ()
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: void onPostExecute(java.lang.Integer)> (1)
<com.android.email.activity.setup.AccountSetupIncomingFragment: void updatePortFromSecurityType()> (2)
<com.android.emailcommon.service.ServiceProxy: void <init>(android.content.Context,android.content.Intent)> (6)
<com.android.email.service.EmailServiceUtils: boolean isServiceAvailable(android.content.Context,java.lang.String)> (1)
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.EmailServiceProxy getServiceFromInfo(android.content.Context,com.android.email.service.EmailServiceUtils$EmailServiceInfo)> (1)
<com.android.emailcommon.service.IAccountService$Stub$Proxy: java.lang.String getDeviceId()> ()
<com.android.emailcommon.service.IAccountService$Stub: java.lang.String getDeviceId()> (2)
<com.android.exchange.eas.EasOperation: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.server.ConnectivityService$CheckMp: void onPostExecute(java.lang.Object)> (1)
<com.android.email.activity.setup.AccountSetupIncomingFragment: void access$000(com.android.email.activity.setup.AccountSetupIncomingFragment)> (1)
<com.android.email.activity.setup.AccountSetupIncomingFragment: void loadSettings()> (2)
<com.android.emailcommon.service.AccountServiceProxy: void <init>(android.content.Context,android.content.Intent)> (1)
<com.android.emailcommon.service.AccountServiceProxy: void <init>(android.content.Context)> (8)
<com.android.emailcommon.service.EmailServiceProxy: void <init>(android.content.Context,java.lang.Class)> (2)
<com.android.emailcommon.service.PolicyServiceProxy: void <init>(android.content.Context,android.content.Intent)> (1)
<com.android.emailcommon.service.PolicyServiceProxy: void <init>(android.content.Context)> (4)
<com.android.email.activity.setup.AccountSetupType: void onCreate(android.os.Bundle)> (2)
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.EmailServiceProxy getService(android.content.Context,java.lang.String)> (3)
<com.android.emailcommon.service.IAccountService: java.lang.String getDeviceId()> (1)
<com.android.emailcommon.service.IAccountService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.eas.EasOperation: org.apache.http.client.methods.HttpUriRequest makeRequest()> (12)
<com.android.email.activity.setup.AccountSetupIncomingFragment$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.email.activity.setup.AccountSetupIncomingFragment: void onStart()> (1)
<com.android.email.activity.setup.AccountSetupIncomingFragment: void setCallback(com.android.email.activity.setup.AccountServerBaseFragment$Callback)> (1)
<com.android.emailsync.SyncManager$4: void run()> (1)
<com.android.emailsync.SyncManager: java.lang.String getDeviceId(android.content.Context)> (1)
<com.android.emailsync.SyncManager: void done(com.android.emailsync.AbstractSyncService)> (1)
<com.android.exchange.ExchangeService: java.lang.String getDeviceId(android.content.Context)> (6)
<com.android.exchange.ExchangeService: void runAccountReconcilerSync(android.content.Context)> (1)
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.exchange.service.EasServerConnection: java.lang.String makeUserString()> (3)
<com.android.exchange.utility.CalendarUtilities: long createCalendar(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.emailcommon.service.PolicyServiceProxy: boolean isActive(android.content.Context,com.android.emailcommon.provider.Policy)> (5)
<com.android.emailcommon.service.PolicyServiceProxy: void remoteWipe(android.content.Context)> (2)
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)> (3)
<com.android.emailcommon.service.PolicyServiceProxy: void setAccountPolicy(android.content.Context,long,com.android.emailcommon.provider.Policy,java.lang.String)> (2)
<com.android.email.activity.setup.AccountSetupActivity: void onCreate(android.os.Bundle)> (7)
<com.android.email.mail.store.ServiceStore: com.android.emailcommon.service.IEmailService getService()> (2)
<com.android.email.service.EmailServiceUtils: com.android.emailcommon.service.EmailServiceProxy getServiceForAccount(android.content.Context,long)> (7)
<com.android.email.service.EmailServiceUtils: void setRemoteServicesLogging(android.content.Context,int)> (1)
<com.android.emailcommon.service.AccountServiceProxy$6: void run()> (1)
<com.android.email.service.AccountService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.eas.EasFolderSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasLoadAttachment: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasMoveItems: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.exchange.eas.EasOptions: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOutboxSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasPing: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasProvision: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSearch: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSettings: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.email.activity.setup.AccountServerBaseFragment: void setCallback(com.android.email.activity.setup.AccountServerBaseFragment$Callback)> (4)
<com.android.exchange.ExchangeService: void done(com.android.emailsync.AbstractSyncService)> (4)
<com.android.exchange.EasAccountService: void run()> (1)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.EasSyncService: com.android.exchange.EasSyncService setupServiceForAccount(android.content.Context,com.android.emailcommon.provider.Account)> (3)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.emailsync.SyncManager: void runAccountReconcilerSync(android.content.Context)> (3)
<com.android.exchange.service.EasAutoDiscover: java.lang.String makeUserString()> (1)
<com.android.exchange.service.EasMeetingResponder: java.lang.String makeUserString()> (1)
<com.android.exchange.service.EasServerConnection: java.lang.String makeUriString(java.lang.String)> (5)
<com.android.exchange.eas.EasSyncCalendar: void <init>(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.emailsync.SyncManager$AccountObserver$1: void run()> (1)
<com.android.emailsync.SyncManager: boolean canAutoSync(com.android.emailcommon.provider.Account)> (2)
<com.android.exchange.EasAccountService: void sync()> (1)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.EasSyncService: boolean tryProvision(com.android.exchange.EasSyncService)> (2)
<com.android.email.activity.setup.AccountSetupBasics: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupIncoming: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupNames: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupOptions: void onCreate(android.os.Bundle)> (2)
<com.android.email.activity.setup.AccountSetupOutgoing: void onCreate(android.os.Bundle)> (2)
<com.android.email.mail.store.ServiceStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.email.activity.setup.AccountSetupOptions: void optionsComplete()> (1)
<com.android.email.provider.EmailProvider$5: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.provider.EmailProvider: int uiUpdateMessage(android.net.Uri,android.content.ContentValues,boolean)> (2)
<com.android.email.provider.EmailProvider: void deleteAccountData(android.content.Context,long)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: boolean tryStartDownload(com.android.email.service.AttachmentDownloadService$DownloadRequest)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void endDownload(long,int)> (1)
<com.android.email.service.PopImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.ContentProviderClient,android.content.SyncResult)> (3)
<com.android.email2.ui.MailActivityEmail: void updateLoggingFlags(android.content.Context)> (3)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.email.activity.setup.AccountSettings: void onAttachFragment(android.app.Fragment)> (1)
<com.android.email.activity.setup.AccountSetupOutgoingFragment: void setCallback(com.android.email.activity.setup.AccountServerBaseFragment$Callback)> (2)
<com.android.emailsync.AbstractSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.EasAccountService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasAccountService: com.android.exchange.EasSyncService setupServiceForAccount(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasSyncService setupServiceForAccount(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (3)
<com.android.emailsync.SyncManager$AccountObserver: void onAccountChanged()> (2)
<com.android.emailsync.SyncManager: void reconcileAccounts(android.content.Context)> (1)
<com.android.exchange.eas.EasOperation: java.lang.String getRequestUri()> (11)
<com.android.exchange.service.EasAutoDiscover: java.lang.String makeUriString(java.lang.String)> (1)
<com.android.exchange.service.EasMeetingResponder: java.lang.String makeUriString(java.lang.String)> (1)
<com.android.exchange.service.EasServerConnection: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,long)> (3)
<com.android.exchange.service.EasServerConnection: java.lang.String makeUriString(java.lang.String,java.lang.String)> (3)
<com.android.exchange.eas.EasSyncBase: com.android.exchange.eas.EasSyncCollectionTypeBase getCollectionTypeHandler(int)> (1)
<com.android.emailsync.SyncManager: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (2)
<com.android.exchange.ExchangeService: boolean canAutoSync(com.android.emailcommon.provider.Account)> (3)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.EasAccountService: boolean tryProvision(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.EasOutboxService: boolean tryProvision(com.android.exchange.EasSyncService)> (1)
<com.android.email.mail.Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (3)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.email.activity.setup.AccountSetupOptions: void access$100(com.android.email.activity.setup.AccountSetupOptions)> (1)
<com.android.email.provider.EmailProvider$5: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.provider.EmailProvider: int uiDeleteMessage(android.net.Uri)> (2)
<com.android.email.provider.EmailProvider: int uiUpdateMessage(android.net.Uri,android.content.ContentValues)> (1)
<com.android.email.provider.EmailProvider: int uiDeleteAccount(android.net.Uri)> (1)
<com.android.email.provider.EmailProvider: int uiDeleteAccountData(android.net.Uri)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.email.service.AttachmentDownloadService$ServiceCallback: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.service.LegacyImapSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.service.Pop3SyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.service.PopImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.ContentProviderClient,android.content.SyncResult)> (3)
<com.android.email2.ui.MailActivityEmail: void onCreate(android.os.Bundle)> (3)
<com.android.email.activity.setup.DebugFragment: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.email.service.AccountService$1$1: void run()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.emailsync.AbstractSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.EasAccountService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (1)
<com.android.emailsync.SyncManager$AccountObserver: void access$100(com.android.emailsync.SyncManager$AccountObserver)> (2)
<com.android.exchange.ExchangeService$2: void onAccountChanged()> (1)
<com.android.exchange.ExchangeService: void reconcileAccounts(android.content.Context)> (1)
<com.android.exchange.eas.EasFolderSync: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasLoadAttachment: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasMoveItems: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasOutboxSync: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasPing: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasProvision: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasSearch: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasSettings: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasSyncBase: java.lang.String getRequestUri()> (1)
<com.android.exchange.eas.EasSync: java.lang.String getRequestUri()> (1)
<com.android.exchange.service.EasAutoDiscover: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,long)> (1)
<com.android.exchange.service.EasMeetingResponder: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,long)> (1)
<com.android.exchange.service.EasServerConnection: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[],long)> (3)
<com.android.exchange.service.EasAutoDiscover: java.lang.String makeUriString(java.lang.String,java.lang.String)> (1)
<com.android.exchange.service.EasMeetingResponder: java.lang.String makeUriString(java.lang.String,java.lang.String)> (1)
<com.android.exchange.eas.EasSyncBase: boolean init(boolean)> (1)
<com.android.emailsync.SyncManager: long checkMailboxes()> (2)
<com.android.exchange.ExchangeService: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (1)
<com.android.exchange.EasAccountService: void runPingLoop()> (1)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.email.mail.store.ImapStore: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.mail.store.Pop3Store: android.os.Bundle autoDiscover(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.email.activity.setup.AccountSetupOptions$2$1: void run()> (1)
<com.android.email.provider.EmailProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.provider.EmailProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (5)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub$Proxy: void loadAttachmentStatus(long,long,int,int)> ()
<com.android.emailcommon.service.IEmailServiceCallback$Stub: void loadAttachmentStatus(long,long,int,int)> (2)
<com.android.email.service.LegacyImapSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.service.Pop3SyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.email.service.PopImapSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.mail.ui.AbstractMailActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mail.ui.MailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.exchange.EasAccountService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.ExchangeService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailsync.SyncManager$AccountObserver$2: void run()> (1)
<com.android.exchange.ExchangeService$2: void access$100(com.android.emailsync.SyncManager$AccountObserver)> (1)
<com.android.exchange.service.EasAutoDiscover: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[],long)> (1)
<com.android.exchange.service.EasMeetingResponder: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[],long)> (1)
<com.android.exchange.service.EasServerConnection: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (2)
<com.android.exchange.eas.EasOperation: boolean init(boolean)> (12)
<com.android.emailsync.SyncManager: void run()> (2)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.provider.EmailProvider: int uiUpdateFolder(android.content.Context,android.net.Uri,android.content.ContentValues)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.emailcommon.service.IEmailServiceCallback$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IEmailServiceCallback: void loadAttachmentStatus(long,long,int,int)> (4)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.exchange.service.EasAutoDiscover: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (1)
<com.android.exchange.service.EasMeetingResponder: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (2)
<com.android.exchange.eas.EasFolderSync: boolean init(boolean)> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean init(boolean)> (1)
<com.android.exchange.eas.EasMoveItems: boolean init(boolean)> (1)
<com.android.exchange.eas.EasOptions: boolean init(boolean)> (1)
<com.android.exchange.eas.EasOutboxSync: boolean init(boolean)> (1)
<com.android.exchange.eas.EasPing: boolean init(boolean)> (1)
<com.android.exchange.eas.EasProvision: boolean init(boolean)> (1)
<com.android.exchange.eas.EasSearch: boolean init(boolean)> (1)
<com.android.exchange.eas.EasSettings: boolean init(boolean)> (1)
<com.android.exchange.eas.EasSync: boolean init(boolean)> (1)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService$ServiceCallback: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.email.service.EmailServiceStub$MessageRetrievalListenerBridge: void loadAttachmentProgress(int)> (1)
<com.android.email.service.EmailServiceStub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (4)
<com.android.exchange.eas.EasLoadAttachment: void doStatusCallback(com.android.emailcommon.service.IEmailServiceCallback,long,long,int,int)> (2)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EasMeetingResponder: void sendResponse(com.android.emailcommon.provider.EmailContent$Message,java.lang.String,int)> (1)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.emailcommon.mail.Folder$MessageRetrievalListener: void loadAttachmentProgress(int)> (1)
<com.android.email.service.ImapService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.eas.EasLoadAttachment: void access$000(com.android.emailcommon.service.IEmailServiceCallback,long,long,int,int)> (1)
<com.android.exchange.service.EasMeetingResponder: void sendMeetingResponse(android.content.Context,long,int)> (1)
<com.android.email.mail.store.ImapFolder: com.android.emailcommon.mail.Body decodeBody(java.io.InputStream,java.lang.String,int,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> (1)
<com.android.exchange.eas.EasLoadAttachment$ProgressCallback: void doCallback(int)> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void sendMeetingResponse(long,int)> (2)
<com.android.email.mail.store.ImapFolder: void fetchInternal(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.FetchProfile,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> (1)
<com.android.exchange.adapter.ItemOperationsParser: void readChunked(java.io.InputStream,java.io.OutputStream,long,com.android.exchange.eas.EasLoadAttachment$ProgressCallback)> (3)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> ()
<com.android.emailcommon.service.IEmailService$Stub: void sendMeetingResponse(long,int)> (2)
<com.android.email.mail.store.ImapFolder: void fetch(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.FetchProfile,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> (1)
<com.android.exchange.adapter.AttachmentLoader: void loadAttachment()> (1)
<com.android.exchange.adapter.ItemOperationsParser: void parseProperties()> (1)
<com.android.exchange.eas.EasLoadAttachment: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.emailcommon.service.IEmailService: void sendMeetingResponse(long,int)> (1)
<com.android.emailcommon.mail.Folder: void fetch(com.android.emailcommon.mail.Message[],com.android.emailcommon.mail.FetchProfile,com.android.emailcommon.mail.Folder$MessageRetrievalListener)> (6)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.adapter.ItemOperationsParser: void parseFetch()> (1)
<com.android.exchange.eas.EasOperation: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.emailcommon.service.EmailServiceProxy$6: void run()> (1)
<com.android.email.service.ImapService: boolean processPendingAppend(android.content.Context,com.android.email.mail.Store,com.android.emailcommon.provider.Mailbox,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.email.service.ImapService: int searchMailboxImpl(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.email.service.ImapService: void downloadFlagAndEnvelope(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,com.android.emailcommon.mail.Folder,java.util.ArrayList,java.util.HashMap,java.util.ArrayList)> (1)
<com.android.email.service.ImapService: void loadUnsyncedMessages(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.mail.Folder,java.util.ArrayList,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.email.service.ImapService: void synchronizeMailboxGeneric(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.adapter.ItemOperationsParser: void parseResponse()> (1)
<com.android.email.service.ImapService: void processUploadMessage(android.content.Context,com.android.email.mail.Store,com.android.emailcommon.provider.Mailbox,long)> (1)
<com.android.email.service.ImapService: int access$000(android.content.Context,long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.email.service.ImapService: int synchronizeMailboxSynchronous(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,boolean)> (1)
<com.android.exchange.adapter.ItemOperationsParser: boolean parse()> (3)
<com.android.email.service.ImapService: void processPendingUploadsSynchronous(android.content.Context,com.android.emailcommon.provider.Account,java.lang.String[])> (1)
<com.android.email.service.ImapService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.email.service.PopImapSyncAdapterService: void sync(android.content.Context,long,android.os.Bundle,android.content.SyncResult,boolean,int)> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.email.service.ImapService: void processPendingActionsSynchronous(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.email.service.EmailServiceStub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (4)
<com.android.email.service.LegacyImapSyncAdapterService: void sync(android.content.Context,long,android.os.Bundle,android.content.SyncResult,boolean,int)> (1)
<com.android.email.service.Pop3SyncAdapterService: void sync(android.content.Context,long,android.os.Bundle,android.content.SyncResult,boolean,int)> (1)
<com.android.email.service.Pop3Service$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getDeviceSvn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getDeviceSvn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceSvn()> (1)
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getSubscriberId()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getSubscriberId()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberId()> (1)
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> (5)
<android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)> (4)
<com.android.server.location.GpsLocationProvider: void requestSetID(int)> ()
<com.android.server.net.NetworkPolicyManagerService: boolean isTemplateRelevant(android.net.NetworkTemplate)> (1)
<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)> (1)
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)> (1)
<com.android.server.net.NetworkPolicyManagerService: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()> (5)
<com.android.server.net.NetworkStatsService: void updateIfacesLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsLocked()> (7)
<com.android.server.net.NetworkPolicyManagerService: void access$1500(com.android.server.net.NetworkPolicyManagerService)> (1)
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledLocked()> (5)
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isNetworkMetered(android.net.NetworkState)> ()
<android.net.INetworkPolicyManager$Stub: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void access$1300(com.android.server.net.NetworkPolicyManagerService)> (2)
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)> (2)
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$900(com.android.server.net.NetworkPolicyManagerService)> (3)
<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)> (3)
<com.android.server.net.NetworkPolicyManagerService: void systemReady()> (1)
<com.android.server.net.NetworkPolicyManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$800(com.android.server.net.NetworkPolicyManagerService)> (3)
<android.net.INetworkPolicyManager: boolean isNetworkMetered(android.net.NetworkState)> (1)
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.net.NetworkPolicyManagerService$10: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1200(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkPolicy)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1000(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkTemplate,int)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.INetworkPolicyManager$Stub: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<com.android.server.net.NetworkPolicyManagerService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> ()
<android.net.INetworkPolicyManager$Stub: void setRestrictBackground(boolean)> (2)
<com.android.server.net.NetworkPolicyManagerService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.server.ConnectivityService: boolean isNetworkMeteredUnchecked(int)> (2)
<com.android.server.net.NetworkPolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.net.NetworkPolicyManagerService$8: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager: void setRestrictBackground(boolean)> (1)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)> ()
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.development.Connectivity: void access$3800(com.android.development.Connectivity)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: void enter()> (36)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getGroupIdLevel1()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getGroupIdLevel1()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getGroupIdLevel1()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getGroupIdLevel1()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getGroupIdLevel1()> (1)
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getIccSerialNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getIccSerialNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIccSerialNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1Number()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1Number()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1Number()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> (6)
<com.android.bluetooth.map.BluetoothMapContent: void setFilterInfo(com.android.bluetooth.map.BluetoothMapContent$FilterInfo)> (3)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.google.android.mms.pdu.PduPersister: void loadRecipients(int,java.util.HashSet,java.util.HashMap,boolean)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean msgListingHasUnread(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: com.android.bluetooth.map.BluetoothMapMessageListing msgListing(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (2)
<com.android.bluetooth.map.BluetoothMapContent: int msgListingSize(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)> ()
<com.android.bluetooth.map.BluetoothMapObexServer: int sendMessageListingRsp(javax.obex.Operation,com.android.bluetooth.map.BluetoothMapAppParams,java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpMessages()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getLine1AlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1AlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getMsisdn()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getMsisdn()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getMsisdn()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getMsisdn()> (1)
<android.telephony.TelephonyManager: java.lang.String getMsisdn()> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailNumber()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailNumber()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailNumber()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> (1)
<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> ()
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (1)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (3)
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: java.lang.String getVoiceMailAlphaTag()> ()
<com.android.internal.telephony.IPhoneSubInfo$Stub: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.PhoneSubInfoProxy: java.lang.String getVoiceMailAlphaTag()> (2)
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailAlphaTag()> (1)
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo markAsVoiceMail()> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (13)
<android.media.MediaFocusControl: void <init>(android.os.Looper,android.content.Context,android.media.VolumeController,android.media.AudioService)> (1)
<android.net.MobileDataStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<com.android.bluetooth.hfp.HeadsetPhoneState: void listenForPhoneState(boolean)> (4)
<com.android.bluetooth.map.BluetoothMapContentObserver: void registerPhoneServiceStateListener()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void unRegisterPhoneServiceStateListener()> (1)
<com.android.deskclock.alarms.AlarmService: void startAlarm(com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmService: void stopCurrentAlarm()> (2)
<com.android.deskclock.TimerRingService: void onCreate()> (1)
<com.android.deskclock.TimerRingService: void onDestroy()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.connectivity.DataConnectionStats: void startMonitoring()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void addPhoneStateListener()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void removePhoneStateListener()> (2)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.net.BaseNetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (2)
<com.android.bluetooth.hfp.HeadsetPhoneState: void cleanup()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processSlcConnected()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void enter()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void init()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void deinit()> (1)
<com.android.deskclock.alarms.AlarmService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.deskclock.alarms.AlarmService: void onDestroy()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<android.net.NetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<com.android.server.connectivity.Vpn: void startMonitoring(android.content.Context,android.os.Handler)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void <init>(android.content.Context,android.bluetooth.BluetoothDevice,android.os.Handler)> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void shutdown()> (3)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.ConnectivityService: void onUserStart(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: void startObexServerSession()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnectMap(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService: void closeService()> (3)
<com.android.bluetooth.map.BluetoothMapService: void stopObexServerSession()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.server.ConnectivityService: void access$5400(com.android.server.ConnectivityService,int)> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<com.android.bluetooth.map.BluetoothMapService: void access$600(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1400(com.android.bluetooth.map.BluetoothMapService)> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1000(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.ConnectivityService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService$MapBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean stop()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.bluetooth.map.BluetoothMapService: void startRfcommSocketListener()> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void doStop(android.content.Intent)> (8)
<com.android.bluetooth.map.BluetoothMapService: void access$900(com.android.bluetooth.map.BluetoothMapService)> (2)
<android.bluetooth.IBluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (8)
<com.android.bluetooth.gatt.GattService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean start()> (1)
<android.bluetooth.BluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean start()> (1)
<com.android.bluetooth.btservice.ProfileService: void doStart(android.content.Intent)> (8)
<com.android.bluetooth.a2dp.A2dpService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.gatt.GattService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStart(android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()> (2)
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkPolicy[] getNetworkPolicies()> ()
<android.net.INetworkPolicyManager$Stub: android.net.NetworkPolicy[] getNetworkPolicies()> (2)
<android.net.INetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> (1)
<android.net.NetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies()> ()
Permission:android.permission.WRITE_SETTINGS
216 Callers:
<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)> (1)
<android.app.ActivityManagerNative: void updatePersistentConfiguration(android.content.res.Configuration)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void updatePersistentConfiguration(android.content.res.Configuration)> ()
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.power.PowerManagerService: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub$Proxy: void setStayOnSetting(int)> ()
<android.os.IPowerManager$Stub: void setStayOnSetting(int)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void setStayOnSetting(int)> (1)
<com.android.server.power.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.svc.PowerCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> ()
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> (16)
<android.media.MediaFocusControl$NotificationListenerObserver: void <init>(android.media.MediaFocusControl)> (1)
<android.view.accessibility.CaptioningManager: void registerObserver(java.lang.String)> (1)
<com.android.browser.SystemAllowGeolocationOrigins: void start()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()> (1)
<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)> (1)
<com.android.server.am.CoreSettingsObserver: void beginObserveCoreSettings()> (1)
<com.android.server.CertBlacklister: void registerObservers(android.content.ContentResolver)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void <init>(com.android.server.InputMethodManagerService,android.os.Handler)> (1)
<com.android.server.location.LocationBlacklist: void init()> (1)
<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)> (1)
<com.android.server.LocationManagerService: void systemRunning()> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void <init>(com.android.server.NotificationManagerService,android.os.Handler)> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.print.PrintManagerService: void registerContentObservers()> (1)
<com.android.server.search.SearchManagerService$GlobalSearchProviderObserver: void <init>(com.android.server.search.SearchManagerService,android.content.ContentResolver)> ()
<android.media.MediaFocusControl: void <init>(android.os.Looper,android.content.Context,android.media.VolumeController,android.media.AudioService)> (1)
<android.view.accessibility.CaptioningManager: void addCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener)> (2)
<com.android.browser.Controller: void <init>(android.app.Activity)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.CoreSettingsObserver: void <init>(com.android.server.am.ActivityManagerService)> (1)
<com.android.server.CertBlacklister: void <init>(android.content.Context)> (1)
<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)> (1)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.StatusBarManagerService,com.android.server.LightsService)> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.print.PrintManagerService: void <init>(android.content.Context)> (1)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)> (2)
<android.media.WebVttRenderingWidget: void manageChangeListener()> (3)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.am.ActivityManagerService: void installSystemProviders()> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<android.media.MediaPlayer$2: int addTrack()> (1)
<android.media.MediaPlayer: void scanInternalSubtitleTracks()> (3)
<android.media.WebVttRenderingWidget: void onAttachedToWindow()> (3)
<android.media.WebVttRenderingWidget: void onDetachedFromWindow()> (3)
<android.media.WebVttRenderingWidget: void setVisible(boolean)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<android.media.MediaPlayer$2: void run()> (1)
<android.media.MediaPlayer: void access$600(android.media.MediaPlayer)> (4)
<com.android.music.AudioPreview$PreviewPlayer: void scanInternalSubtitleTracks()> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void scanInternalSubtitleTracks()> (1)
<android.media.SubtitleTrack$RenderingWidget: void setVisible(boolean)> (2)
<com.android.music.AudioPreview$PreviewPlayer: void access$600(android.media.MediaPlayer)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void access$600(android.media.MediaPlayer)> (1)
<android.media.SubtitleTrack: void hide()> (3)
<android.media.SubtitleTrack: void show()> (3)
<android.media.SubtitleController: void doHide()> (1)
<android.media.SubtitleController: void doSelectTrack(android.media.SubtitleTrack)> (1)
<android.media.WebVttTrack: void hide()> (1)
<android.media.SubtitleController: void doShow()> (1)
<android.media.WebVttTrack: void show()> (1)
<android.media.SubtitleController: void access$100(android.media.SubtitleController)> (1)
<android.media.SubtitleController: void access$200(android.media.SubtitleController,android.media.SubtitleTrack)> (1)
<android.media.SubtitleController: void access$000(android.media.SubtitleController)> (1)
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> (25)
<android.media.AudioService$SettingsObserver: void <init>(android.media.AudioService)> (1)
<android.net.CaptivePortalTracker$ProvisioningObserver: void <init>(android.net.CaptivePortalTracker)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WifiWatchdogStateMachine: void registerForSettingsChanges()> (1)
<android.net.wifi.WifiWatchdogStateMachine: void registerForWatchdogToggle()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone,android.telephony.CellInfo)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase$DataRoamingSettingObserver: void register()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (1)
<com.android.internal.telephony.SMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (5)
<com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler: void <init>(android.content.Context,java.util.concurrent.atomic.AtomicBoolean)> (1)
<com.android.server.BackupManagerService: void <init>(android.content.Context)> (1)
<com.android.server.ConnectivityService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.display.OverlayDisplayAdapter$1: void run()> (1)
<com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)> (1)
<com.android.server.NetworkTimeUpdateService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.NsdService$NsdStateMachine: void registerForNsdSetting()> (1)
<com.android.server.SamplingProfilerService: void registerSettingObserver(android.content.Context)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.server.wifi.WifiController: void registerForStayAwakeModeChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiController: void registerForWifiIdleTimeChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiController: void registerForWifiSleepPolicyChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiNotificationController$NotificationEnabledSettingObserver: void register()> (1)
<com.android.server.wifi.WifiService: void registerForScanModeChange()> (1)
<android.net.CaptivePortalTracker: void <init>(android.content.Context,android.net.IConnectivityManager)> (1)
<com.android.server.wifi.WifiService: void <init>(android.content.Context)> (1)
<android.net.wifi.WifiWatchdogStateMachine: void <init>(android.content.Context)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMALTEPhone)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone,android.telephony.CellInfo)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher,com.android.internal.telephony.gsm.GsmInboundSmsHandler)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (1)
<com.android.internal.telephony.SmsUsageMonitor: void <init>(android.content.Context)> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<com.android.server.display.WifiDisplayAdapter$1: void run()> (1)
<com.android.server.NetworkTimeUpdateService: void systemRunning()> (1)
<com.android.server.NsdService$NsdStateMachine: void <init>(com.android.server.NsdService,java.lang.String)> (1)
<com.android.server.SamplingProfilerService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiController: void initializeAndRegisterForSettingsChange(android.os.Looper)> (1)
<com.android.server.wifi.WifiNotificationController: void <init>(android.content.Context,android.net.wifi.WifiStateMachine)> (1)
<android.net.CaptivePortalTracker: android.net.CaptivePortalTracker makeCaptivePortalTracker(android.content.Context,android.net.IConnectivityManager)> (1)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void initSstIcc()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void initSstIcc()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void <init>(com.android.internal.telephony.PhoneBase)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (10)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.NsdService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbService: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiController: void <init>(android.content.Context,com.android.server.wifi.WifiService,android.os.Looper)> (1)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneProxy: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (2)
<com.android.server.NsdService: com.android.server.NsdService create(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.PhoneProxy: void phoneObjectUpdater(int)> (2)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> ()
<com.android.internal.telephony.Phone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.PhoneBase: void updatePhoneObject(int)> (7)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.ServiceStateTracker: void updatePhoneObject()> (6)
<com.android.internal.telephony.sip.SipPhoneBase: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.sip.SipPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updatePhoneObject()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> (15)
<android.preference.VolumePreference$SeekBarVolumizer: void initSeekBar(android.widget.SeekBar,android.net.Uri)> (1)
<android.widget.DateTimeView: void registerReceivers()> (1)
<com.android.datetimepicker.HapticFeedbackController: void start()> (2)
<com.android.deskclock.ClockFragment: void onResume()> (1)
<com.android.deskclock.ScreensaverActivity: void onStart()> (1)
<com.android.deskclock.Screensaver: void onAttachedToWindow()> (1)
<com.android.internal.view.RotationPolicy: void registerRotationPolicyListener(android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener,int)> (1)
<com.android.server.input.InputManagerService: void registerPointerSpeedSettingObserver()> (1)
<com.android.server.input.InputManagerService: void registerShowTouchesSettingObserver()> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int,android.net.Uri)> (1)
<android.widget.DateTimeView: void onAttachedToWindow()> (2)
<com.android.datetimepicker.date.DatePickerDialog: void onResume()> (2)
<com.android.datetimepicker.time.TimePickerDialog: void onResume()> (2)
<com.android.internal.view.RotationPolicy: void registerRotationPolicyListener(android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener)> ()
<com.android.server.input.InputManagerService: void start()> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)> (1)
<android.preference.VolumePreference: void onBindDialogView(android.view.View)> (2)
Permission:android.permission.BROADCAST_STICKY
2887 Callers:
<android.app.ActivityManagerNative: void broadcastStickyIntent(android.content.Intent,java.lang.String,int)> (6)
<com.android.internal.telephony.cdma.CDMAPhone: void sendEmergencyCallbackModeChange()> (3)
<com.android.internal.telephony.PhoneProxy: void phoneObjectUpdater(int)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: void broadcastStickyIntent(android.content.Intent,java.lang.String,int)> (1)
<com.android.server.BatteryService$7: void run()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendEmergencyCallbackModeChange()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void handleExitEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void setExternalState(com.android.internal.telephony.IccCardConstants$State,boolean)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void updateQuietMode()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleExitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void setExternalState(com.android.internal.telephony.IccCardConstants$State)> (5)
<com.android.internal.telephony.uicc.IccCardProxy: void setVoiceRadioTech(int)> (2)
<com.android.internal.telephony.PhoneBase: void updatePhoneObject(int)> (7)
<com.android.internal.telephony.uicc.IccCardProxy: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void processLockedState()> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void updateExternalState()> (1)
<com.android.internal.telephony.PhoneProxy: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.ServiceStateTracker: void updatePhoneObject()> (6)
<com.android.internal.telephony.sip.SipPhoneBase: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.sip.SipPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void updateIccAvailability()> (2)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updatePhoneObject()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> ()
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<android.app.ContextImpl: void sendStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void sendStickyBroadcast(android.content.Intent)> (1)
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> (363)
<android.accessibilityservice.AccessibilityService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.accounts.CantAddAccountActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.accounts.ChooseAccountActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.accounts.ChooseAccountTypeActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.app.ActivityGroup: void sendStickyBroadcast(android.content.Intent)> (4)
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.AliasActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.app.Application: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.backup.BackupAgent: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.FullBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ExpandableListActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.app.IntentService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.LauncherActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<android.app.ListActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.app.NativeActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.app.Presentation$1: void sendStickyBroadcast(android.content.Intent)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.Service: void sendStickyBroadcast(android.content.Intent)> (2)
<android.app.TabActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<android.content.MutableContextWrapper: void sendStickyBroadcast(android.content.Intent)> (2)
<android.content.SyncActivityTooManyDeletes: void sendStickyBroadcast(android.content.Intent)> (4)
<android.hardware.location.GeofenceHardwareService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyBroadcast(android.content.Intent)> (3)
<android.location.SettingInjectorService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.net.VpnService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.nfc.cardemulation.HostApduService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.nfc.cardemulation.OffHostApduService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.preference.PreferenceActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<android.printservice.PrintService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.dreams.DreamService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.notification.NotificationListenerService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.textservice.SpellCheckerService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<android.speech.RecognitionService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.speech.tts.TextToSpeechService: void sendStickyBroadcast(android.content.Intent)> (2)
<android.support.v4.app.FragmentActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyBroadcast(android.content.Intent)> (4)
<android.test.IsolatedContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.test.mock.MockApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<android.test.RenamingDelegatingContext: void sendStickyBroadcast(android.content.Intent)> (2)
<android.view.ContextThemeWrapper: void sendStickyBroadcast(android.content.Intent)> (2)
<android.widget.RemoteViewsService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.a2dp.A2dpService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.btservice.AdapterApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.btservice.AdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.btservice.ProfileService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.gatt.GattService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.hdp.HealthService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.hfp.HeadsetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.hid.HidService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.map.BluetoothMapService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.opp.TestActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.pan.PanService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.BookmarkSearch: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.BrowserActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.BrowserBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.browser.Browser: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.ComboViewActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.ShortcutActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.calculator2.Calculator: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.AbstractCalendarActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.alerts.AlertActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.alerts.AlertService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.InitAlarmsService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AllInOneActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.CalendarSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.calendar.event.EditEventActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.EventInfoActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.SearchActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.app.CameraApp: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.CameraActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.CameraBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.crop.CropActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.MediaSaveService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.camera.ProxyLauncher: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.SecureCameraActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.certinstaller.CertInstallerMain: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.certinstaller.CertInstaller: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.alarms.AlarmActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.alarms.AlarmService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.DeskClock: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.HandleApiCalls: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.ScreensaverActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.deskclock.Screensaver: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.TimerRingService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.AccountsTester: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.AppHwConfigList: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.development.AppHwPref: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.CacheAbuser: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.ConfigurationViewer: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.Connectivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.DataList: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.development.Details: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.Development: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.development.InstrumentationList: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.development.LogViewer: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.MediaScannerActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.PackageBrowser: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.development.PackageSummary: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.PermissionDetails: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.PointerLocation: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.ProcessInfo: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.RunningProcesses: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.development.ShowActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.SyncAdapterDriver: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.development.UnderdevelopedSettings: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.documentsui.DocumentsActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.documentsui.DocumentsApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.documentsui.SettingsActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.documentsui.TestActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.dreams.basic.Colors: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.dreams.phototable.FlipperDream: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.dreams.phototable.PhotoTableDream: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email2.ui.MailActivityEmail: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.email.activity.ComposeActivityEmail: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.EventViewer: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSecurity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSettings: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupType: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.MailboxSettings: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.EmailApplication: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.EmailIntentService: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.provider.FolderPickerActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.email.service.AccountService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.AttachmentDownloadService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.AuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasTestAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.ImapAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.ImapService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.PolicyService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.Pop3AuthenticatorService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.Pop3Service: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.Pop3SyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.PopImapSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.emailsync.SyncManager: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.EasCertificateRequestor: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.exchange.ExchangeService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.Exchange: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.EasService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.SettingsRedirector: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.ex.photo.PhotoViewActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.galaxy4.Galaxy4: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.AlbumPicker: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.gallery3d.app.BatchService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.gallery3d.app.DialogPicker: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.gallery3d.app.GalleryActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.app.Gallery: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.MovieActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.app.PickerActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.gallery3d.app.TrimVideo: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.Wallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.gadget.WidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.ingest.IngestActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.ingest.IngestService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.gallery3d.settings.GallerySettings: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.BackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.LatinIME: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.research.FeedbackActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.research.ReplayerService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.research.UploaderService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.AlertActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.ChooserActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.internal.app.DisableCarModeActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.NetInitiatedActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.app.PlatLogoActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.ResolverActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.app.RestrictionsPinActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.backup.LocalTransportService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.internal.util.AsyncService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.keychain.KeyChainActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.MagicSmoke: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.browse.EmlViewerActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.compose.AutoSendActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.mail.compose.ComposeActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.compose.EmptyService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.mail.MailIntentService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.MailLogService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.mail.NotificationActionIntentService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void sendStickyBroadcast(android.content.Intent)> (6)
<com.android.mail.ui.AbstractMailActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.ui.CreateShortcutActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.ui.FolderSelectionActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.ui.MailActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.mail.ui.ShortcutNameActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.widget.WidgetService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.music.AudioPreview: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.CreatePlaylist: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.DeleteItems: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.MediaPickerActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.music.MediaPlaybackActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.MediaPlaybackService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.music.MusicBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.MusicPicker: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.music.PlaylistBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.music.QueryBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.music.RenamePlaylist: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.ScanningProgress: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.TrackBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.music.VideoBrowserActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.musicvis.RenderScriptWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis1.Visualization1: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis2.Visualization2: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.musicvis.vis3.Visualization3: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.musicvis.vis4.Visualization4: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.musicvis.vis5.Visualization5: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.WeekSelector: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.noisefield.NoiseField: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.GrantActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.InstallAppProgress: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.UninstallerActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.pacprocessor.PacService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.phasebeam.PhaseBeam: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.photos.AlbumActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.photos.FullscreenViewer: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.photos.GalleryActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.printspooler.PrintJobConfigActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.printspooler.PrintSpoolerService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.printspooler.SelectPrinterActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.downloads.ui.DownloadList: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.provision.DefaultActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.quicksearchbox.DialogActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.server.PackageManagerBackupAgent: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.server.ShutdownActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.server.SystemBackupAgent: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.smspush.WapPushManager: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.soundrecorder.SoundRecorder: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.tts.compat.CompatTtsService: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.KenBurnsActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.videoeditor.NoSearchActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.videoeditor.OverlayTitleEditor: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.ProjectsActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.service.ApiService: void sendStickyBroadcast(android.content.Intent)> (2)
<com.android.videoeditor.TransitionsActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.VideoEditorActivity: void sendStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.fall.Fall: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.fall.FallWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.galaxy.Galaxy: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.grass.Grass: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void sendStickyBroadcast(android.content.Intent)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void sendStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.DownloadVoiceData: void sendStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.EngineSettings: void sendStickyBroadcast(android.content.Intent)> (6)
<com.svox.pico.GetSampleText: void sendStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.PicoService: void sendStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.Pico: void sendStickyBroadcast(android.content.Intent)> (4)
<com.android.music.MediaPlaybackService: void notifyChange(java.lang.String)> (18)
<com.android.music.MediaPlaybackService: int removeTrack(long)> (1)
<com.android.music.MediaPlaybackService: int removeTracksInternal(int,int)> (2)
<com.android.music.MediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void access$1000(com.android.music.MediaPlaybackService,java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void addToPlayList(long[],int)> (2)
<com.android.music.MediaPlaybackService: void closeExternalStorageFiles(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void doAutoShuffleUpdate()> (3)
<com.android.music.MediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.MediaPlaybackService: void gotoNext(boolean)> (5)
<com.android.music.MediaPlaybackService: void moveQueueItem(int,int)> (1)
<com.android.music.MediaPlaybackService: void onCreate()> (1)
<com.android.music.MediaPlaybackService: void openCurrentAndNext()> (9)
<com.android.music.MediaPlaybackService: void open(long[],int)> (1)
<com.android.music.MediaPlaybackService: void pause()> (4)
<com.android.music.MediaPlaybackService: void play()> (10)
<com.android.music.MediaPlaybackService: void prev()> (3)
<com.android.music.MediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.MediaPlaybackService: void setShuffleMode(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTrack(long)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService: int getNextPosition(boolean)> (3)
<com.android.music.MediaPlaybackService$ServiceStub: void enqueue(long[],int)> (2)
<com.android.music.MediaPlaybackService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void next()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void moveQueueItem(int,int)> (2)
<com.android.music.MediaPlaybackService: void access$400(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void reloadQueue()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void open(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void pause()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void play()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void prev()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setQueuePosition(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setShuffleMode(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTrack(long)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTracks(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void setNextTrack()> (3)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void enqueue(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void enqueue(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void next()> ()
<com.android.music.IMediaPlaybackService$Stub: void next()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void moveQueueItem(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: void moveQueueItem(int,int)> (2)
<com.android.music.MediaPlaybackService: void access$2300(com.android.music.MediaPlaybackService)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void open(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void open(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void pause()> ()
<com.android.music.IMediaPlaybackService$Stub: void pause()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void play()> ()
<com.android.music.IMediaPlaybackService$Stub: void play()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void prev()> ()
<com.android.music.IMediaPlaybackService$Stub: void prev()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setQueuePosition(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setQueuePosition(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setShuffleMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setShuffleMode(int)> (2)
<com.android.music.IMediaPlaybackService: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.IMediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void access$1200(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void setRepeatMode(int)> (1)
<com.android.music.IMediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void next()> (3)
<com.android.music.IMediaPlaybackService: void moveQueueItem(int,int)> (1)
<com.android.music.IMediaPlaybackService: void open(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void pause()> (1)
<com.android.music.IMediaPlaybackService: void play()> (4)
<com.android.music.IMediaPlaybackService: void prev()> (3)
<com.android.music.IMediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.IMediaPlaybackService: void setShuffleMode(int)> (5)
<com.android.music.MusicUtils: void deleteTracks(android.content.Context,long[])> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void makeNowPlayingCursor()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.MusicUtils: void clearQueue()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean removeItem(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setRepeatMode(int)> (2)
<com.android.music.MusicUtils: void addToCurrentPlaylist(android.content.Context,long[])> (3)
<com.android.music.MediaPlaybackActivity$8: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackActivity: void scanForward(int,long)> (3)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void moveItem(int,int)> (2)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int,boolean)> (3)
<com.android.music.MediaPlaybackActivity: void doPauseResume()> (2)
<com.android.music.MediaPlaybackActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity: void startPlayback()> (1)
<com.android.music.MediaPlaybackActivity: void scanBackward(int,long)> (3)
<com.android.music.TrackBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.MediaPlaybackActivity: void cycleRepeat()> (1)
<com.android.music.MediaPlaybackActivity: void toggleShuffle()> (2)
<com.android.music.MusicBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MusicUtils: void togglePartyShuffle()> (5)
<com.android.music.DeleteItems$2: void onClick(android.view.View)> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: boolean requery()> (1)
<com.android.music.TrackBrowserActivity$NowPlayingCursor: void <init>(com.android.music.TrackBrowserActivity,com.android.music.IMediaPlaybackService,java.lang.String[])> (2)
<com.android.music.TrackBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.TrackBrowserActivity: void removeItem()> (1)
<com.android.music.TrackBrowserActivity: void removePlaylistItem(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setRepeatMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setRepeatMode(int)> (2)
<com.android.music.AlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.music.ArtistAlbumBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.music.TrackBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.music.MediaPlaybackActivity: void access$1000(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.music.TrackBrowserActivity$4: void drop(int,int)> (1)
<com.android.music.TrackBrowserActivity: void moveItem(boolean)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int,boolean)> (3)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int)> (7)
<com.android.music.MusicUtils: void playPlaylist(android.content.Context,long)> (2)
<com.android.music.MediaPlaybackActivity: void access$800(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$1100(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$900(com.android.music.MediaPlaybackActivity,int,long)> (1)
<com.android.music.MediaPlaybackActivity: void access$700(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$600(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.AlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.ArtistAlbumBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.MediaPlaybackActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.music.TrackBrowserActivity$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor getTrackCursor(com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (3)
<com.android.music.TrackBrowserActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.music.TrackBrowserActivity: void access$700(com.android.music.TrackBrowserActivity,int)> (1)
<com.android.music.IMediaPlaybackService: void setRepeatMode(int)> (2)
<com.android.music.MediaPlaybackActivity$10: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.TouchInterceptor$DropListener: void drop(int,int)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int)> (2)
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor)> (1)
<com.android.music.MusicUtils: void shuffleAll(android.content.Context,android.database.Cursor)> (3)
<com.android.music.PlaylistBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: void playPodcasts()> (2)
<com.android.music.PlaylistBrowserActivity: void playRecentlyAdded()> (2)
<com.android.music.QueryBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.QueryBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.PlaylistBrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.music.MediaPlaybackActivity$6: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$11: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MediaPlaybackActivity$9: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.MediaPlaybackActivity$5: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity$4: void onClick(android.view.View)> (1)
<com.android.music.TrackBrowserActivity: android.database.Cursor access$300(com.android.music.TrackBrowserActivity,com.android.music.TrackBrowserActivity$TrackListAdapter$TrackQueryHandler,java.lang.String,boolean)> (2)
<com.android.music.TrackBrowserActivity: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.TrackBrowserActivity$5: void remove(int)> (1)
<com.android.music.RepeatingImageButton$RepeatListener: void onRepeat(android.view.View,long,int)> (1)
<com.android.music.TouchInterceptor: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.music.PlaylistBrowserActivity: void access$100(com.android.music.PlaylistBrowserActivity)> (1)
<com.android.music.PlaylistBrowserActivity: void access$000(com.android.music.PlaylistBrowserActivity)> (1)
<com.android.music.TrackBrowserActivity$TrackListAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> (2)
<com.android.music.TouchInterceptor$RemoveListener: void remove(int)> (2)
<com.android.music.RepeatingImageButton: void doRepeat(boolean)> (3)
<com.android.music.TouchInterceptor$1: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.music.RepeatingImageButton: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.RepeatingImageButton: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.music.RepeatingImageButton: void access$000(com.android.music.RepeatingImageButton,boolean)> (1)
<com.android.music.RepeatingImageButton$1: void run()> (1)
<android.app.ContextImpl: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (1)
<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (38)
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (363)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pConnectionChangedBroadcast()> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pDiscoveryChangedBroadcast(boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pPersistentGroupsChangedBroadcast()> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendP2pStateChangedBroadcast(boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void sendThisDeviceChangedBroadcast()> (3)
<android.net.wifi.SupplicantStateTracker: void sendSupplicantStateChangedBroadcast(android.net.wifi.SupplicantState,boolean)> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void retrieveBatchedScanData()> (3)
<android.net.wifi.WifiStateMachine: void sendNetworkStateChangeBroadcast(java.lang.String)> (2)
<android.net.wifi.WifiStateMachine: void sendRssiChangeBroadcast(int)> (1)
<android.net.wifi.WifiStateMachine: void setWifiApState(int)> (1)
<android.net.wifi.WifiStateMachine: void setWifiState(int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void setHdmiPlugged(boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updateSpnDisplay()> (6)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updateSpnDisplay()> (5)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<com.android.server.DeviceStorageMonitorService: void sendFullNotification()> (1)
<com.android.server.DeviceStorageMonitorService: void sendNotification()> (1)
<com.android.server.DockObserver: void handleDockStateChange()> (1)
<com.android.server.NsdService: void sendNsdStateChangeBroadcast(boolean)> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.server.TelephonyRegistry: void broadcastDataConnectionStateChanged(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,boolean)> (1)
<com.android.server.TelephonyRegistry: void broadcastServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.server.TelephonyRegistry: void broadcastSignalStrengthChanged(android.telephony.SignalStrength)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateAudioSourceFunction()> (3)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateUsbState()> (3)
<android.accessibilityservice.AccessibilityService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.CantAddAccountActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.ChooseAccountActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.ChooseAccountTypeActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.ActivityGroup: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.AliasActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.Application: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.backup.BackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.backup.FullBackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.ExpandableListActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.IntentService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.LauncherActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<android.app.ListActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.NativeActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.Presentation$1: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.Service: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.TabActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<android.content.MutableContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.content.SyncActivityTooManyDeletes: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.hardware.location.GeofenceHardwareService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.location.SettingInjectorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.net.VpnService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.nfc.cardemulation.HostApduService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.nfc.cardemulation.OffHostApduService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.preference.PreferenceActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<android.printservice.PrintService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.dreams.DreamService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.notification.NotificationListenerService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.textservice.SpellCheckerService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.wallpaper.WallpaperService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<android.speech.RecognitionService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.speech.tts.TextToSpeechService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.support.v4.app.FragmentActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.test.IsolatedContext: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.test.mock.MockApplication: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.test.RenamingDelegatingContext: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.view.ContextThemeWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.widget.RemoteViewsService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.a2dp.A2dpService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.btservice.AdapterApp: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.btservice.AdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.bluetooth.btservice.ProfileService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.bluetooth.gatt.GattService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.hdp.HealthService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.hfp.HeadsetService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.hid.HidService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.map.BluetoothMapService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.opp.TestActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.pan.PanService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.BookmarkSearch: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.BrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.BrowserBackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.browser.Browser: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.browser.ComboViewActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.ShortcutActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.calculator2.Calculator: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.AbstractCalendarActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.alerts.AlertActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.alerts.AlertService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.alerts.InitAlarmsService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.AllInOneActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.CalendarApplication: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.CalendarBackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.CalendarSettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.calendar.event.EditEventActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.EventInfoActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.SearchActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.camera.app.CameraApp: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.camera.CameraActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.CameraBackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.crop.CropActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.MediaSaveService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.camera.ProxyLauncher: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.SecureCameraActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.certinstaller.CertInstallerMain: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.certinstaller.CertInstaller: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.alarms.AlarmActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.alarms.AlarmService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.deskclock.DeskClock: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.HandleApiCalls: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.ScreensaverActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.deskclock.Screensaver: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.deskclock.TimerRingService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.AccountsTester: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.AppHwConfigList: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.AppHwPref: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.CacheAbuser: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.ConfigurationViewer: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.Connectivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.DataList: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.Details: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.Development: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.development.InstrumentationList: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.LogViewer: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.MediaScannerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.PackageBrowser: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.PackageSummary: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.PermissionDetails: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.PointerLocation: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.ProcessInfo: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.RunningProcesses: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.ShowActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.SyncAdapterDriver: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.UnderdevelopedSettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.documentsui.DocumentsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.documentsui.DocumentsApplication: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.documentsui.SettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.documentsui.TestActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.dreams.basic.Colors: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.dreams.phototable.FlipperDream: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.dreams.phototable.PhotoTableDream: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email2.ui.MailActivityEmail: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.email.activity.ComposeActivityEmail: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.EventViewer: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.activity.setup.AccountSecurity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.activity.setup.AccountSettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupType: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.MailboxSettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.EmailApplication: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.EmailIntentService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.provider.FolderPickerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.service.AccountService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.AttachmentDownloadService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.AuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.EasTestAuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.ImapAuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.ImapService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.PolicyService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.Pop3AuthenticatorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.Pop3Service: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.Pop3SyncAdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.PopImapSyncAdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.emailsync.SyncManager: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.exchange.EasCertificateRequestor: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.exchange.ExchangeService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.Exchange: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.service.EasService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.SettingsRedirector: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.ex.photo.PhotoViewActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.galaxy4.Galaxy4: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.AlbumPicker: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.gallery3d.app.BatchService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.gallery3d.app.DialogPicker: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.gallery3d.app.GalleryActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.app.Gallery: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.MovieActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.app.PickerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.gallery3d.app.TrimVideo: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.Wallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.gadget.WidgetService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.ingest.IngestActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.ingest.IngestService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.gallery3d.settings.GallerySettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.BackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.LatinIME: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.research.FeedbackActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.research.ReplayerService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.research.UploaderService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.internal.app.AlertActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.ChooserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.internal.app.DisableCarModeActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.NetInitiatedActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.app.PlatLogoActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.ResolverActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.app.RestrictionsPinActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.backup.LocalTransportService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.internal.util.AsyncService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.keychain.KeyChainActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.magicsmoke.MagicSmoke: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.browse.EmlViewerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.compose.AutoSendActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.mail.compose.ComposeActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.compose.EmptyService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.mail.MailIntentService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.MailLogService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.mail.NotificationActionIntentService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.mail.ui.AbstractMailActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.ui.CreateShortcutActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.ui.FolderSelectionActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.ui.MailActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.mail.ui.ShortcutNameActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.widget.WidgetService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.AudioPreview: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.CreatePlaylist: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.DeleteItems: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.MediaPickerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.MediaPlaybackActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.MediaPlaybackService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.music.MusicBrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.MusicPicker: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.PlaylistBrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.QueryBrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.RenamePlaylist: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.ScanningProgress: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.TrackBrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.VideoBrowserActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.musicvis.RenderScriptWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.musicvis.vis1.Visualization1: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.musicvis.vis2.Visualization2: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.musicvis.vis3.Visualization3: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.musicvis.vis4.Visualization4: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.musicvis.vis5.Visualization5: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.WeekSelector: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.noisefield.NoiseField: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.packageinstaller.GrantActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.InstallAppProgress: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.UninstallerActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.pacprocessor.PacService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.phasebeam.PhaseBeam: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.photos.AlbumActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.photos.FullscreenViewer: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.photos.GalleryActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.printspooler.PrintJobConfigActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.printspooler.PrintSpoolerService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.printspooler.SelectPrinterActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.providers.downloads.ui.DownloadList: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.provision.DefaultActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.quicksearchbox.DialogActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.server.PackageManagerBackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.server.ShutdownActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.server.SystemBackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.smspush.WapPushManager: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.soundrecorder.SoundRecorder: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.tts.compat.CompatTtsService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.videoeditor.KenBurnsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.videoeditor.NoSearchActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.videoeditor.OverlayTitleEditor: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.ProjectsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.service.ApiService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.videoeditor.TransitionsActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.VideoEditorActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.fall.Fall: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.fall.FallWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.galaxy.Galaxy: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.grass.Grass: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.DownloadVoiceData: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.EngineSettings: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.svox.pico.GetSampleText: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.PicoService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.Pico: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (4)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void handleGroupCreationFailure()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void updatePersistentNetworks(boolean)> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,boolean)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean setAndPersistDeviceName(java.lang.String)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean setWfdInfo(android.net.wifi.p2p.WifiP2pWfdInfo)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void updateThisDevice(int)> (2)
<android.net.wifi.SupplicantStateTracker: void access$200(android.net.wifi.SupplicantStateTracker,android.net.wifi.SupplicantState,boolean)> (3)
<com.android.internal.util.State: void enter()> (36)
<com.android.internal.util.State: void exit()> (106)
<com.android.server.wifi.WifiService: void <init>(android.content.Context)> (1)
<android.net.wifi.WifiStateMachine: void startBatchedScan()> (2)
<android.net.wifi.WifiStateMachine: void startNextBatchedScan()> (2)
<android.net.wifi.WifiStateMachine: void stopBatchedScan()> (3)
<android.net.wifi.WifiStateMachine: void access$16100(android.net.wifi.WifiStateMachine,java.lang.String)> (5)
<android.net.wifi.WifiStateMachine: void handleNetworkDisconnect()> (1)
<android.net.wifi.WifiStateMachine: void fetchRssiAndLinkSpeedNative()> (1)
<android.net.wifi.WifiStateMachine: void access$4400(android.net.wifi.WifiStateMachine,int)> (5)
<android.net.wifi.WifiStateMachine: void access$3900(android.net.wifi.WifiStateMachine,int)> (7)
<android.net.wifi.WifiStateMachine: void handleSupplicantConnectionLoss()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void initializeHdmiState()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTime(long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTime()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTimeZone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updateSpnDisplay()> (3)
<com.android.internal.telephony.ServiceStateTracker: void updateSpnDisplay()> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTime()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.server.DockObserver: void access$000(com.android.server.DockObserver)> (2)
<com.android.server.NsdService: void access$700(com.android.server.NsdService,boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (2)
<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.usb.UsbDeviceManager: void systemReady()> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateState(java.lang.String)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$6700(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (4)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$1: void onDeleteGroup(int)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean reinvokePersistentGroup(android.net.wifi.p2p.WifiP2pConfig)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$8400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,boolean)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void initializeP2pSettings()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$3400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$3600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pWfdInfo)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$10300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,int)> (2)
<android.net.wifi.SupplicantStateTracker$CompletedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void exit()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void exit()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<android.net.wifi.WifiStateMachine: void access$11100(android.net.wifi.WifiStateMachine)> (2)
<android.net.wifi.WifiStateMachine: void handlePostDhcpSetup()> (2)
<android.net.wifi.WifiStateMachine: void access$2200(android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.WifiStateMachine: void handleBatchedScanPollRequest()> (1)
<android.net.wifi.WifiStateMachine: void access$12100(android.net.wifi.WifiStateMachine)> (2)
<android.net.wifi.WifiStateMachine: void handlePreDhcpSetup()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void enter()> (1)
<android.net.wifi.WifiStateMachine: void access$8000(android.net.wifi.WifiStateMachine)> (7)
<android.net.wifi.WifiStateMachine: void access$17900(android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.WifiStateMachine$InitialState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine: void access$7900(android.net.wifi.WifiStateMachine)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTime()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$000(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$100(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.DockObserver: void updateLocked()> (2)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$EnabledState: void enter()> (1)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifyServiceState(android.telephony.ServiceState)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifyServiceState(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void notifySignalStrength(android.telephony.SignalStrength)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void notifySignalStrength(android.telephony.SignalStrength)> (2)
<com.android.server.usb.UsbService: void systemReady()> (1)
<com.android.server.usb.UsbDeviceManager$1: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$FrequencyConflictState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$5300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pConfig)> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine: void stopDhcp()> (2)
<android.net.wifi.WifiStateMachine$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine: void access$2100(android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$L2ConnectedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WpsRunningState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$1: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker$3: void onChange(boolean)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.ITelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)> (1)
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$UserAuthorizingInviteRequestState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void enter()> (1)
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void doNotifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (1)
<com.android.server.usb.UsbService: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (7)
<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (3)
<com.android.internal.telephony.PhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (8)
<com.android.internal.telephony.PhoneBase: void notifySignalStrength()> (6)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: boolean trySetupData(com.android.internal.telephony.dataconnection.ApnContext)> (6)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyNoData(com.android.internal.telephony.dataconnection.DcFailCause,com.android.internal.telephony.dataconnection.ApnContext)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnectionFailed(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (8)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> (15)
<com.android.internal.telephony.PhoneBase: void notifyDataConnection(java.lang.String)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyServiceStateChangedP(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyServiceStateChangedP(android.telephony.ServiceState)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifySignalStrength()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifySignalStrength()> (1)
<com.android.internal.telephony.ServiceStateTracker: boolean notifySignalStrength()> (4)
<com.android.internal.telephony.sip.SipPhoneBase: void notifySignalStrength()> (1)
<com.android.internal.telephony.sip.SipPhone: void notifySignalStrength()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: boolean onTrySetupData(com.android.internal.telephony.dataconnection.ApnContext)> (3)
<com.android.internal.telephony.dataconnection.DcTracker: void applyNewState(com.android.internal.telephony.dataconnection.ApnContext,boolean,boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void setupDataOnConnectableApns(java.lang.String)> (8)
<com.android.internal.telephony.dataconnection.DcTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onPollPdp()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyApnIdDisconnected(java.lang.String,int)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyApnIdUpToCurrent(java.lang.String,int)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyOffApnsOfAvailability(java.lang.String)> (9)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String,com.android.internal.telephony.PhoneConstants$DataState)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcController$DccDefaultState: void onDataStateChanged(java.util.ArrayList)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyDataConnection(java.lang.String)> ()
<com.android.internal.telephony.dataconnection.DcTracker: boolean setupData(com.android.internal.telephony.dataconnection.ApnContext,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void cleanUpConnection(boolean,com.android.internal.telephony.dataconnection.ApnContext)> (7)
<com.android.internal.telephony.dataconnection.DcTracker: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyDataConnection(java.lang.String)> (9)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataSetupCompleteError(android.os.AsyncResult)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onDisconnectDcRetrying(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDataConnection(java.lang.String)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyDataConnection(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean notifySignalStrength()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean notifySignalStrength()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean notifySignalStrength()> (1)
<com.android.internal.telephony.ServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (5)
<com.android.internal.telephony.dataconnection.DcTracker: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: boolean onTrySetupData(java.lang.String)> (4)
<com.android.internal.telephony.dataconnection.DcTracker: void onApnChanged()> (3)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRoamingOff()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRoamingOn()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void notifyOffApnsOfAvailability(java.lang.String)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onEnableApn(int,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyApnIdDisconnected(java.lang.String,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void notifyApnIdUpToCurrent(java.lang.String,int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRadioAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcController$DccDefaultState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: boolean cleanUpAllConnections(boolean,java.lang.String)> (10)
<com.android.internal.telephony.dataconnection.DcTracker: void onCleanUpConnection(boolean,int,java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> ()
<com.android.internal.telephony.dataconnection.DcTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void gotoIdleAndNotifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataConnectionDetached()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataSetupCompleteError(android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDisconnectDcRetrying(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetDependencyMet(java.lang.String,boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: boolean onTrySetupData(java.lang.String)> (4)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRoamingOff()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRoamingOn()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onVoiceCallEnded()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetUserDataEnabled(boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRadioAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onRadioOffOrNotAvailable()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void dispose()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onCleanUpAllConnections(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void restartRadio()> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onCleanUpConnection(boolean,int,java.lang.String)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void gotoIdleAndNotifyDataConnection(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onVoiceCallStarted()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetInternalDataEnabled(boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onSetPolicyDataEnabled(boolean)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetUserDataEnabled(boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void dispose()> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onCleanUpAllConnections(java.lang.String)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void restartRadio()> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onResetDone(android.os.AsyncResult)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetInternalDataEnabled(boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onSetPolicyDataEnabled(boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onResetDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void dispose()> (2)
<com.android.internal.telephony.PhoneBase: void dispose()> (5)
<com.android.internal.telephony.dataconnection.DcTracker: void doRecovery()> (2)
<com.android.internal.telephony.Phone: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhone: void dispose()> (2)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<android.app.ContextImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (363)
<android.accessibilityservice.AccessibilityService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.CantAddAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.ChooseAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.ChooseAccountTypeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.ActivityGroup: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.AliasActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.Application: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.backup.BackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.backup.FullBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ExpandableListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.IntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.LauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<android.app.ListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.NativeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.Presentation$1: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.Service: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.TabActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<android.content.MutableContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.content.SyncActivityTooManyDeletes: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.hardware.location.GeofenceHardwareService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.location.SettingInjectorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.net.VpnService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.nfc.cardemulation.HostApduService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.nfc.cardemulation.OffHostApduService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.preference.PreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<android.printservice.PrintService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.dreams.DreamService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.notification.NotificationListenerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.textservice.SpellCheckerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.wallpaper.WallpaperService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<android.speech.RecognitionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.speech.tts.TextToSpeechService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.support.v4.app.FragmentActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.test.IsolatedContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.mock.MockApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.RenamingDelegatingContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.view.ContextThemeWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.widget.RemoteViewsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.a2dp.A2dpService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.btservice.AdapterApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.btservice.AdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.btservice.ProfileService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.gatt.GattService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.hdp.HealthService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.hfp.HeadsetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.hid.HidService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.map.BluetoothMapService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.opp.TestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.pan.PanService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.BookmarkSearch: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.BrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.BrowserBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.browser.Browser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.ComboViewActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.ShortcutActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.calculator2.Calculator: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.AbstractCalendarActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.alerts.AlertActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.alerts.AlertService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.alerts.InitAlarmsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.CalendarSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.calendar.event.EditEventActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.EventInfoActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.SearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.app.CameraApp: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.CameraActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.CameraBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.crop.CropActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.MediaSaveService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.camera.ProxyLauncher: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.SecureCameraActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.certinstaller.CertInstallerMain: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.certinstaller.CertInstaller: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.alarms.AlarmActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.alarms.AlarmService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.DeskClock: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.HandleApiCalls: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.ScreensaverActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.deskclock.Screensaver: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.TimerRingService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.AccountsTester: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.AppHwConfigList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.AppHwPref: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.CacheAbuser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.ConfigurationViewer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.Connectivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.DataList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.Details: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.Development: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.development.InstrumentationList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.LogViewer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.MediaScannerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.PackageBrowser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.PackageSummary: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.PermissionDetails: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.PointerLocation: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.ProcessInfo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.RunningProcesses: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.ShowActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.SyncAdapterDriver: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.UnderdevelopedSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.documentsui.DocumentsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.documentsui.DocumentsApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.documentsui.SettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.documentsui.TestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.dreams.basic.Colors: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.dreams.phototable.FlipperDream: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.dreams.phototable.PhotoTableDream: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email2.ui.MailActivityEmail: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.email.activity.ComposeActivityEmail: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.EventViewer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSecurity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupType: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.MailboxSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.EmailApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.EmailIntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.provider.FolderPickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.service.AccountService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.AttachmentDownloadService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.AuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.EasTestAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.ImapAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.ImapService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.PolicyService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.Pop3AuthenticatorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.Pop3Service: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.Pop3SyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.PopImapSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.emailsync.SyncManager: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.EasCertificateRequestor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.exchange.ExchangeService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.Exchange: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.service.EasService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.SettingsRedirector: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.ex.photo.PhotoViewActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.galaxy4.Galaxy4: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.gallery3d.app.BatchService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.gallery3d.app.DialogPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.gallery3d.app.GalleryActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.app.Gallery: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.MovieActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.app.PickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.gallery3d.app.TrimVideo: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.Wallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.gadget.WidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.ingest.IngestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.ingest.IngestService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.gallery3d.settings.GallerySettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.BackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.LatinIME: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.research.FeedbackActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.research.ReplayerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.research.UploaderService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.AlertActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.ChooserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.internal.app.DisableCarModeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.NetInitiatedActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.app.PlatLogoActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.ResolverActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.app.RestrictionsPinActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.backup.LocalTransportService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.internal.util.AsyncService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.keychain.KeyChainActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.magicsmoke.MagicSmoke: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.browse.EmlViewerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.compose.AutoSendActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.mail.compose.ComposeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.compose.EmptyService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mail.MailIntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.MailLogService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mail.NotificationActionIntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.mail.ui.AbstractMailActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.ui.CreateShortcutActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.ui.FolderSelectionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.ui.MailActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.mail.ui.ShortcutNameActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.widget.WidgetService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.AudioPreview: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.CreatePlaylist: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.DeleteItems: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.MediaPickerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.MediaPlaybackActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.MediaPlaybackService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.music.MusicBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.MusicPicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.PlaylistBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.QueryBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.RenamePlaylist: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.ScanningProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.TrackBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.VideoBrowserActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.musicvis.RenderScriptWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis1.Visualization1: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis2.Visualization2: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.musicvis.vis3.Visualization3: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.musicvis.vis4.Visualization4: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.musicvis.vis5.Visualization5: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.WeekSelector: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.noisefield.NoiseField: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.GrantActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.InstallAppProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.UninstallerActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.pacprocessor.PacService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phasebeam.PhaseBeam: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.photos.AlbumActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.photos.FullscreenViewer: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.photos.GalleryActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.printspooler.PrintJobConfigActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.printspooler.PrintSpoolerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.printspooler.SelectPrinterActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.downloads.ui.DownloadList: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.provision.DefaultActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.quicksearchbox.DialogActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.server.PackageManagerBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.ShutdownActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.server.SystemBackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.smspush.WapPushManager: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.soundrecorder.SoundRecorder: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.tts.compat.CompatTtsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.KenBurnsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.videoeditor.NoSearchActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.videoeditor.OverlayTitleEditor: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.ProjectsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.service.ApiService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.videoeditor.TransitionsActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.VideoEditorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.fall.Fall: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.fall.FallWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.galaxy.Galaxy: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.grass.Grass: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.DownloadVoiceData: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.EngineSettings: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.svox.pico.GetSampleText: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.PicoService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.Pico: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.ContextImpl: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (1)
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (363)
<android.accessibilityservice.AccessibilityService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.accounts.AccountAuthenticatorActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.CantAddAccountActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.ChooseAccountActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.ChooseAccountTypeActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.ActivityGroup: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.AliasActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.Application: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.backup.BackupAgentHelper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.backup.BackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.backup.FullBackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ExpandableListActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.IntentService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.LauncherActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<android.app.ListActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.NativeActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.app.Presentation$1: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ReceiverRestrictedContext: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.Service: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.app.TabActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<android.content.MutableContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.content.SyncActivityTooManyDeletes: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.hardware.location.GeofenceHardwareService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.inputmethodservice.AbstractInputMethodService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.inputmethodservice.InputMethodService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.location.SettingInjectorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.net.VpnService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.nfc.cardemulation.HostApduService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.nfc.cardemulation.OffHostApduService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.preference.PreferenceActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<android.printservice.PrintService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.dreams.DreamService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.notification.NotificationListenerService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.textservice.SpellCheckerService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.wallpaper.WallpaperService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<android.speech.RecognitionService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.speech.tts.TextToSpeechService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.support.v4.app.FragmentActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.test.ActivityUnitTestCase$MockParent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<android.test.IsolatedContext: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.test.mock.MockApplication: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<android.test.RenamingDelegatingContext: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.view.ContextThemeWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<android.widget.RemoteViewsService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.a2dp.A2dpService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.btservice.AdapterApp: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.btservice.AdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.btservice.ProfileService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.gatt.GattService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.hdp.HealthService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.hfp.HeadsetService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.hid.HidService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.map.BluetoothMapService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.opp.TestActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.bluetooth.pan.PanService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.browser.AddBookmarkPage: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.BookmarkSearch: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.BrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.BrowserBackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.BrowserPreferencesPage: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.browser.Browser: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.ComboViewActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.ShortcutActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.calculator2.Calculator: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.AbstractCalendarActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.alerts.AlertActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.alerts.AlertService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.alerts.InitAlarmsService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarApplication: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.calendar.CalendarBackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.CalendarSettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.calendar.event.EditEventActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.EventInfoActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.SearchActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.app.CameraApp: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.camera.CameraActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.CameraBackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.crop.CropActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.MediaSaveService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.camera.ProxyLauncher: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.camera.SecureCameraActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.certinstaller.CertInstallerMain: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.certinstaller.CertInstaller: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.alarms.AlarmActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.alarms.AlarmService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.DeskClock: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.HandleApiCalls: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.ScreensaverActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.deskclock.Screensaver: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.deskclock.SettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.TimerRingService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.AccountsTester: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.AppHwConfigList: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.AppHwPref: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.BadBehaviorActivity$BadService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.development.BadBehaviorActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.CacheAbuser: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.ConfigurationViewer: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.Connectivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.DataList: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.Details: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.Development: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.development.InstrumentationList: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.LogViewer: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.MediaScannerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.PackageBrowser: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.PackageSummary: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.PermissionDetails: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.PointerLocation: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.ProcessInfo: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.RunningProcesses: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.development.ShowActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.SyncAdapterDriver: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.development.UnderdevelopedSettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.documentsui.DocumentsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.documentsui.DocumentsApplication: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.documentsui.SettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.documentsui.TestActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.dreams.basic.Colors: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.dreams.phototable.FlipperDream: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.dreams.phototable.PhotoTableDream: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email2.ui.MailActivityEmail: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.email.activity.ComposeActivityEmail: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.EventViewer: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSecurity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupNames: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.AccountSetupType: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.email.activity.setup.MailboxSettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.EmailApplication: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.EmailIntentService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.provider.FolderPickerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.email.service.AccountService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.AttachmentDownloadService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.AuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.EasAuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.EasTestAuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.ImapAuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.ImapService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.PolicyService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.Pop3AuthenticatorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.Pop3Service: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.email.service.Pop3SyncAdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.email.service.PopImapSyncAdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.emailsync.SyncManager: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.EasCertificateRequestor: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.exchange.ExchangeService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.Exchange: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.service.EasService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.exchange.SettingsRedirector: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.ex.photo.PhotoViewActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.galaxy4.Galaxy4: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumPicker: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.gallery3d.app.BatchService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.gallery3d.app.DialogPicker: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.gallery3d.app.GalleryActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.app.Gallery: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.MovieActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.app.PickerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.gallery3d.app.TrimVideo: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.app.Wallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.gadget.WidgetService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.ingest.IngestActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.gallery3d.ingest.IngestService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.gallery3d.settings.GallerySettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.BackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.LatinIME: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.inputmethod.research.FeedbackActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.inputmethod.research.ReplayerService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.inputmethod.research.UploaderService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.internal.app.AlertActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.ChooserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.internal.app.DisableCarModeActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.NetInitiatedActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.app.PlatLogoActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.internal.app.ResolverActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.app.RestrictionsPinActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.internal.backup.LocalTransportService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.internal.util.AsyncService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.keychain.KeyChainActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.magicsmoke.MagicSmoke: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.browse.EmlViewerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.compose.AutoSendActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.mail.compose.ComposeActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.compose.EmptyService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mail.MailIntentService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.MailLogService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.mail.NotificationActionIntentService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.android.mail.ui.AbstractMailActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.ui.CreateShortcutActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.ui.FolderSelectionActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.ui.MailActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.mail.ui.ShortcutNameActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.mail.widget.WidgetService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.music.AlbumBrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.AudioPreview: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.CreatePlaylist: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.DeleteItems: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.MediaPickerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.MediaPlaybackActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.MediaPlaybackService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.music.MusicBrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.MusicPicker: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.PlaylistBrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.QueryBrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.RenamePlaylist: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.ScanningProgress: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.TrackBrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.music.VideoBrowserActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.musicvis.RenderScriptWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis1.Visualization1: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.musicvis.vis2.Visualization2: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.musicvis.vis3.Visualization3: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.musicvis.vis4.Visualization4: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.musicvis.vis5.Visualization5: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.music.WeekSelector: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.noisefield.NoiseField: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.packageinstaller.GrantActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.InstallAppProgress: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.UninstallAppProgress: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.packageinstaller.UninstallerActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.pacprocessor.PacService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.phasebeam.PhaseBeam: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.photos.AlbumActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.photos.FullscreenViewer: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.photos.GalleryActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.printspooler.PrintJobConfigActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.printspooler.PrintSpoolerService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.printspooler.SelectPrinterActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.downloads.ui.DownloadList: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.provision.DefaultActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.quicksearchbox.DialogActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.quicksearchbox.SearchActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.server.PackageManagerBackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.server.ShutdownActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.server.SystemBackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.smspush.WapPushManager: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.soundrecorder.SoundRecorder: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.tts.compat.CompatTtsService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.videoeditor.KenBurnsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.videoeditor.NoSearchActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.videoeditor.OverlayTitleEditor: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.ProjectsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.service.ApiService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (2)
<com.android.videoeditor.TransitionsActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.VideoEditorActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.fall.Fall: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.fall.FallWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.galaxy.Galaxy: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.grass.Grass: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (3)
<com.svox.pico.CheckVoiceData: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.DownloadVoiceData: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.EngineSettings: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (6)
<com.svox.pico.GetSampleText: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.PicoService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.svox.pico.Pico: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> (1)
<android.app.ActivityManagerNative: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void removeStickyBroadcast(android.content.Intent)> (1)
<android.app.ContextImpl: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (1)
<android.content.Context: void removeStickyBroadcast(android.content.Intent)> (1)
<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> (363)
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (363)
<com.android.server.DeviceStorageMonitorService: void cancelFullNotification()> (1)
<com.android.server.DeviceStorageMonitorService: void cancelNotification()> (1)
<android.accessibilityservice.AccessibilityService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.accounts.CantAddAccountActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.accounts.ChooseAccountActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.accounts.ChooseAccountTypeActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.app.ActivityGroup: void removeStickyBroadcast(android.content.Intent)> (4)
<android.app.Activity: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.AliasActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.app.Application: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.BackupAgentHelper: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.backup.BackupAgent: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.backup.FullBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ExpandableListActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.app.IntentService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.LauncherActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<android.app.ListActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.app.NativeActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.app.Presentation$1: void removeStickyBroadcast(android.content.Intent)> (3)
<android.app.ReceiverRestrictedContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.Service: void removeStickyBroadcast(android.content.Intent)> (2)
<android.app.TabActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<android.content.MutableContextWrapper: void removeStickyBroadcast(android.content.Intent)> (2)
<android.content.SyncActivityTooManyDeletes: void removeStickyBroadcast(android.content.Intent)> (4)
<android.hardware.location.GeofenceHardwareService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.AbstractInputMethodService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.inputmethodservice.InputMethodService: void removeStickyBroadcast(android.content.Intent)> (3)
<android.location.SettingInjectorService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.net.VpnService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.nfc.cardemulation.HostApduService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.nfc.cardemulation.OffHostApduService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.preference.PreferenceActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<android.printservice.PrintService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.dreams.DreamService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.notification.NotificationListenerService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.textservice.SpellCheckerService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<android.speech.RecognitionService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.speech.tts.TextToSpeechService: void removeStickyBroadcast(android.content.Intent)> (2)
<android.support.v4.app.FragmentActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<android.test.ActivityUnitTestCase$MockParent: void removeStickyBroadcast(android.content.Intent)> (4)
<android.test.IsolatedContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.test.mock.MockApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<android.test.RenamingDelegatingContext: void removeStickyBroadcast(android.content.Intent)> (2)
<android.view.ContextThemeWrapper: void removeStickyBroadcast(android.content.Intent)> (2)
<android.widget.RemoteViewsService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.a2dp.A2dpService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.btservice.AdapterApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.btservice.AdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.btservice.ProfileService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.gatt.GattService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.hdp.HealthService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.hfp.HeadsetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.hid.HidService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.map.BluetoothMapService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.opp.TestActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.bluetooth.pan.PanService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.browser.AddBookmarkPage: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.BookmarkSearch: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.BrowserActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.BrowserBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.BrowserPreferencesPage: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.browser.Browser: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.ComboViewActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.ShortcutActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.calculator2.Calculator: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.AbstractCalendarActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.alerts.AlertActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.alerts.AlertService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.InitAlarmsService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.AllInOneActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.calendar.CalendarBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.CalendarSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.calendar.event.EditEventActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.EventInfoActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.SearchActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.app.CameraApp: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.camera.CameraActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.CameraBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.crop.CropActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.MediaSaveService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.camera.ProxyLauncher: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.camera.SecureCameraActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.certinstaller.CertInstallerMain: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.certinstaller.CertInstaller: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.alarms.AlarmActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.alarms.AlarmService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.DeskClock: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.HandleApiCalls: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.ScreensaverActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.deskclock.Screensaver: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.deskclock.SettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.TimerRingService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.AccountsTester: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.AppHwConfigList: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.development.AppHwPref: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.BadBehaviorActivity$BadService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.development.BadBehaviorActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.CacheAbuser: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.ConfigurationViewer: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.Connectivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.DataList: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.development.Details: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.Development: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.development.InstrumentationList: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.development.LogViewer: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.MediaScannerActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.PackageBrowser: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.development.PackageSummary: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.PermissionDetails: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.PointerLocation: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.ProcessInfo: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.RunningProcesses: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.development.ShowActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.SyncAdapterDriver: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.development.UnderdevelopedSettings: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.documentsui.DocumentsActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.documentsui.DocumentsApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.documentsui.SettingsActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.documentsui.TestActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.dreams.basic.Colors: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.dreams.phototable.FlipperDream: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.dreams.phototable.PhotoTableDream: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email2.ui.MailActivityEmail: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.email.activity.ComposeActivityEmail: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.EventViewer: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSecurity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSettings: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupNames: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.AccountSetupType: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.email.activity.setup.MailboxSettings: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.EmailApplication: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.EmailIntentService: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.provider.FolderPickerActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.email.service.AccountService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.AttachmentDownloadService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.AuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.EasTestAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.ImapAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.ImapService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.PolicyService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.Pop3AuthenticatorService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.Pop3Service: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.email.service.Pop3SyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.email.service.PopImapSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.emailsync.SyncManager: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.EasCertificateRequestor: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.exchange.ExchangeService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.Exchange: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.service.EasService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.exchange.SettingsRedirector: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.ex.photo.PhotoViewActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.galaxy4.Galaxy4: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.AlbumPicker: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.gallery3d.app.BatchService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.gallery3d.app.DialogPicker: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.gallery3d.app.GalleryActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.app.Gallery: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.MovieActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.app.PickerActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.gallery3d.app.TrimVideo: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.app.Wallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.gadget.WidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.ingest.IngestActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.gallery3d.ingest.IngestService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.gallery3d.settings.GallerySettings: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.BackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.LatinIME: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.inputmethod.research.FeedbackActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.inputmethod.research.ReplayerService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.inputmethod.research.UploaderService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.internal.app.AlertActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.ChooserActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.internal.app.DisableCarModeActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.NetInitiatedActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.app.PlatLogoActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.internal.app.ResolverActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.app.RestrictionsPinActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.internal.backup.LocalTransportService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.internal.util.AsyncService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.keychain.KeyChainActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.MagicSmoke: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.browse.EmlViewerActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.compose.AutoSendActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.mail.compose.ComposeActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.compose.EmptyService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.mail.MailIntentService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.MailLogService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.mail.NotificationActionIntentService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void removeStickyBroadcast(android.content.Intent)> (6)
<com.android.mail.ui.AbstractMailActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.ui.CreateShortcutActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.ui.FolderSelectionActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.ui.MailActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.mail.ui.ShortcutNameActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.mail.widget.WidgetService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.music.AlbumBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.music.AudioPreview: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.CreatePlaylist: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.DeleteItems: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.MediaPickerActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.music.MediaPlaybackActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.MediaPlaybackService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.music.MusicBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.MusicPicker: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.music.PlaylistBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.music.QueryBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.music.RenamePlaylist: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.ScanningProgress: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.TrackBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.music.VideoBrowserActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.musicvis.RenderScriptWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis1.Visualization1: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.musicvis.vis2.Visualization2: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.musicvis.vis3.Visualization3: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.musicvis.vis4.Visualization4: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.musicvis.vis5.Visualization5: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.music.WeekSelector: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.noisefield.NoiseField: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.packageinstaller.GrantActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.InstallAppProgress: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.UninstallAppProgress: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.packageinstaller.UninstallerActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.pacprocessor.PacService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.phasebeam.PhaseBeam: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.photos.AlbumActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.photos.FullscreenViewer: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.photos.GalleryActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.printspooler.PrintJobConfigActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.printspooler.PrintSpoolerService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.printspooler.SelectPrinterActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.downloads.ui.DownloadList: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.provision.DefaultActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.quicksearchbox.DialogActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.quicksearchbox.SearchActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.server.PackageManagerBackupAgent: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.server.ShutdownActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.server.SystemBackupAgent: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.smspush.WapPushManager: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.soundrecorder.SoundRecorder: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.tts.compat.CompatTtsService: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.videoeditor.KenBurnsActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.videoeditor.NoSearchActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.videoeditor.OverlayTitleEditor: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.ProjectsActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.service.ApiService: void removeStickyBroadcast(android.content.Intent)> (2)
<com.android.videoeditor.TransitionsActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.VideoEditorActivity: void removeStickyBroadcast(android.content.Intent)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.fall.Fall: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.fall.FallWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.galaxy.Galaxy: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.grass.Grass: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void removeStickyBroadcast(android.content.Intent)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void removeStickyBroadcast(android.content.Intent)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void removeStickyBroadcast(android.content.Intent)> (3)
<com.svox.pico.CheckVoiceData: void removeStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.DownloadVoiceData: void removeStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.EngineSettings: void removeStickyBroadcast(android.content.Intent)> (6)
<com.svox.pico.GetSampleText: void removeStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.PicoService: void removeStickyBroadcast(android.content.Intent)> (4)
<com.svox.pico.Pico: void removeStickyBroadcast(android.content.Intent)> (4)
<android.accessibilityservice.AccessibilityService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.CantAddAccountActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.ChooseAccountActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.ChooseAccountTypeActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.ActivityGroup: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.Activity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.AliasActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.Application: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.backup.BackupAgentHelper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.backup.BackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.backup.FullBackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.ExpandableListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.IntentService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.LauncherActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<android.app.ListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.NativeActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.app.Presentation$1: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.app.ReceiverRestrictedContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.Service: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.app.TabActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<android.content.MutableContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.content.SyncActivityTooManyDeletes: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.hardware.location.GeofenceHardwareService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.inputmethodservice.AbstractInputMethodService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.inputmethodservice.InputMethodService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.location.SettingInjectorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.net.VpnService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.nfc.cardemulation.HostApduService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.nfc.cardemulation.OffHostApduService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.preference.PreferenceActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<android.printservice.PrintService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.dreams.DreamService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.notification.NotificationListenerService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.textservice.SpellCheckerService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.wallpaper.WallpaperService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<android.speech.RecognitionService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.speech.tts.TextToSpeechService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.support.v4.app.FragmentActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.test.ActivityUnitTestCase$MockParent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<android.test.IsolatedContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.test.mock.MockApplication: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<android.test.RenamingDelegatingContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.view.ContextThemeWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<android.widget.RemoteViewsService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.a2dp.A2dpService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.btservice.AdapterApp: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.btservice.AdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.bluetooth.btservice.ProfileService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.bluetooth.gatt.GattService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.hdp.HealthService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.hfp.HeadsetService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.hid.HidService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.map.BluetoothMapService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.opp.TestActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.bluetooth.pan.PanService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.browser.AddBookmarkPage: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.BookmarkSearch: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.BrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.BrowserBackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.browser.BrowserPreferencesPage: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.browser.Browser: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.browser.ComboViewActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.ShortcutActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.calculator2.Calculator: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.AbstractCalendarActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.alerts.AlertActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.alerts.AlertService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.alerts.InitAlarmsService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.AllInOneActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.CalendarApplication: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.calendar.CalendarBackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.CalendarSettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.calendar.event.EditEventActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.EventInfoActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.SearchActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.camera.app.CameraApp: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.camera.CameraActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.CameraBackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.crop.CropActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.MediaSaveService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.camera.ProxyLauncher: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.camera.SecureCameraActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.certinstaller.CertInstallerMain: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.certinstaller.CertInstaller: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.alarms.AlarmActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.alarms.AlarmService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.deskclock.DeskClock: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.HandleApiCalls: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.ScreensaverActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.deskclock.Screensaver: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.deskclock.SettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.deskclock.TimerRingService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.AccountsTester: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.AppHwConfigList: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.AppHwPref: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.BadBehaviorActivity$BadService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.development.BadBehaviorActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.CacheAbuser: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.ConfigurationViewer: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.Connectivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.DataList: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.Details: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.Development: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.development.InstrumentationList: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.LogViewer: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.MediaScannerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.PackageBrowser: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.PackageSummary: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.PermissionDetails: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.PointerLocation: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.ProcessInfo: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.RunningProcesses: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.development.ShowActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.SyncAdapterDriver: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.development.UnderdevelopedSettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.documentsui.DocumentsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.documentsui.DocumentsApplication: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.documentsui.SettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.documentsui.TestActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.dreams.basic.Colors: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.dreams.phototable.FlipperDream: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.dreams.phototable.PhotoTableDream: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email2.ui.MailActivityEmail: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.email.activity.ComposeActivityEmail: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.EventViewer: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.activity.setup.AccountSecurity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.activity.setup.AccountSettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupNames: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.AccountSetupType: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.email.activity.setup.MailboxSettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.EmailApplication: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.EmailIntentService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.provider.FolderPickerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.email.service.AccountService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.AttachmentDownloadService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.AuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.EasAuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.EasTestAuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.ImapAuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.ImapService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.PolicyService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.Pop3AuthenticatorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.Pop3Service: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.email.service.Pop3SyncAdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.email.service.PopImapSyncAdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.emailsync.SyncManager: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.exchange.EasCertificateRequestor: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.exchange.ExchangeService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.Exchange: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.service.EasService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.exchange.SettingsRedirector: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.ex.photo.PhotoViewActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.galaxy4.Galaxy4: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.AlbumPicker: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.gallery3d.app.BatchService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.gallery3d.app.DialogPicker: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.gallery3d.app.GalleryActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.app.Gallery: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.MovieActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.app.PickerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.gallery3d.app.TrimVideo: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.app.Wallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.gadget.WidgetService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.ingest.IngestActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.gallery3d.ingest.IngestService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.gallery3d.settings.GallerySettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.BackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.LatinIME: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.inputmethod.research.FeedbackActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.inputmethod.research.ReplayerService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.inputmethod.research.UploaderService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.internal.app.AlertActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.ChooserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.internal.app.DisableCarModeActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.NetInitiatedActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.app.PlatLogoActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.internal.app.ResolverActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.app.RestrictionsPinActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.internal.backup.LocalTransportService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.internal.util.AsyncService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.keychain.KeyChainActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.magicsmoke.MagicSmoke: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.browse.EmlViewerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.compose.AutoSendActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.mail.compose.ComposeActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.compose.EmptyService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.mail.MailIntentService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.MailLogService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.mail.NotificationActionIntentService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.android.mail.ui.AbstractMailActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.ui.CreateShortcutActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.ui.FolderSelectionActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.ui.MailActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.mail.ui.ShortcutNameActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.mail.widget.WidgetService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.music.AlbumBrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.AudioPreview: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.CreatePlaylist: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.DeleteItems: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.MediaPickerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.MediaPlaybackActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.MediaPlaybackService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.music.MusicBrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.MusicPicker: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.PlaylistBrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.QueryBrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.RenamePlaylist: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.ScanningProgress: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.TrackBrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.music.VideoBrowserActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.musicvis.RenderScriptWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.musicvis.vis1.Visualization1: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.musicvis.vis2.Visualization2: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.musicvis.vis3.Visualization3: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.musicvis.vis4.Visualization4: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.musicvis.vis5.Visualization5: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.music.WeekSelector: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.noisefield.NoiseField: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.packageinstaller.GrantActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.InstallAppProgress: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.UninstallAppProgress: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.packageinstaller.UninstallerActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.pacprocessor.PacService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.phasebeam.PhaseBeam: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.photos.AlbumActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.photos.FullscreenViewer: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.photos.GalleryActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.printspooler.PrintJobConfigActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.printspooler.PrintSpoolerService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.printspooler.SelectPrinterActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.providers.downloads.ui.DownloadList: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.provision.DefaultActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.quicksearchbox.DialogActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.quicksearchbox.SearchActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.server.PackageManagerBackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.server.ShutdownActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.server.SystemBackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.smspush.WapPushManager: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.soundrecorder.SoundRecorder: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.tts.compat.CompatTtsService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.videoeditor.KenBurnsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.videoeditor.NoSearchActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.videoeditor.OverlayTitleEditor: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.ProjectsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.service.ApiService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (2)
<com.android.videoeditor.TransitionsActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.VideoEditorActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.fall.Fall: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.fall.FallWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.galaxy.Galaxy: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.grass.Grass: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (3)
<com.svox.pico.CheckVoiceData: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.DownloadVoiceData: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.EngineSettings: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (6)
<com.svox.pico.GetSampleText: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.PicoService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
<com.svox.pico.Pico: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> (4)
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
303 Callers:
<com.android.browser.homepages.RequestHandler: void writeTemplatedIndex()> (1)
<com.android.browser.homepages.RequestHandler: void doHandleRequest()> (1)
<com.android.browser.homepages.RequestHandler: void run()> (3)
<com.android.browser.homepages.HomeProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> (1)
<com.android.browser.homepages.HomeProvider: android.webkit.WebResourceResponse shouldInterceptRequest(android.content.Context,java.lang.String)> (1)
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.preferences.WebsiteSettingsFragment$SiteAdapter$UpdateFromBookmarksDbTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.BrowserContract$Settings: boolean isSyncEnabled(android.content.Context)> ()
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> (2)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.Bookmarks: android.database.Cursor queryCombinedForUrl(android.content.ContentResolver,java.lang.String,java.lang.String)> (2)
<com.android.browser.Controller$10: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.Controller$10: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (2)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.view.BookmarkExpandableView: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (1)
<com.android.browser.BreadCrumbView: void popView()> (1)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void setupTopCrumb()> (2)
<com.android.browser.AddBookmarkPage: void onRootFolderFound(long)> (2)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.AddBookmarkPage: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.AddBookmarkPage: void setAccount(java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.browser.provider.BrowserProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> ()
<com.android.browser.provider.SnapshotProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.browser.provider.BrowserProvider2: java.lang.String[] getAccountNameAndType(long)> (2)
<com.android.browser.provider.BrowserProvider2: boolean isValidParent(java.lang.String,java.lang.String,long)> (1)
<com.android.browser.provider.BrowserProvider2: boolean setParentValues(long,android.content.ContentValues)> (1)
<com.android.browser.provider.BrowserProvider2: android.net.Uri insertInTransaction(android.net.Uri,android.content.ContentValues,boolean)> (2)
<com.android.browser.provider.BrowserProvider2: int updateBookmarksInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (3)
<com.android.browser.provider.BrowserProvider2: int deleteBookmarks(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.provider.BrowserProvider2: int deleteInTransaction(android.net.Uri,java.lang.String,java.lang.String[],boolean)> (2)
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader: com.android.browser.AddBookmarkPage$EditBookmarkInfo loadInBackground()> (1)
<com.android.browser.AddBookmarkPage$EditBookmarkInfoLoader: java.lang.Object loadInBackground()> (1)
<com.android.browser.SuggestionsAdapter$CombinedCursor: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$CursorSource: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SuggestFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> ()
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> (1)
<com.android.browser.Controller$5: java.lang.String[] doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$5: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.provider.BrowserProvider2: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (3)
<com.android.browser.provider.BrowserProvider2: int updateHistoryInTransaction(android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run()> (2)
<com.android.browser.BrowserSettings: void clearHistory()> (1)
<com.android.browser.BrowserHistoryPage$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.DataController$DataControllerHandler: void doLoadThumbnail(com.android.browser.Tab)> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage: boolean handleContextItem(int,int,int)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$2: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<com.android.browser.widget.BookmarkThumbnailWidgetService$BookmarkFactory: void loadBookmarks()> (1)
<com.android.browser.provider.BrowserProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void handleMessage(com.android.browser.DataController$DCMessage)> (1)
<com.android.browser.DataController$DataControllerHandler: void run()> (2)
<com.android.browser.DataController: void <init>(android.content.Context)> (1)
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> (6)
<com.android.browser.Controller: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.Controller: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Tab: void deleteThumbnail()> (3)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (3)
<com.android.browser.Tab: void persistThumbnail()> (1)
<com.android.browser.Tab: void restoreState(android.os.Bundle)> (1)
<com.android.browser.WebViewController: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.WebViewController: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.TabControl: void saveState(android.os.Bundle)> (1)
<com.android.browser.Tab: void removeFromTree()> (2)
<com.android.browser.Tab: void updateShouldCaptureThumbnails()> (3)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (1)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (1)
<com.android.browser.Tab: void capture()> (5)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (1)
<com.android.browser.Tab$3: void onReceivedTitle(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: android.os.Bundle createSaveState()> (2)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void removeParentChildRelationShips()> (1)
<com.android.browser.Tab: void setController(com.android.browser.WebViewController)> (1)
<com.android.browser.XLargeUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init>(com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.PhoneUi: void showNavScreen()> (2)
<com.android.browser.PieControl: void buildTabs()> (1)
<com.android.browser.Tab: void putInBackground()> (4)
<com.android.browser.Tab: void postCapture()> (2)
<com.android.browser.Controller: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.CrashRecoveryHandler$2: void run()> (1)
<com.android.browser.Controller: void closeCurrentTab(boolean)> (2)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (3)
<com.android.browser.Controller: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.TabControl: void addPreloadedTab(com.android.browser.Tab)> (1)
<com.android.browser.BaseUi: void setUseQuickControls(boolean)> (3)
<com.android.browser.XLargeUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab(boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> ()
<com.android.browser.Controller: void onPreloginFinished(android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.PhoneUi: void toggleNavScreen()> (1)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.PieControl: void access$000(com.android.browser.PieControl)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.Tab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (1)
<com.android.browser.ActivityController: void onSaveInstanceState(android.os.Bundle)> (2)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void closeOtherTabs()> (2)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.PhoneUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.UI: void setUseQuickControls(boolean)> (1)
<com.android.browser.BaseUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: void cancelSearchBoxPreload(java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest(java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.NavigationBarPhone: void onClick(android.view.View)> (1)
<com.android.browser.PieControl$1: void onLayout(int,int,boolean)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (3)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab()> (2)
<com.android.browser.UiController: void closeCurrentTab()> (3)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeOtherTabs()> ()
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (1)
<com.android.browser.ActivityController: void onDestroy()> (1)
<com.android.browser.PhoneUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run()> (1)
<com.android.browser.PreloadRequestReceiver: void handlePreload(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onClick(android.view.View)> (3)
<com.android.browser.view.PieMenu$PieView$OnLayoutListener: void onLayout(int,int,boolean)> (1)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (7)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.NavScreen: void onCloseTab(com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarTablet: void onClick(android.view.View)> (1)
<com.android.browser.view.BasePieView: void layout(int,int,boolean,float,int)> (3)
<com.android.browser.Controller: boolean switchToTab(com.android.browser.Tab)> (8)
<com.android.browser.UiController: void setActiveTab(com.android.browser.Tab)> (2)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (1)
<com.android.browser.NavScreen: void access$000(com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.ActivityController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.NavScreen: void openNewTab()> (1)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.view.PieListView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieMenu$PieView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieStackView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.UiController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab(com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen(int,boolean)> (5)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition(int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.NavScreen: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1700(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.view.PieMenu: void layoutPieView(com.android.browser.view.PieMenu$PieView,int,int,float)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100(com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition(int)> (1)
<com.android.browser.NavigationBarPhone: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavScreen$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb(boolean)> (3)
<com.android.browser.NavTabScroller$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.NavTabScroller: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb(boolean)> (2)
<com.android.browser.XLargeUi: void showWeb(boolean)> (1)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.view.ScrollerView: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UI: boolean onBackKey()> (1)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<com.android.browser.Controller$PruneThumbnails: void run()> (1)
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail(com.android.browser.Tab)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete(android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
Permission:android.permission.ACCESS_COARSE_LOCATION
1182 Callers:
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (13)
<android.media.MediaFocusControl: void <init>(android.os.Looper,android.content.Context,android.media.VolumeController,android.media.AudioService)> (1)
<android.net.MobileDataStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<com.android.bluetooth.hfp.HeadsetPhoneState: void listenForPhoneState(boolean)> (4)
<com.android.bluetooth.map.BluetoothMapContentObserver: void registerPhoneServiceStateListener()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void unRegisterPhoneServiceStateListener()> (1)
<com.android.deskclock.alarms.AlarmService: void startAlarm(com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmService: void stopCurrentAlarm()> (2)
<com.android.deskclock.TimerRingService: void onCreate()> (1)
<com.android.deskclock.TimerRingService: void onDestroy()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.connectivity.DataConnectionStats: void startMonitoring()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void addPhoneStateListener()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void removePhoneStateListener()> (2)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.net.BaseNetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (2)
<com.android.bluetooth.hfp.HeadsetPhoneState: void cleanup()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processSlcConnected()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void enter()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void init()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void deinit()> (1)
<com.android.deskclock.alarms.AlarmService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.deskclock.alarms.AlarmService: void onDestroy()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<android.net.NetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<com.android.server.connectivity.Vpn: void startMonitoring(android.content.Context,android.os.Handler)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.util.State: void enter()> (36)
<com.android.bluetooth.hfp.HeadsetService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void <init>(android.content.Context,android.bluetooth.BluetoothDevice,android.os.Handler)> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void shutdown()> (3)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.ConnectivityService: void onUserStart(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: void startObexServerSession()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnectMap(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService: void closeService()> (3)
<com.android.bluetooth.map.BluetoothMapService: void stopObexServerSession()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.server.ConnectivityService: void access$5400(com.android.server.ConnectivityService,int)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<com.android.bluetooth.map.BluetoothMapService: void access$600(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1400(com.android.bluetooth.map.BluetoothMapService)> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1000(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.ConnectivityService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService$MapBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean stop()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.bluetooth.map.BluetoothMapService: void startRfcommSocketListener()> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void doStop(android.content.Intent)> (8)
<com.android.bluetooth.map.BluetoothMapService: void access$900(com.android.bluetooth.map.BluetoothMapService)> (2)
<android.bluetooth.IBluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (8)
<com.android.bluetooth.gatt.GattService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean start()> (1)
<android.bluetooth.BluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean start()> (1)
<com.android.bluetooth.btservice.ProfileService: void doStart(android.content.Intent)> (8)
<com.android.bluetooth.a2dp.A2dpService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.gatt.GattService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStart(android.content.Intent)> (1)
<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)> (2)
<com.android.server.LocationManagerService: int access$500(com.android.server.LocationManagerService,int,int)> (1)
<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()> (9)
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<com.android.server.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> ()
<android.location.ILocationManager$Stub: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (1)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (3)
<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (1)
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.Location getLastLocation()> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> ()
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (3)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: void removeAllGeofences(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)> ()
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)> (11)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.TwilightService$LocationHandler: void retrieveLocation()> (3)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.android.server.location.GeofenceManager: android.location.Location getFreshLocationLocked()> (1)
<com.android.server.TwilightService$LocationHandler: void enableLocationUpdates()> (2)
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)> (3)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (6)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.android.server.location.GeofenceManager: void updateFences()> (2)
<com.android.server.TwilightService: void registerListener(com.android.server.TwilightService$TwilightListener,android.os.Handler)> (2)
<com.android.server.TwilightService: void systemReady()> (1)
<com.android.server.TwilightService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.FlpHardwareProvider: void <init>(android.content.Context)> (1)
<com.android.server.location.GpsLocationProvider$3: void run()> (1)
<com.android.camera.LocationManager: void startReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)> (1)
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> (6)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<com.android.server.location.GeofenceManager: void access$000(com.android.server.location.GeofenceManager)> (2)
<com.android.server.location.GeofenceManager: void onLocationChanged(android.location.Location)> (1)
<com.android.server.power.DisplayPowerController: void <init>(android.os.Looper,android.content.Context,com.android.server.power.Notifier,com.android.server.LightsService,com.android.server.TwilightService,android.hardware.SensorManager,com.android.server.display.DisplayManagerService,com.android.server.power.SuspendBlocker,com.android.server.power.DisplayBlanker,com.android.server.power.DisplayPowerController$Callbacks,android.os.Handler)> (1)
<com.android.server.UiModeManagerService: void <init>(android.content.Context,com.android.server.TwilightService)> (1)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider getInstance(android.content.Context)> (1)
<com.android.camera.LocationManager: void recordLocation(boolean)> (8)
<com.android.camera.LocationManager: void stopReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)> (1)
<com.android.wallpaper.grass.GrassRS: void stop()> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<android.renderscript.RSSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (8)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.server.location.GeofenceManager: void scheduleUpdateFencesLocked()> (3)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.LocationManagerService: void loadProvidersLocked()> (1)
<com.android.camera.PhotoModule: void initializeFirstTime()> (1)
<com.android.camera.PhotoModule: void initializeSecondTime()> (1)
<com.android.camera.PhotoModule: void onPauseAfterSuper()> (1)
<com.android.camera.PhotoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.camera.VideoModule: void onSharedPreferenceChanged()> (1)
<com.android.camera.WideAnglePanoramaModule: void onPauseBeforeSuper()> (1)
<com.android.server.location.LocationBasedCountryDetector: void stop()> (3)
<com.android.wallpaper.RenderScriptScene: void stop()> (6)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.galaxy4.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.noisefield.NoiseFieldView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.phasebeam.PhaseBeamView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.holospiral.HoloSpiralView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)> (2)
<com.android.server.location.GeofenceManager: void removeFence(java.lang.String)> ()
<com.android.server.LocationManagerService: void systemRunning()> (1)
<com.android.camera.PhotoModule: void access$700(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onResumeTasks()> (2)
<com.android.camera.CameraModule: void onPauseAfterSuper()> ()
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.PhotoModule: void setLocationPreference(java.lang.String)> (1)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> ()
<com.android.camera.CameraModule: void onResumeAfterSuper()> ()
<com.android.server.location.LocationBasedCountryDetector$1: void onLocationChanged(android.location.Location)> (1)
<com.android.wallpaper.fall.FallRS: void stop()> (1)
<com.android.wallpaper.galaxy.GalaxyRS: void stop()> (1)
<com.android.wallpaper.nexus.NexusRS: void stop()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void destroyRenderer()> (2)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.server.location.GeofenceManager: void sendIntent(android.app.PendingIntent,android.content.Intent)> (2)
<com.android.camera.PhotoModule: void access$3800(com.android.camera.PhotoModule)> (1)
<com.android.camera.PhotoModule: void onResumeAfterSuper()> (1)
<com.android.camera.PieController: void onSettingChanged(com.android.camera.ListPreference)> (5)
<com.android.camera.PhotoModule: void enableRecordingLocation(boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onDestroy()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceDestroyed(android.view.SurfaceHolder)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (18)
<com.android.server.location.GeofenceManager: void sendIntentEnter(android.app.PendingIntent)> (1)
<com.android.server.location.GeofenceManager: void sendIntentExit(android.app.PendingIntent)> (1)
<com.android.camera.PhotoModule$5: void run()> (1)
<com.android.camera.PhotoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PieController$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.PieController$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PhotoController: void enableRecordingLocation(boolean)> (2)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (2)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void reload()> (1)
<com.android.photos.shims.MediaItemsLoader: android.database.Cursor loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: android.database.Cursor loadInBackground()> (1)
<com.android.camera.PhotoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.ui.PieItem$OnClickListener: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.ui.ListPrefSettingPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.TimeIntervalPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.MoreSettingPopup$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.PhotoUI$7: void onCancel(android.content.DialogInterface)> (1)
<com.android.camera.PhotoUI$9: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void <init>(com.android.gallery3d.data.Path,java.util.Comparator,com.android.gallery3d.data.MediaSet[],int)> (2)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (2)
<com.android.photos.shims.MediaItemsLoader: java.lang.Object loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: java.lang.Object loadInBackground()> (1)
<com.android.camera.ui.CountdownTimerPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.PieItem: void performClick()> (1)
<com.android.camera.ui.ListPrefSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.TimeIntervalPopup: void updateInputState()> (1)
<com.android.camera.ui.MoreSettingPopup: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getLocalAlbum(com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (2)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.camera.ui.CountdownTimerPopup: void updateInputState()> (1)
<com.android.camera.ui.PieRenderer$3: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.camera.ui.TimeIntervalPopup: void access$000(com.android.camera.ui.TimeIntervalPopup)> (1)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (3)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet access$400(com.android.gallery3d.data.LocalAlbumSet,com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (1)
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (2)
<com.android.camera.ui.CountdownTimerPopup: void access$000(com.android.camera.ui.CountdownTimerPopup)> (1)
<com.android.camera.ui.TimeIntervalPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (2)
<com.android.gallery3d.app.ActivityState: void resume()> (12)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.FilmstripPage: void onResume()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onResume()> (2)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.util.ArrayList run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> (24)
<com.android.gallery3d.data.MediaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (8)
<com.android.camera.ui.CountdownTimerPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean changeIndex(int)> (2)
<com.android.camera.ui.InLineSettingMenu: boolean changeIndex(int)> (1)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.FilmstripPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState,boolean)> (1)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (8)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (5)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.GalleryActivity: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (3)
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> (3)
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void delete(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void getPanoramaSupport(com.android.gallery3d.data.Path,com.android.gallery3d.data.MediaObject$PanoramaSupportCallback)> ()
<com.android.gallery3d.data.DataManager: void onStitchingResult(android.net.Uri)> (1)
<com.android.gallery3d.data.DataManager: void rotate(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void resolveAlbumPath()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void setChoosenAlbum(android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgetsInternal(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList getSelectedMediaObjects(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean execute(com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.MediaItemsLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.photos.shims.MediaSetLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.gallery3d.data.ClusterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.DataManager: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (5)
<com.android.gallery3d.data.FilterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.UriSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.camera.ui.InLineSettingCheckBox$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (8)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (5)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.GalleryActivity: void startDefaultPage()> (2)
<com.android.gallery3d.app.GalleryActivity: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (3)
<com.android.gallery3d.app.PhotoPage: void switchToGrid()> (3)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (5)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.app.GalleryActivity: void initializeByIntent()> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (9)
<com.android.gallery3d.app.FilmstripPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onGetContent(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computePanoramaSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computeSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: android.content.Intent getIntentBySingleSelectedPath(java.lang.String)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> (10)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void <init>(com.android.gallery3d.data.DataManager,java.lang.String)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void monitorRootPath()> (1)
<com.android.gallery3d.app.AlbumPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean,int)> (3)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingResult(android.net.Uri)> ()
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (8)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.gallery3d.gadget.MediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgets(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList access$100(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean access$700(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.LoaderCompatShim: void deleteItemWithPath(java.lang.Object)> (3)
<com.android.gallery3d.data.ClusterAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> (2)
<com.android.gallery3d.data.ClusterAlbum: void delete()> (2)
<com.android.gallery3d.data.FilterTypeSet: void delete()> (2)
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (9)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$6: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.PhotoPage: void onSingleTapUp(int,int)> (3)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (2)
<com.android.gallery3d.app.DialogPicker: void onResume()> (2)
<com.android.gallery3d.app.GalleryActivity: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumPage: void switchToFilmstrip()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1100(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.SinglePhotoPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onStateResult(int,int,android.content.Intent)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.FilmstripPage: void switchToGrid()> (1)
<com.android.gallery3d.app.PhotoPage: void onAlbumModeSelected(int)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void switchToGrid()> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.GalleryActivity: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumSetPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$600(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$700(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> (3)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context)> (3)
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context,java.lang.String)> ()
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context)> (3)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onCreate()> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> (6)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.UriSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.data.ContentListener: void onContentDirty()> (4)
<com.android.gallery3d.gadget.PhotoAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.photos.AlbumFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.AlbumSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.PhotoSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.gallery3d.data.MediaSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (15)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.MediaObject: void delete()> (22)
<com.android.gallery3d.data.MediaSet: void delete()> (2)
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> (21)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.AlbumPage: void access$1700(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1700(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished(boolean)> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.FilmstripPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.ActivityState: void onStateResult(int,int,android.content.Intent)> (4)
<com.android.gallery3d.app.FilmstripPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.FilmstripPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.GalleryActionBar$OnAlbumModeSelectedListener: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onBackPressed()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onBackPressed()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.photos.AlbumFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.PhotoSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.AlbumSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.MenuExecutor: com.android.gallery3d.data.Path getSingleSelectedPath()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.data.MediaSet: void notifyContentChanged()> (15)
<com.android.gallery3d.gadget.LocalPhotoSource$1: void onChange(boolean)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (16)
<com.android.gallery3d.data.MediaSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (16)
<com.android.gallery3d.data.SecureAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ActionImage: void delete()> (2)
<com.android.gallery3d.data.CameraShortcutImage: void delete()> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbum: void delete()> (2)
<com.android.gallery3d.data.EmptyAlbumImage: void delete()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void delete()> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: void delete()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMediaItem: void delete()> (2)
<com.android.gallery3d.data.MediaItem: void delete()> (3)
<com.android.gallery3d.data.SecureAlbum: void delete()> (2)
<com.android.gallery3d.data.SingleItemAlbum: void delete()> (2)
<com.android.gallery3d.data.SnailAlbum: void delete()> (3)
<com.android.gallery3d.data.SnailItem: void delete()> (2)
<com.android.gallery3d.data.UnlockImage: void delete()> (2)
<com.android.gallery3d.data.UriImage: void delete()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMergeAlbum: void delete()> (2)
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> (7)
<com.android.gallery3d.app.AlbumSetPage: boolean albumShouldOpenInFilmstrip(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem findMediaItem(com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> (1)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (17)
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (16)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.ui.SelectionManager: boolean expandMediaSet(java.util.ArrayList,com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (5)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.gallery3d.app.ManageCachePage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.SlideshowPage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.ui.PopupList$OnPopupItemClickListener: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$500(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(android.view.MenuItem,java.lang.String,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: int setIndex()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.data.ChangeNotifier: void onChange(boolean)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ClusterAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void notifyContentChanged()> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterTypeSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.SecureAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SingleItemAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyContentChanged()> (3)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void notifyContentChanged()> (1)
<com.android.gallery3d.data.ClusterAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (21)
<com.android.gallery3d.data.SecureAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(android.database.Cursor)> (1)
<com.android.gallery3d.data.ClusterAlbum$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.data.FilterTypeSet$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.AlbumPage$1: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumPage: void prepareAnimationBackToFilmstrip(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void prepareSlotContent(int)> (3)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.data.MediaSet,int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterDeleteSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SecureAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SnailAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: int findIndexOfTarget(com.android.gallery3d.app.PhotoDataAdapter$UpdateInfo)> (1)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SecureAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (9)
<com.android.gallery3d.app.GalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (2)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (2)
<com.android.gallery3d.app.GalleryActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (3)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1800(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.PopupList$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.ui.DialogDetailsView: void reloadDetails()> (2)
<com.android.gallery3d.data.ChangeNotifier: void fakeChange()> (2)
<com.android.gallery3d.data.DataManager$NotifyBroker: void onChange(boolean)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ClusterAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void sendRequest(int,com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterTypeSet: void onContentDirty()> (1)
<com.android.gallery3d.data.LocalAlbumSet$1: void run()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyChange()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClustersContents()> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FaceClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SizeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (2)
<com.android.gallery3d.data.TagClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.MediaSet$ItemConsumer: void consume(int,com.android.gallery3d.data.MediaItem)> (3)
<com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage$4: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1200(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setContentWindow(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (16)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.FilmstripPage: void onPause()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onPause()> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (5)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void reloadDetails()> (1)
<com.android.gallery3d.ui.DialogDetailsView: void show()> (1)
<com.android.gallery3d.data.LocalAlbumSet: void fakeChange()> ()
<com.android.gallery3d.data.SecureAlbum: void addMediaItem(boolean,int)> (2)
<com.android.gallery3d.data.FilterDeleteSet: void addDeletion(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void clearDeletion()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void removeDeletion(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.PhotoPage: void notifyScreenNailChanged()> (3)
<com.android.photos.shims.LoaderCompatShim: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.LocalSource: void processMapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,boolean)> (1)
<com.android.gallery3d.ui.PhotoFallbackEffect: void setPositionProvider(com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onLongTap(int)> (2)
<com.android.gallery3d.app.AlbumPage$4: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$DataListener: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setActiveWindow(int,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (13)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (14)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (2)
<com.android.gallery3d.app.DialogPicker: void onPause()> (2)
<com.android.gallery3d.app.GalleryActivity: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.gallery3d.ui.DetailsHelper: void reloadDetails()> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void show()> (1)
<com.android.gallery3d.app.PhotoPage: void addSecureAlbumItem(boolean,int)> (3)
<com.android.gallery3d.data.SecureAlbum: void onStitchingQueued(android.net.Uri)> (1)
<com.android.gallery3d.app.PhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.app.PhotoPage: void onUndoDeleteImage()> (3)
<com.android.gallery3d.app.AppBridge$Server: void notifyScreenNailChanged()> ()
<com.android.gallery3d.app.FilmstripPage: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void notifyScreenNailChanged()> (1)
<com.android.photos.AlbumSetFragment: java.util.ArrayList getSubItemUrisForItem(java.lang.Object)> ()
<com.android.gallery3d.data.LocalSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.app.ManageCachePage$4: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void onVisibleRangeChanged(int,int)> ()
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (12)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (12)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage: void updateUIForCurrentPhoto()> (4)
<com.android.gallery3d.ui.DetailsHelper: void show()> (3)
<com.android.gallery3d.app.AppBridge$Server: void addSecureAlbumItem(boolean,int)> ()
<com.android.gallery3d.app.FilmstripPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingQueued(android.net.Uri)> ()
<com.android.gallery3d.app.FilmstripPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (7)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.gallery3d.app.FilmstripPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (9)
<com.android.gallery3d.app.PhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (4)
<com.android.gallery3d.app.SinglePhotoPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.AlbumPage: void showDetails()> (1)
<com.android.gallery3d.app.AlbumSetPage: void showDetails()> (1)
<com.android.gallery3d.app.PhotoPage: void showDetails()> (3)
<com.android.gallery3d.ui.PhotoView$1: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: void onPictureCenter(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void requestDeferredUpdate()> (3)
<com.android.gallery3d.app.PhotoPage: void refreshHidingMessage()> (6)
<com.android.gallery3d.app.PhotoPage: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void onActionBarWanted()> (3)
<com.android.gallery3d.app.FilmstripPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (11)
<com.android.gallery3d.app.SinglePhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void showDetails()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void showDetails()> (1)
<com.android.gallery3d.ui.GLView$OnClickListener: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.gallery3d.app.FilmstripPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.FilmstripPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.PhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (5)
<com.android.gallery3d.app.PhotoPage: void onFilmModeChanged(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void showBars()> (6)
<com.android.gallery3d.app.SinglePhotoPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.FilmstripPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.FilmstripPage: void onActionBarWanted()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarWanted()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarWanted()> (2)
<com.android.gallery3d.app.FilmstripPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage$6: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView$FullPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.app.FilmstripPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$9: void onConfirmDialogDismissed(boolean)> (1)
<com.android.gallery3d.app.PhotoPage$MyMenuVisibilityListener: void onMenuVisibilityChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void showBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (3)
<com.android.gallery3d.app.PhotoPage: void toggleBars()> (3)
<com.android.gallery3d.app.PhotoPage: void wantBars()> (3)
<com.android.gallery3d.app.SinglePhotoPage: void showBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimationLocked(int)> (1)
<com.android.gallery3d.ui.PhotoView: void captureAnimationDone(int)> (1)
<com.android.gallery3d.ui.PhotoView: void updateActionBar()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.ui.PhotoView$Picture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onConfirmDialogDismissed(boolean)> (2)
<com.android.gallery3d.ui.PhotoView: void setFilmMode(boolean)> (16)
<com.android.gallery3d.app.FilmstripPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$7: void onSystemUiVisibilityChange(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void toggleBars()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void toggleBars()> (1)
<com.android.gallery3d.app.FilmstripPage: void wantBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (6)
<com.android.gallery3d.app.SinglePhotoPage: void wantBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$900(com.android.gallery3d.ui.PhotoView,int)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void updateCurrentIndex(int)> (1)
<com.android.gallery3d.ui.PhotoView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.gallery3d.app.PhotoPage: void transitionFromAlbumPageIfNeeded()> (3)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void resetToFirstPicture()> (1)
<com.android.gallery3d.app.FilmstripPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: boolean switchWithCaptureAnimation(int)> (4)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void moveTo(int)> (2)
<com.android.gallery3d.ui.GLView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (12)
<com.android.gallery3d.app.FilmstripPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.app.AppBridge$Server: boolean switchWithCaptureAnimation(int)> ()
<com.android.gallery3d.app.FilmstripPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.PhotoPage$Model: void moveTo(int)> (2)
<com.android.gallery3d.ui.PhotoView$Model: void moveTo(int)> (5)
<com.android.gallery3d.app.AlbumPage$2: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.PhotoPage$4: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.EdgeView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GLRootView: void onDrawFrameLocked(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.ui.GLView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (13)
<com.android.gallery3d.ui.PreparePageFadeoutTexture: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.SlotView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.UndoBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyScaleListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToFirstImage()> (1)
<com.android.gallery3d.ui.PhotoView: void switchToImage(int)> (7)
<com.android.gallery3d.ui.PhotoView: void switchToNextImage()> (3)
<com.android.gallery3d.ui.PhotoView: void switchToPrevImage()> (2)
<com.android.gallery3d.ui.GLRootView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.app.AlbumPage$2: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.ui.ScrollBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLRoot$OnGLIdleListener: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToNextPicture()> (3)
<com.android.gallery3d.ui.PhotoView: void switchFocus()> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToPrevPicture()> (3)
<com.android.gallery3d.ui.PhotoView$FullPicture: void drawTileView(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.GLRootView$IdleRunner: void run()> (1)
<com.android.gallery3d.ui.PhotoView: boolean snapToNeighborImage()> (2)
<com.android.gallery3d.ui.PhotoView: boolean swipeImages(float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToHitPicture(int,int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$800(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean access$3700(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: void snapback()> (2)
<com.android.gallery3d.ui.PhotoView: boolean access$3500(com.android.gallery3d.ui.PhotoView,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void access$3200(com.android.gallery3d.ui.PhotoView,int,int)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: void onUp()> (1)
<com.android.gallery3d.ui.PhotoView: void access$1500(com.android.gallery3d.ui.PhotoView)> (2)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: void onUp()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.DownUpDetector$DownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void setState(boolean,android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView: boolean onTouch(android.view.MotionEvent)> (1)
<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void checkPermission(int,int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void access$200(android.hardware.location.GeofenceHardwareService,int,int,int)> (6)
<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean removeGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean pauseGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean removeGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean removeGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (1)
<android.hardware.location.IGeofenceHardware$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)> ()
<android.hardware.location.GeofenceHardwareService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
Permission:android.permission.BLUETOOTH_ADMIN
469 Callers:
<com.android.server.BluetoothManagerService: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enableNoAutoConnect()> ()
<android.bluetooth.IBluetoothManager$Stub: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetoothManager: boolean enableNoAutoConnect()> (1)
<android.bluetooth.IBluetoothManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean enableNoAutoConnect()> ()
<com.android.server.BluetoothManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.BluetoothManagerService: boolean enable()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetoothManager$Stub: boolean enable()> (2)
<android.bluetooth.IBluetoothManager: boolean enable()> (1)
<android.bluetooth.BluetoothAdapter: boolean enable()> (1)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.BluetoothManagerService: boolean disable(boolean)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetoothManager$Stub: boolean disable(boolean)> (2)
<android.bluetooth.IBluetoothManager: boolean disable(boolean)> (3)
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)> ()
<android.bluetooth.BluetoothAdapter: boolean disable()> (1)
<com.android.server.power.ShutdownThread$5: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> ()
<com.android.bluetooth.btservice.AdapterService: boolean enable(boolean)> (2)
<com.android.bluetooth.btservice.AdapterService: boolean enableNoAutoConnect()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean enable()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enableNoAutoConnect()> (2)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enable()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enableNoAutoConnect()> ()
<android.bluetooth.IBluetooth$Stub: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean enable()> ()
<android.bluetooth.IBluetooth$Stub: boolean enable()> (2)
<android.bluetooth.IBluetooth: boolean enableNoAutoConnect()> (2)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetooth: boolean enable()> (2)
<com.android.server.BluetoothManagerService: void handleEnable(boolean)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.BluetoothManagerService: void access$1800(com.android.server.BluetoothManagerService,boolean)> (3)
<com.android.server.BluetoothManagerService: void recoverBluetoothServiceFromError()> (1)
<com.android.server.BluetoothManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BluetoothManagerService: void access$2900(com.android.server.BluetoothManagerService)> (2)
<com.android.server.BluetoothManagerService$1: void onBluetoothStateChange(int,int)> (2)
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onBluetoothStateChange(int,int)> ()
<com.android.bluetooth.btservice.AdapterService: boolean disable()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean disable()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean disable()> ()
<android.bluetooth.IBluetooth$Stub: boolean disable()> (2)
<android.bluetooth.IBluetooth: boolean disable()> (2)
<com.android.server.BluetoothManagerService: void handleDisable()> (2)
<com.android.server.BluetoothManagerService: void access$1900(com.android.server.BluetoothManagerService)> (3)
<com.android.server.BluetoothManagerService: void sendDisableMsg()> (2)
<com.android.server.BluetoothManagerService: void access$600(com.android.server.BluetoothManagerService)> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setName(java.lang.String)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setName(java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setName(java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setName(java.lang.String)> (1)
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> ()
<com.android.bluetooth.btservice.AdapterService: boolean startDiscovery()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean startDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean startDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean startDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> ()
<com.android.bluetooth.btservice.AdapterService: boolean cancelDiscovery()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelDiscovery()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelDiscovery()> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelDiscovery()> (2)
<android.bluetooth.IBluetooth: boolean cancelDiscovery()> (1)
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> ()
<com.android.bluetooth.btservice.AdapterService: boolean createBond(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean createBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean createBond(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean createBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean createBond(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean createBond()> ()
<com.android.bluetooth.btservice.AdapterService: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothDevice: boolean cancelBondProcess()> ()
<android.bluetooth.BluetoothDevice: boolean cancelPairingUserInput()> ()
<com.android.bluetooth.btservice.AdapterService: boolean removeBond(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean removeBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean removeBond(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean removeBond(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean removeBond(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean removeBond()> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (1)
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (2)
<android.bluetooth.IBluetooth: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)> (1)
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> ()
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (8)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.AdapterService: void autoConnectA2dp()> (1)
<com.android.bluetooth.btservice.AdapterService: void processConnectOtherProfiles(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.AdapterService: void autoConnect()> (1)
<com.android.bluetooth.btservice.AdapterService: void access$200(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.btservice.AdapterState$OnState: void enter()> (1)
<com.android.bluetooth.btservice.AdapterService: void connectOtherProfile(android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.util.State: void enter()> (36)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void processProfileStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.AdapterService: void access$100(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.bluetooth.btservice.AdapterService: void onProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (3)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (7)
<com.android.bluetooth.map.BluetoothMapService: void setState(int,int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int,int)> (3)
<com.android.bluetooth.a2dp.A2dpService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.gatt.GattService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hid.HidService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.pan.PanService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnectMap(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void setState(int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$2000(com.android.bluetooth.pbap.BluetoothPbapService,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int)> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine$IntentBroadcastHandler: void onConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: void updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hid.HidService: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.ProfileService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void startObexServerSession()> (1)
<com.android.bluetooth.map.BluetoothMapService: void stopObexServerSession()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: void disconnect()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void broadcastHealthDeviceStateChange(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$1000(com.android.bluetooth.hfp.HeadsetStateMachine,android.bluetooth.BluetoothDevice,int,int)> (7)
<com.android.bluetooth.hid.HidService: void access$100(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice,int)> (4)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void doStop(android.content.Intent)> (8)
<com.android.bluetooth.map.BluetoothMapService: void access$600(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.map.BluetoothMapService: void access$1000(com.android.bluetooth.map.BluetoothMapService)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void disconnect()> ()
<android.bluetooth.IBluetoothPbap$Stub: void disconnect()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void access$1100(com.android.bluetooth.a2dp.A2dpStateMachine,android.bluetooth.BluetoothDevice,int,int)> (6)
<com.android.bluetooth.hdp.HealthService: void callHealthChannelCallback(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: void onConnectStateChanged(byte[],int)> ()
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.a2dp.A2dpService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.gatt.GattService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService$MapBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService$SocketAcceptThread: void run()> (2)
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPbap: void disconnect()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: void access$1700(com.android.bluetooth.hdp.HealthService,android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (3)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPbap: boolean disconnect()> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.hdp.HealthService: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService: boolean connectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: void access$900(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<android.bluetooth.IBluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothInputDevice$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean start()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.BluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> ()
<com.android.bluetooth.btservice.ProfileService: boolean start()> (1)
<android.bluetooth.IBluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.IBluetoothHealth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<com.android.bluetooth.btservice.ProfileService: void doStart(android.content.Intent)> (8)
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<com.android.bluetooth.a2dp.A2dpService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.gatt.GattService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStart(android.content.Intent)> (1)
<android.bluetooth.BluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<com.android.bluetooth.a2dp.A2dpService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.a2dp.A2dpService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (5)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherSinkPriorities(com.android.bluetooth.a2dp.A2dpService,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void setProfileAutoConnectionPriority(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.btservice.BondStateMachine: void clearProfilePriorty(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: void setProfilePriorty(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.bluetooth.btservice.BondStateMachine: void access$1400(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: void access$1500(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.a2dp.A2dpService: int getPriority(android.bluetooth.BluetoothDevice)> (8)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean connect(android.bluetooth.BluetoothDevice)> (3)
<com.android.bluetooth.btservice.AdapterService: void autoConnectHeadset()> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hfp.HeadsetService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (5)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherHeadsetPriorities(com.android.bluetooth.hfp.HeadsetService,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.hfp.HeadsetService: int getPriority(android.bluetooth.BluetoothDevice)> (9)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (3)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.hid.HidService: int getPriority(android.bluetooth.BluetoothDevice)> (4)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService: boolean access$600(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.hid.HidService: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> ()
<com.android.bluetooth.hid.HidService: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> (1)
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> ()
<com.android.bluetooth.hid.HidService: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> (1)
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> ()
<com.android.bluetooth.hid.HidService: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<com.android.bluetooth.gatt.GattService: void startScan(int,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScan(int,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void startScan(int,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void startScan(int,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothGatt: void startScan(int,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter$GattCallbackWrapper: void onClientRegistered(int,int)> (2)
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onClientRegistered(int,int)> ()
<com.android.bluetooth.gatt.GattService: void startScanWithUuids(int,boolean,java.util.UUID[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> (2)
<android.bluetooth.IBluetoothGatt: void startScanWithUuids(int,boolean,android.os.ParcelUuid[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pbap.BluetoothPbapService$1: void handleMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean checkAccessPermission(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.map.BluetoothMapService$1: void handleMessage(android.os.Message)> (1)
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
7 Callers:
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.WRITE_SMS
61 Callers:
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusDeleted(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int setMessageStatus(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageMms(long)> (1)
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.providers.telephony.MmsSmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.bluetooth.map.BluetoothMapContent: void addSmsEntry()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpSmsTable()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpMessages()> ()
<com.android.providers.telephony.MmsProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.providers.telephony.MmsSmsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> ()
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageMms(long)> (1)
Permission:android.permission.USE_CREDENTIALS
79 Callers:
<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$5: void doWork()> (1)
<android.accounts.AccountManager$6: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.calendar.AllInOneActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.email.service.EmailServiceUtils: android.accounts.AccountManagerFuture setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.AutologinBar: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> ()
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void onResume()> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.email.service.EmailServiceUtils: void updateAccountManagerType(android.content.Context,android.accounts.Account,java.util.Map)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: void doStart(android.os.Bundle,android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void updateAccountManagerAccountsOfType(java.lang.String,java.util.Map)> (1)
<com.android.browser.CrashRecoveryHandler: void startRecovery(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onAppUpgrade()> (2)
<com.android.browser.Controller: void start(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void reconcileAndStartServices()> (2)
<com.android.browser.ActivityController: void start(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onBootCompleted()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (3)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
Permission:android.permission.READ_CALENDAR
546 Callers:
<com.android.exchange.ExchangeService$CalendarObserver: void onChangeInBackground()> (1)
<com.android.exchange.ExchangeService$CalendarObserver: void access$400(com.android.exchange.ExchangeService$CalendarObserver)> (1)
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()> (1)
<com.android.exchange.adapter.CalendarSyncParser: android.database.Cursor getClientIdCursor(java.lang.String)> (1)
<com.android.exchange.adapter.CalendarSyncParser: void addResponsesParser()> (1)
<com.android.exchange.adapter.CalendarSyncParser: void responsesParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void responsesParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (6)
<com.android.exchange.adapter.CalendarSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.ContactsSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.eas.EasSyncBase: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasSync: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.eas.EasOperation: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.GoogleCalendarUriIntentFilter: void onCreate(android.os.Bundle)> (1)
<com.android.exchange.eas.EasSyncCalendar: void markParentsOfDirtyEvents(android.content.Context,com.android.emailcommon.provider.Account,java.lang.String,java.lang.String[])> (1)
<com.android.exchange.eas.EasSyncCalendar: void setUpsyncCommands(android.content.Context,com.android.emailcommon.provider.Account,double,com.android.exchange.adapter.Serializer)> (1)
<com.android.exchange.eas.EasSyncCalendar: void setSyncOptions(android.content.Context,com.android.exchange.adapter.Serializer,double,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,int)> (1)
<com.android.exchange.eas.EasSyncCollectionTypeBase: void setSyncOptions(android.content.Context,com.android.exchange.adapter.Serializer,double,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,int)> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.eas.EasOperation: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.eas.EasOperation: org.apache.http.client.methods.HttpUriRequest makeRequest()> (12)
<com.android.exchange.eas.EasFolderSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasLoadAttachment: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasMoveItems: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOptions: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOutboxSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasPing: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasProvision: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSearch: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSettings: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<android.provider.CalendarContract$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)> ()
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getAttendeesCursor(android.content.Context,long)> (2)
<com.android.calendar.alerts.AlertReceiver: android.app.PendingIntent createBroadcastMailIntent(android.content.Context,long,java.lang.String)> (1)
<com.android.calendar.alerts.AlertReceiver: android.content.Intent createEmailIntent(android.content.Context,long,java.lang.String)> (1)
<com.android.calendar.alerts.AlertReceiver: android.app.Notification buildBasicNotification(android.app.Notification$Builder,android.content.Context,java.lang.String,java.lang.String,long,long,long,int,boolean,int,boolean)> (2)
<com.android.calendar.alerts.QuickResponseActivity$QueryThread: void run()> (2)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeBasicNotification(android.content.Context,java.lang.String,java.lang.String,long,long,long,int,boolean,int)> (1)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeExpandingNotification(android.content.Context,java.lang.String,java.lang.String,java.lang.String,long,long,long,int,boolean,int)> (1)
<com.android.calendar.alerts.QuickResponseActivity: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> (1)
<com.android.calendar.alerts.AlertService: void postNotification(com.android.calendar.alerts.AlertService$NotificationInfo,java.lang.String,android.content.Context,boolean,com.android.calendar.alerts.AlertService$NotificationPrefs,com.android.calendar.alerts.NotificationMgr,int)> (1)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (6)
<com.android.calendar.alerts.AlertActivity$3: java.lang.Void doInBackground(android.content.Context[])> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Void doInBackground(android.util.Pair[])> (1)
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.AlertActivity$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> ()
<com.android.exchange.ExchangeService$CalendarObserver: void <init>(com.android.exchange.ExchangeService,android.os.Handler,com.android.emailcommon.provider.Account)> ()
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> (2)
<com.android.calendar.month.MonthByWeekFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri access$600(com.android.calendar.month.MonthByWeekFragment)> (1)
<com.android.calendar.month.MonthByWeekFragment$3: void run()> (1)
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> (1)
<com.android.calendar.EventLoader$LoadEventDaysRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoadRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<com.android.calendar.EventLoader$LoaderThread: void run()> (2)
<com.android.calendar.EventLoader: void startBackgroundThread()> (1)
<com.android.calendar.DayFragment: void onResume()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity next()> (5)
<android.content.CursorEntityIterator: java.lang.Object next()> (6)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: java.lang.Object next()> (1)
<com.android.calendar.EventInfoFragment: void updateCalendar(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$1700(com.android.calendar.EventInfoFragment,android.view.View)> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.alerts.GlobalDismissManager: java.util.Map lookupCalendarToAccountMap(android.content.Context,java.util.Set)> (2)
<com.android.calendar.alerts.GlobalDismissManager: void dismissGlobally(android.content.Context,java.util.List)> (2)
<com.android.calendar.alerts.GlobalDismissManager: void processEventIds(android.content.Context,java.util.Set)> (1)
<com.android.calendar.alerts.AlertActivity$1: java.lang.Void doInBackground(java.util.List[])> (1)
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.calendar.alerts.AlertActivity$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.Event: android.database.Cursor instancesQuery(android.content.ContentResolver,java.lang.String[],int,int,java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.calendar.Event: void loadEvents(android.content.Context,java.util.ArrayList,int,int,int,java.util.concurrent.atomic.AtomicInteger)> (1)
<com.android.calendar.EventLoader$LoadEventsRequest: void processRequest(com.android.calendar.EventLoader)> (1)
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> ()
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int)> (5)
<com.android.calendar.agenda.AgendaListView: void deleteSelectedEvent()> ()
<com.android.calendar.CalendarController: void launchDeleteEventAndFinish(android.app.Activity,long,long,long,int)> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DeleteEventHelper: void delete(long,long,long,int,java.lang.Runnable)> (3)
<com.android.calendar.SearchActivity: void deleteEvent(long,long,long)> (1)
<com.android.calendar.CalendarController: void launchDeleteEvent(long,long,long)> (1)
<com.android.calendar.EventInfoFragment$6: void onClick(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.calendar.EventInfoFragment: void onResume()> (2)
<com.android.calendar.SearchActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (10)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtraWithTitleWithCalendarId(java.lang.Object,long,long,long,long,int,int,long,long,java.lang.String,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.agenda.AgendaFragment$2: void run()> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void handleSelectSyncedCalendarsClicked(android.view.View)> ()
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (5)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (16)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> (7)
<com.android.calendar.event.CreateEventDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (2)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)> (2)
<com.android.calendar.AllInOneActivity: boolean onNavigationItemSelected(int,long)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (1)
<com.android.calendar.AllInOneActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity$1: void onChange(boolean)> (1)
<com.android.calendar.DayView: void access$4500(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (4)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void sendViewEvent(com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (2)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (4)
<com.android.calendar.DayView$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekAdapter$2: void run()> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaListView: void goTo(android.text.format.Time,long,java.lang.String,boolean,boolean)> (3)
<com.android.calendar.agenda.AgendaListView: void refresh(boolean)> (3)
<com.android.calendar.AllInOneActivity$4: void onChange(boolean)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: boolean goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void updateMonthHighlight(android.widget.AbsListView)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$1500(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (1)
<com.android.calendar.DayView$3: void run()> (1)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.agenda.AgendaFragment: void goTo(com.android.calendar.CalendarController$EventInfo,boolean)> (1)
<com.android.calendar.agenda.AgendaFragment: void onResume()> (1)
<com.android.calendar.agenda.AgendaFragment: void search(java.lang.String,android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaFragment: void eventsChanged()> (2)
<com.android.calendar.agenda.AgendaListView$2: void run()> (1)
<com.android.calendar.agenda.AgendaListView$3: void run()> (1)
<com.android.calendar.DayView: void access$5000(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: boolean goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void updateMonthHighlight(android.widget.AbsListView)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.agenda.AgendaFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (3)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.calendar.alerts.GlobalDismissManager: java.util.Map lookupEventToCalendarMap(android.content.Context,java.util.Set)> (2)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onResume()> (1)
<com.android.emailsync.SyncManager$CalendarObserver$1: void run()> (1)
<com.android.calendar.DayView: int getEventAccessLevel(android.content.Context,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.calendar.event.CreateEventDialogFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void initLoader(java.lang.String)> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$3$1: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onCreate()> (1)
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account,java.lang.String)> (2)
<com.android.exchange.eas.EasSyncCalendar: void updateAttendeesAndSendMail(android.content.Context,com.android.emailcommon.provider.Account,android.content.Entity,android.content.ContentValues,boolean,long,java.lang.String)> (1)
<com.android.exchange.utility.CalendarUtilities: com.android.emailcommon.provider.EmailContent$Message createMessageForEventId(android.content.Context,long,int,java.lang.String,com.android.emailcommon.provider.Account)> (2)
<com.android.exchange.eas.EasSyncCalendar: boolean handleEntity(com.android.exchange.adapter.Serializer,android.content.Context,com.android.emailcommon.provider.Account,android.content.Entity,java.lang.String,boolean,double)> (1)
<com.android.calendar.alerts.AlarmScheduler: void queryNextReminderAndSchedule(android.database.Cursor,android.content.Context,android.content.ContentResolver,com.android.calendar.alerts.AlarmManagerInterface,int,long)> (1)
<com.android.calendar.alerts.AlarmScheduler: void scheduleNextAlarm(android.content.Context,com.android.calendar.alerts.AlarmManagerInterface,int,long)> (1)
<com.android.calendar.alerts.AlarmScheduler: void scheduleNextAlarm(android.content.Context)> (1)
<com.android.exchange.eas.EasSyncCalendar: void <init>(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.eas.EasSyncBase: com.android.exchange.eas.EasSyncCollectionTypeBase getCollectionTypeHandler(int)> (1)
<com.android.exchange.eas.EasSyncBase: boolean init(boolean)> (1)
<com.android.exchange.eas.EasOperation: boolean init(boolean)> (12)
<com.android.exchange.eas.EasFolderSync: boolean init(boolean)> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean init(boolean)> (1)
<com.android.exchange.eas.EasMoveItems: boolean init(boolean)> (1)
<com.android.exchange.eas.EasOptions: boolean init(boolean)> (1)
<com.android.exchange.eas.EasOutboxSync: boolean init(boolean)> (1)
<com.android.exchange.eas.EasPing: boolean init(boolean)> (1)
<com.android.exchange.eas.EasProvision: boolean init(boolean)> (1)
<com.android.exchange.eas.EasSearch: boolean init(boolean)> (1)
<com.android.exchange.eas.EasSettings: boolean init(boolean)> (1)
<com.android.exchange.eas.EasSync: boolean init(boolean)> (1)
<com.android.calendar.event.EditEventFragment: void startQuery()> (1)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void eventsChanged()> (2)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<android.provider.CalendarContract$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)> ()
<com.android.calendar.alerts.AlertService: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,com.android.calendar.alerts.AlarmManagerInterface)> (1)
<com.android.emailsync.SyncManager$CalendarObserver: void <init>(com.android.emailsync.SyncManager,android.os.Handler,com.android.emailcommon.provider.Account)> (1)
<com.android.emailsync.SyncManager: void registerCalendarObserver(com.android.emailcommon.provider.Account)> (2)
<com.android.emailsync.SyncManager: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (2)
<com.android.exchange.ExchangeService: void registerCalendarObserver(com.android.emailcommon.provider.Account)> (1)
<com.android.emailsync.SyncManager: long checkMailboxes()> (2)
<com.android.exchange.ExchangeService: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (1)
<com.android.emailsync.SyncManager: void run()> (2)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (3)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (2)
<com.android.calendar.CalendarUtils$TimeZoneUtils: void forceDBRequery(android.content.Context,java.lang.Runnable)> ()
<com.android.calendar.Utils: java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)> (46)
<com.android.calendar.Utils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (15)
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> (2)
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.agenda.AgendaByDayAdapter$1: void run()> (1)
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.calendar.agenda.AgendaByDayAdapter: void <init>(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaFragment$1: void run()> (1)
<com.android.calendar.agenda.AgendaFragment: void onAttach(android.app.Activity)> (1)
<com.android.calendar.agenda.AgendaListView$1: void run()> (1)
<com.android.calendar.agenda.AgendaListView: void initView(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$1: void run()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void <init>(android.content.Context,com.android.calendar.agenda.AgendaListView,boolean)> (1)
<com.android.calendar.alerts.AlertAdapter: void updateView(android.content.Context,android.view.View,java.lang.String,java.lang.String,long,long,boolean)> (1)
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)> (2)
<com.android.calendar.AllInOneActivity$2: void run()> (1)
<com.android.calendar.AllInOneActivity$3: void run()> (1)
<com.android.calendar.AllInOneActivity: void updateSecondaryTitleFields(long)> (3)
<com.android.calendar.CalendarController$1: void run()> (1)
<com.android.calendar.CalendarEventModel: void <init>(android.content.Context)> (2)
<com.android.calendar.CalendarViewAdapter: void refresh(android.content.Context)> (3)
<com.android.calendar.DayFragment$1: void run()> (1)
<com.android.calendar.DayView$1: void run()> (1)
<com.android.calendar.DayView: void init(android.content.Context)> (1)
<com.android.calendar.DayView: void reloadEvents()> (4)
<com.android.calendar.event.EditEventFragment$Done: void run()> (6)
<com.android.calendar.event.EditEventView: void <init>(android.app.Activity,android.view.View,com.android.calendar.event.EditEventHelper$EditDoneRunnable,boolean,boolean)> (1)
<com.android.calendar.event.EditEventView: void setModel(com.android.calendar.CalendarEventModel)> (3)
<com.android.calendar.event.EditEventView: void updateHomeTime()> (4)
<com.android.calendar.EventInfoFragment: void updateEvent(android.view.View)> (1)
<com.android.calendar.GeneralPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.GeneralPreferences: void showTimezoneDialog()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void init()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void refresh()> (2)
<com.android.calendar.month.MonthByWeekFragment$2: void run()> (1)
<com.android.calendar.month.MonthListView$1: void run()> (1)
<com.android.calendar.month.MonthListView: void init(android.content.Context)> (3)
<com.android.calendar.month.MonthWeekEventsView: int drawEvent(android.graphics.Canvas,com.android.calendar.Event,int,int,int,boolean,boolean,boolean)> (1)
<com.android.calendar.SearchActivity$2: void run()> (1)
<com.android.calendar.SearchActivity: boolean onCreateOptionsMenu(android.view.Menu)> (1)
<com.android.calendar.Utils: int getWeekNumberFromTime(long,android.content.Context)> (2)
<com.android.calendar.widget.CalendarAppWidgetModel: void buildFromCursor(android.database.Cursor,java.lang.String)> (1)
<com.android.calendar.widget.CalendarAppWidgetProvider: void performUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[],long[])> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.AllInOneActivity: void setTitleInActionBar(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void appendEventAccessibilityString(java.lang.StringBuilder,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void updateEventDetails()> (1)
<com.android.calendar.month.MonthWeekEventsView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.month.SimpleWeekView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.Utils: java.lang.String formatMonthYear(android.content.Context,android.text.format.Time)> (1)
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$DayInfo populateDayInfo(int,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$EventInfo populateEventInfo(long,boolean,long,long,int,int,java.lang.String,java.lang.String,int,int)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$DayAdapterInfo: void <init>(android.content.Context)> (1)
<com.android.calendar.agenda.AgendaListView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)> (1)
<com.android.calendar.AllInOneActivity: void access$700(com.android.calendar.AllInOneActivity,long)> (1)
<com.android.calendar.CalendarEventModel: void <init>(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.CalendarViewAdapter$1: void run()> (1)
<com.android.calendar.CalendarViewAdapter: void <init>(android.content.Context,int,boolean)> (1)
<com.android.calendar.DayView: void <init>(android.content.Context,com.android.calendar.CalendarController,android.widget.ViewSwitcher,com.android.calendar.EventLoader,int)> (1)
<com.android.calendar.DayFragment: void eventsChanged()> (3)
<com.android.calendar.DayView: boolean initNextView(int)> (1)
<com.android.calendar.event.EditEventFragment: boolean onActionBarItemSelected(int)> (2)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventHelper$EditDoneRunnable: void run()> (3)
<com.android.calendar.event.EditEventFragment: void onDestroy()> (1)
<com.android.calendar.event.EditEventFragment: void setModelIfDone(int)> (1)
<com.android.calendar.event.EditEventView: void access$500(com.android.calendar.event.EditEventView)> (2)
<com.android.calendar.event.EditEventView: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView: void setAllDayViewsVisibility(boolean)> (3)
<com.android.calendar.event.EditEventView: void setModification(int)> (3)
<com.android.calendar.EventInfoFragment: void access$100(com.android.calendar.EventInfoFragment,android.view.View)> (2)
<com.android.calendar.GeneralPreferences: void access$000(com.android.calendar.GeneralPreferences)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void init()> (2)
<com.android.calendar.month.MonthByWeekAdapter: void setEvents(int,int,java.util.ArrayList)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void refresh()> (2)
<com.android.calendar.month.MonthListView: void <init>(android.content.Context,android.util.AttributeSet,int)> (5)
<com.android.calendar.month.MonthListView: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<com.android.calendar.month.MonthListView: void <init>(android.content.Context)> (5)
<com.android.calendar.month.MonthWeekEventsView: void drawEvents(android.graphics.Canvas)> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildWeekNum()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: com.android.calendar.widget.CalendarAppWidgetModel buildAppWidgetModel(android.content.Context,android.database.Cursor,java.lang.String)> (1)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.DayView: void sendAccessibilityEventAsNeeded(boolean)> (2)
<com.android.calendar.DayView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: int processNewCursor(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec,android.database.Cursor)> (1)
<com.android.calendar.event.EditEventFragment: void onAttach(android.app.Activity)> (1)
<com.android.calendar.AllInOneActivity: void createButtonsSpinner(int,boolean)> (1)
<com.android.calendar.DayFragment: android.view.View makeView()> (1)
<com.android.calendar.DayView: void doScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.event.EditEventFragment: boolean access$000(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.event.EditEventView: void onCancel(android.content.DialogInterface)> (1)
<com.android.calendar.event.EditEventView: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean,long)> (1)
<com.android.calendar.event.EditEventFragment: void access$800(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventView$DateListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.calendar.event.EditEventView$TimeListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (1)
<com.android.timezonepicker.TimeZonePickerDialog$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView$4: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.calendar.event.EditEventView: void setViewStates(int)> (1)
<com.android.calendar.event.EditEventFragment$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.EventInfoFragment$1: void run()> (1)
<com.android.calendar.GeneralPreferences$1: boolean onPreferenceClick(android.preference.Preference)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void <init>(android.content.Context,java.util.HashMap)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void updateParams(java.util.HashMap)> (4)
<com.android.calendar.month.MonthWeekEventsView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.DayView: boolean setSelectionFromPosition(int,int,boolean)> (4)
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)> (3)
<com.android.calendar.AllInOneActivity: void configureActionBar(int)> (1)
<com.android.calendar.DayView: void access$4900(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.event.EditEventFragment$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.date.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.datetimepicker.time.TimePickerDialog$OnTimeSetListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (2)
<com.android.timezonepicker.TimeZonePickerDialog: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView: void updateView()> (2)
<com.android.calendar.month.MonthByWeekAdapter: void <init>(android.content.Context,java.util.HashMap,android.os.Handler)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void <init>(android.content.Context,java.util.HashMap)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void setUpAdapter()> (2)
<com.android.calendar.month.MonthByWeekFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.month.MonthByWeekAdapter: void updateParams(java.util.HashMap)> (1)
<com.android.calendar.month.MonthByWeekFragment: void setUpAdapter()> (1)
<com.android.calendar.month.SimpleWeekView: void onDraw(android.graphics.Canvas)> (1)
<com.android.calendar.DayView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doLongPress(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.datetimepicker.date.DatePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$3: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean processKeyUp(int)> (1)
<com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onAttach(android.app.Activity)> (3)
<com.android.calendar.DayView: void access$5100(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$4600(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean access$800(com.android.datetimepicker.time.TimePickerDialog,int)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onAttach(android.app.Activity)> (3)
<com.android.calendar.DayView$CalendarGestureListener: boolean onDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.TimePickerDialog$KeyboardListener: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<com.android.exchange.adapter.CalendarSyncParser$CalendarOperations: void updatedExtendedProperty(java.lang.String,java.lang.String,long)> (1)
<com.android.exchange.adapter.CalendarSyncParser: void addEvent(com.android.exchange.adapter.CalendarSyncParser$CalendarOperations,java.lang.String,boolean)> (2)
<com.android.exchange.adapter.CalendarSyncParser: void addParser(com.android.exchange.adapter.CalendarSyncParser$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncParser: void changeParser(com.android.exchange.adapter.CalendarSyncParser$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void doQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$2600(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean access$1800(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,java.lang.String,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.CalendarColorCache: void <init>(android.content.Context,com.android.calendar.selectcalendars.CalendarColorCache$OnCalendarColorsLoadedListener)> (3)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter: void <init>(android.content.Context,int,android.database.Cursor,android.app.FragmentManager)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter: void <init>(android.content.Context,android.database.Cursor,android.app.FragmentManager)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void <init>(android.content.Context,android.database.Cursor,com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onLoadFinished(android.content.Loader,android.database.Cursor)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity$1: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$RefreshCalendars: void run()> (2)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: android.database.Cursor getChildrenCursor(android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getLocationCursor(android.content.Context,long)> (1)
<com.android.calendar.alerts.AlertReceiver: android.text.style.URLSpan[] getURLSpans(android.content.Context,long)> (2)
<com.android.calendar.alerts.AlertReceiver: android.database.Cursor getEventCursor(android.content.Context,long)> (2)
<com.android.calendar.event.EventLocationAdapter: java.util.List queryRecentLocations(android.content.ContentResolver,java.lang.String)> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List access$600(android.content.ContentResolver,java.lang.String)> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter$1: java.util.List doInBackground(java.lang.Void[])> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.CalendarColorPickerDialog: void startQuery()> (2)
<com.android.calendar.CalendarColorPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (2)
<com.android.calendar.CalendarColorPickerDialog: void setCalendarId(long)> (4)
<com.android.colorpicker.ColorPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (3)
<com.android.calendar.CalendarColorPickerDialog: com.android.calendar.CalendarColorPickerDialog newInstance(long,boolean)> (3)
<com.android.calendar.selectcalendars.SelectCalendarsSimpleAdapter$2: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncAdapter$2: void onClick(android.view.View)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter$3: void onClick(android.view.View)> (1)
<com.android.calendar.event.EventColorPickerDialog: android.app.Dialog onCreateDialog(android.os.Bundle)> (2)
<com.android.calendar.alerts.AlertActivity: void onResume()> (1)
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> ()
<com.android.exchange.service.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void onResume()> (1)
<com.android.calendar.CalendarColorPickerDialog$QueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.exchange.adapter.CalendarSyncParser: android.database.Cursor getServerIdCursor(java.lang.String)> (2)
<com.android.exchange.adapter.CalendarSyncParser: void deleteParser(com.android.exchange.adapter.CalendarSyncParser$CalendarOperations)> (1)
<com.android.email.activity.EventViewer: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.alerts.AlarmScheduler: android.database.Cursor queryUpcomingEvents(android.content.Context,android.content.ContentResolver,long)> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.CHANGE_WIFI_STATE
189 Callers:
<com.android.server.wifi.WifiService: void enforceChangePermission()> (20)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiServiceMessenger()> (2)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiStateMachineMessenger()> (2)
<com.android.server.wifi.WifiService: boolean disableNetwork(int)> (2)
<com.android.server.wifi.WifiService: boolean enableNetwork(int,boolean)> (2)
<com.android.server.wifi.WifiService: boolean removeNetwork(int)> (2)
<com.android.server.wifi.WifiService: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)> (2)
<com.android.server.wifi.WifiService: boolean saveConfiguration()> (2)
<com.android.server.wifi.WifiService: boolean setWifiEnabled(boolean)> (3)
<com.android.server.wifi.WifiService: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<com.android.server.wifi.WifiService: void addToBlacklist(java.lang.String)> (2)
<com.android.server.wifi.WifiService: void clearBlacklist()> (2)
<com.android.server.wifi.WifiService: void disconnect()> (2)
<com.android.server.wifi.WifiService: void pollBatchedScan()> (2)
<com.android.server.wifi.WifiService: void reassociate()> (2)
<com.android.server.wifi.WifiService: void reconnect()> (2)
<com.android.server.wifi.WifiService: void setFrequencyBand(int,boolean)> (2)
<com.android.server.wifi.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (2)
<com.android.server.wifi.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<com.android.server.wifi.WifiService: void startScan(android.os.WorkSource)> (2)
<com.android.server.wifi.WifiService: void stopBatchedScan(android.net.wifi.BatchedScanSettings)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiServiceMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiStateMachineMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean disableNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean enableNetwork(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> ()
<android.net.wifi.IWifiManager$Stub: boolean removeNetwork(int)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)> ()
<android.net.wifi.IWifiManager$Stub: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean saveConfiguration()> ()
<android.net.wifi.IWifiManager$Stub: boolean saveConfiguration()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> ()
<android.net.wifi.IWifiManager$Stub: boolean setWifiEnabled(boolean)> (2)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<android.net.wifi.IWifiManager$Stub$Proxy: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.IWifiManager$Stub: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: void addToBlacklist(java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void clearBlacklist()> ()
<android.net.wifi.IWifiManager$Stub: void clearBlacklist()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void disconnect()> ()
<android.net.wifi.IWifiManager$Stub: void disconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void pollBatchedScan()> ()
<android.net.wifi.IWifiManager$Stub: void pollBatchedScan()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void reassociate()> ()
<android.net.wifi.IWifiManager$Stub: void reassociate()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void reconnect()> ()
<android.net.wifi.IWifiManager$Stub: void reconnect()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setFrequencyBand(int,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.IWifiManager$Stub: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> ()
<android.net.wifi.IWifiManager$Stub: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void startScan(android.os.WorkSource)> ()
<android.net.wifi.IWifiManager$Stub: void startScan(android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void stopBatchedScan(android.net.wifi.BatchedScanSettings)> ()
<android.net.wifi.IWifiManager$Stub: void stopBatchedScan(android.net.wifi.BatchedScanSettings)> (2)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.IWifiManager: boolean disableNetwork(int)> (1)
<android.net.wifi.IWifiManager: boolean enableNetwork(int,boolean)> (1)
<android.net.wifi.IWifiManager: boolean removeNetwork(int)> (1)
<android.net.wifi.IWifiManager: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.IBinder,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager: boolean saveConfiguration()> (1)
<android.net.wifi.IWifiManager: boolean setWifiEnabled(boolean)> (2)
<com.android.server.ServerThread: void initAndLoop()> (1)
<android.net.wifi.IWifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.IWifiManager: void addToBlacklist(java.lang.String)> (1)
<android.net.wifi.IWifiManager: void clearBlacklist()> (1)
<android.net.wifi.IWifiManager: void disconnect()> (1)
<android.net.wifi.IWifiManager: void pollBatchedScan()> (1)
<android.net.wifi.IWifiManager: void reassociate()> (1)
<android.net.wifi.IWifiManager: void reconnect()> (1)
<android.net.wifi.IWifiManager: void setFrequencyBand(int,boolean)> (1)
<android.net.wifi.IWifiManager: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> (1)
<android.net.wifi.IWifiManager: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> (1)
<android.net.wifi.IWifiManager: void startScan(android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager: void stopBatchedScan(android.net.wifi.BatchedScanSettings)> (1)
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()> (1)
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.WifiManager: boolean disableNetwork(int)> ()
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> ()
<android.net.wifi.WifiManager: boolean removeNetwork(int)> ()
<android.net.wifi.WifiManager: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings,android.os.WorkSource)> ()
<android.net.wifi.WifiManager: boolean requestBatchedScan(android.net.wifi.BatchedScanSettings)> ()
<android.net.wifi.WifiManager: boolean saveConfiguration()> ()
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> (4)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<android.net.wifi.WifiManager: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> (2)
<android.net.wifi.WifiManager: boolean addToBlacklist(java.lang.String)> ()
<android.net.wifi.WifiManager: boolean clearBlacklist()> ()
<android.net.wifi.WifiManager: boolean disconnect()> (1)
<android.net.wifi.WifiManager: void pollBatchedScan()> ()
<android.net.wifi.WifiManager: boolean reassociate()> (1)
<android.net.wifi.WifiManager: boolean reconnect()> ()
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> ()
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> ()
<android.net.wifi.WifiManager: boolean startScan(android.os.WorkSource)> ()
<android.net.wifi.WifiManager: boolean startScan()> (2)
<android.net.wifi.WifiManager: void stopBatchedScan(android.net.wifi.BatchedScanSettings)> ()
<android.net.wifi.WifiManager: void init()> (1)
<android.net.wifi.WifiWatchdogStateMachine: void <init>(android.content.Context)> (1)
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> ()
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> ()
<com.android.development.Connectivity: void onStartScanCycle()> (1)
<com.android.development.Connectivity$WifiScanReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)> (1)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<android.net.BaseNetworkStateTracker: boolean setRadio(boolean)> (2)
<com.android.development.Connectivity: void access$2200(com.android.development.Connectivity)> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.development.Connectivity: void access$2600(com.android.development.Connectivity)> (1)
<android.net.NetworkStateTracker: boolean setRadio(boolean)> (2)
<com.android.server.connectivity.Vpn: boolean setRadio(boolean)> (1)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<android.net.wifi.p2p.WifiP2pService: void enforceChangePermission()> (1)
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getMessenger()> (1)
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> (1)
<android.net.wifi.WifiStateMachine$InitialState: void enter()> (1)
<com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)> (1)
<com.android.internal.util.State: void enter()> (36)
<com.android.server.display.WifiDisplayAdapter$1: void run()> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
Permission:android.permission.WRITE_SYNC_SETTINGS
373 Callers:
<com.android.server.content.ContentService: void sync(android.content.SyncRequest)> (2)
<android.content.IContentService$Stub$Proxy: void sync(android.content.SyncRequest)> ()
<android.content.IContentService$Stub: void sync(android.content.SyncRequest)> (2)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IContentService: void sync(android.content.SyncRequest)> (1)
<com.android.server.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: void requestSync(android.content.SyncRequest)> (3)
<android.app.ContextImpl$ApplicationContentResolver: void requestSync(android.content.SyncRequest)> (1)
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (29)
<android.test.mock.MockContentResolver: void requestSync(android.content.SyncRequest)> (1)
<android.app.ContextImpl$ApplicationContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)> (2)
<android.content.SyncActivityTooManyDeletes: void startSyncReallyDelete()> (1)
<android.content.SyncActivityTooManyDeletes: void startSyncUndoDeletes()> (1)
<android.test.mock.MockContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)> ()
<com.android.calendar.CalendarController: void refreshCalendars()> (1)
<com.android.calendar.Utils: void startCalendarMetafeedSync(android.accounts.Account)> (2)
<com.android.calendar.Utils: void trySyncAndDisableUpgradeReceiver(android.content.Context)> (2)
<com.android.commands.requestsync.RequestSync: void run(java.lang.String[])> (1)
<com.android.emailcommon.provider.Mailbox: void resyncMailbox(android.content.ContentResolver,android.accounts.Account,long)> (1)
<com.android.email.provider.EmailProvider: void restartPush(android.accounts.Account)> (1)
<com.android.email.provider.EmailProvider: void startSync(android.accounts.Account,long,int)> (1)
<com.android.email.SecurityPolicy: void syncAccount(android.content.Context,com.android.emailcommon.provider.Account)> (2)
<com.android.email.service.EmailServiceStub: void requestSync(long,boolean,int)> (3)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (6)
<com.android.exchange.eas.EasOperation: void requestNoOpSync(android.accounts.Account,java.lang.String)> (11)
<com.android.exchange.eas.EasOperation: void requestSyncForMailbox(android.accounts.Account,long)> (12)
<com.android.exchange.eas.EasOperation: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (11)
<com.android.exchange.eas.EasPing: void requestFolderSync()> (1)
<com.android.exchange.eas.EasPing: void requestPing(android.accounts.Account)> (2)
<com.android.exchange.eas.EasSyncCalendar: void requestSyncForMailbox(java.lang.String,long)> (1)
<com.android.exchange.ExchangeBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.exchange.service.CalendarSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.EasServerConnection: void requestSyncForMailbox(android.accounts.Account,java.lang.String,long)> (3)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.server.content.SyncStorageEngine: void requestSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (3)
<android.app.ContextImpl$ApplicationContentResolver: void startSync(android.net.Uri,android.os.Bundle)> (1)
<android.test.mock.MockContentResolver: void startSync(android.net.Uri,android.os.Bundle)> (1)
<android.content.SyncActivityTooManyDeletes: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onResume()> (2)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.UpgradeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.commands.requestsync.RequestSync: void main(java.lang.String[])> ()
<com.android.exchange.adapter.EmailSyncParser: void wipe()> (1)
<com.android.email.provider.EmailProvider: boolean restartPush(android.content.Context,android.database.sqlite.SQLiteDatabase,java.lang.String)> (2)
<com.android.email.provider.EmailProvider: void startSync(com.android.emailcommon.provider.Mailbox,int)> (2)
<com.android.email.SecurityPolicy: void setAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy,java.lang.String)> (2)
<com.android.email.SecurityPolicy: void syncAccount(com.android.emailcommon.provider.Account)> (1)
<com.android.email.service.EmailServiceStub: void updateFolderList(long)> (5)
<com.android.email.service.ImapService$1: void requestSync(long,boolean,int)> (1)
<com.android.email.service.Pop3Service$1: void requestSync(long,boolean,int)> (2)
<com.android.exchange.adapter.CalendarSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.ContactsSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.eas.EasSyncBase: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.eas.EasFolderSync: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasLoadAttachment: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasMoveItems: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasOptions: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasOutboxSync: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasPing: void requestNoOpSync(android.accounts.Account,java.lang.String)> (2)
<com.android.exchange.eas.EasProvision: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasSearch: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasSettings: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasSyncBase: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasSync: void requestNoOpSync(android.accounts.Account,java.lang.String)> (1)
<com.android.exchange.eas.EasFolderSync: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasLoadAttachment: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasMoveItems: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasOperation: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (11)
<com.android.exchange.eas.EasOptions: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasOutboxSync: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasPing: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasProvision: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasSearch: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasSettings: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasSyncBase: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasSync: void requestSyncForMailbox(android.accounts.Account,long)> (1)
<com.android.exchange.eas.EasFolderSync: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasLoadAttachment: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasMoveItems: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasOptions: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasOutboxSync: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasPing: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (2)
<com.android.exchange.eas.EasProvision: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasSearch: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasSettings: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasSyncBase: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasSync: void requestSyncForMailboxes(android.accounts.Account,java.util.ArrayList)> (1)
<com.android.exchange.eas.EasPing: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.service.EmailSyncAdapterService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.exchange.service.PingSyncSynchronizer$AccountSyncState: boolean pingEnd(android.accounts.Account)> (1)
<com.android.exchange.eas.EasSyncCalendar: void sendMessage(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.service.CalendarSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.EasAutoDiscover: void requestSyncForMailbox(android.accounts.Account,java.lang.String,long)> (1)
<com.android.exchange.service.EasMeetingResponder: void requestSyncForMailbox(android.accounts.Account,java.lang.String,long)> (1)
<com.android.exchange.service.EasServerConnection: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.server.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (2)
<com.android.server.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (2)
<com.android.server.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (1)
<com.android.exchange.adapter.AbstractSyncParser: void wipe()> (1)
<com.android.email.provider.EmailProvider: boolean restartPushForAccount(android.content.Context,android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String)> (1)
<com.android.email.provider.EmailProvider: boolean restartPushForMailbox(android.content.Context,android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String)> (1)
<com.android.email.provider.EmailProvider: android.database.Cursor uiFolderRefresh(com.android.emailcommon.provider.Mailbox,int)> (2)
<com.android.email.provider.EmailProvider: android.net.Uri uiSaveMessage(com.android.emailcommon.provider.EmailContent$Message,com.android.emailcommon.provider.Mailbox,android.os.Bundle)> (2)
<com.android.email.SecurityPolicy: void clearAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account)> ()
<com.android.email.SecurityPolicy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (1)
<com.android.email.activity.setup.AccountSecurity: void tryAdvanceSecurity(com.android.emailcommon.provider.Account)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.service.ImapService$1: void updateFolderList(long)> (1)
<com.android.email.service.Pop3Service$1: void updateFolderList(long)> (1)
<com.android.email.service.Pop3Service$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasSync: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.eas.EasOperation: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.eas.EasPing: void requestSyncForSyncList(java.util.ArrayList)> (1)
<com.android.exchange.eas.EasFolderSync: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasLoadAttachment: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasMoveItems: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasOptions: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasOutboxSync: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasPing: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasProvision: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasSearch: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasSettings: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasSyncBase: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.eas.EasSync: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.service.AbstractSyncAdapterService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.exchange.service.PingSyncSynchronizer: void pingEnd(long,android.accounts.Account)> (2)
<com.android.exchange.eas.EasSyncCalendar: void cleanup(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.service.CalendarSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.service.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.service.EasAutoDiscover: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (1)
<com.android.exchange.service.EasMeetingResponder: void sendMessage(com.android.emailcommon.provider.Account,com.android.emailcommon.provider.EmailContent$Message)> (2)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.server.content.SyncManager: void scheduleSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle,long,long,boolean)> (8)
<com.android.server.content.SyncStorageEngine: void readAndDeleteLegacyAccountInfoLocked()> (2)
<com.android.email.provider.EmailProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (5)
<com.android.email.provider.EmailProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (5)
<com.android.email.provider.EmailProvider: android.database.Cursor uiFolderLoadMore(com.android.emailcommon.provider.Mailbox)> (1)
<com.android.email.provider.EmailProvider: android.net.Uri uiSaveDraftMessage(long,android.os.Bundle)> (1)
<com.android.email.provider.EmailProvider: android.net.Uri uiSendDraftMessage(long,android.os.Bundle)> (1)
<com.android.email.service.PolicyService$1: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (2)
<com.android.email.activity.setup.AccountSecurity: void access$100(com.android.email.activity.setup.AccountSecurity,com.android.emailcommon.provider.Account)> (1)
<com.android.email.activity.setup.AccountSecurity: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.email.activity.setup.AccountSecurity: void onCreate(android.os.Bundle)> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.email.service.EmailServiceStub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (4)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.service.PingTask: void onCancelled(java.lang.Void)> (1)
<com.android.exchange.eas.EasSyncCollectionTypeBase: void cleanup(android.content.Context,com.android.emailcommon.provider.Account)> (2)
<com.android.exchange.service.EasMeetingResponder: void sendMeetingResponseMail(com.android.emailcommon.mail.PackedString,int)> (1)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$8: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(android.content.SyncAdapterType,int,boolean)> (1)
<com.android.server.content.SyncManager: void onUserStarting(int)> (1)
<com.android.server.content.SyncManager: void scheduleLocalSync(android.accounts.Account,int,int,java.lang.String)> (1)
<com.android.server.content.SyncStorageEngine: void clearAndReadState()> ()
<com.android.server.content.SyncStorageEngine: void <init>(android.content.Context,java.io.File)> (2)
<com.android.email.provider.EmailProvider: int uiUpdateFolder(android.content.Context,android.net.Uri,android.content.ContentValues)> (1)
<com.android.email.provider.EmailProvider: int uiUpdateMessage(android.net.Uri,android.content.ContentValues,boolean)> (2)
<com.android.email.provider.EmailProvider: int pickFolder(android.net.Uri,int,int)> (2)
<com.android.email.provider.EmailProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.email.provider.EmailProvider: void handleMessageUpdateNotifications(android.net.Uri,java.lang.String,android.content.ContentValues)> (1)
<com.android.email.provider.EmailProvider: void notifyWidgets(long)> (1)
<com.android.email.provider.EmailProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<com.android.emailcommon.service.IPolicyService$Stub$Proxy: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> ()
<com.android.emailcommon.service.IPolicyService$Stub: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (2)
<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: void onClick(android.content.DialogInterface,int)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.email.service.ImapService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.service.PingTask: void onCancelled(java.lang.Object)> (1)
<com.android.exchange.eas.EasSyncMail: void cleanup(android.content.Context,com.android.emailcommon.provider.Account)> (1)
<com.android.exchange.service.EasMeetingResponder: void sendResponse(com.android.emailcommon.provider.EmailContent$Message,java.lang.String,int)> (1)
<com.android.server.content.SyncStorageEngine$OnSyncRequestListener: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(java.lang.Object,int,boolean)> (1)
<com.android.server.content.SyncManager: void access$900(com.android.server.content.SyncManager,int)> (1)
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine newTestInstance(android.content.Context)> ()
<com.android.server.content.SyncStorageEngine: void init(android.content.Context)> (1)
<com.android.email.provider.EmailProvider: int uiDeleteMessage(android.net.Uri)> (2)
<com.android.email.provider.EmailProvider: int uiUpdateMessage(android.net.Uri,android.content.ContentValues)> (1)
<com.android.email.provider.EmailProvider: int pickSentFolder(android.net.Uri)> (1)
<com.android.email.provider.EmailProvider: int pickTrashFolder(android.net.Uri)> (1)
<com.android.email.provider.EmailProvider: void notifyUIConversationMailbox(long)> (3)
<com.android.emailcommon.service.IPolicyService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.IPolicyService: void setAccountPolicy(long,com.android.emailcommon.provider.Policy,java.lang.String)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.EasMeetingResponder: void sendMeetingResponse(android.content.Context,long,int)> (1)
<com.android.server.content.SyncManager$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.email.provider.EmailProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.provider.EmailProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (3)
<com.android.email.provider.EmailProvider: void notifyUIConversation(android.net.Uri)> (2)
<com.android.email.service.PolicyService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.PolicyServiceProxy$2: void run()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: void sendMeetingResponse(long,int)> (2)
<com.android.server.content.ContentService: com.android.server.content.SyncManager getSyncManager()> (21)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> ()
<com.android.emailcommon.service.IEmailService$Stub: void sendMeetingResponse(long,int)> (2)
<com.android.server.content.ContentService: void systemReady()> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.IEmailService: void sendMeetingResponse(long,int)> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.EmailServiceProxy$6: void run()> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> ()
<android.content.IContentService$Stub: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (2)
<android.content.IContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (9)
<android.app.ContextImpl$ApplicationContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<android.test.mock.MockContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void enableSync(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.email.activity.setup.AccountSettingsFragment: void saveSettings()> (1)
<com.android.email.provider.DBHelper: void createAccountManagerAccount(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.email.provider.DBHelper: void migrateLegacyAccounts(android.database.sqlite.SQLiteDatabase,android.content.Context)> (2)
<com.android.email.service.AuthenticatorService$Authenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternalForTest()> (1)
<com.android.mail.ui.TurnAutoSyncOnDialog$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onPause()> (1)
<com.android.email.provider.DBHelper: void access$800(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.email.provider.DBHelper: void upgradeFromVersion21ToVersion22(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> ()
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService$Stub$Proxy: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> ()
<android.content.IContentService$Stub: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (2)
<android.content.IContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (5)
<android.app.ContextImpl$ApplicationContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<android.test.mock.MockContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> (1)
<com.android.email.provider.EmailProvider: void updateAccountSyncInterval(long,android.content.ContentValues)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void fixPeriodicSyncs(java.lang.String,java.util.Map)> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncHandlerSynchronizer: void modifyPing(boolean,com.android.emailcommon.provider.Account)> (4)
<com.android.email.service.EmailBroadcastProcessorService: void onAppUpgrade()> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: void pushModify(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$RestartPingsTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncHandlerSynchronizer: void syncComplete(boolean,com.android.emailcommon.provider.Account)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void reconcileAndStartServices()> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void pushModify(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void pushModify(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$RestartPingsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onBootCompleted()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.emailcommon.service.IEmailService: void pushModify(long)> (3)
<com.android.emailcommon.service.EmailServiceProxy$10: void run()> (1)
<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService$Stub$Proxy: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.content.IContentService$Stub: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.content.IContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (5)
<android.app.ContextImpl$ApplicationContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.test.mock.MockContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void removePeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService$Stub$Proxy: void setIsSyncable(android.accounts.Account,java.lang.String,int)> ()
<android.content.IContentService$Stub: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (2)
<android.content.IContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (8)
<android.app.ContextImpl$ApplicationContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService$Stub$Proxy: void setMasterSyncAutomatically(boolean)> ()
<android.content.IContentService$Stub: void setMasterSyncAutomatically(boolean)> (2)
<android.content.IContentService: void setMasterSyncAutomatically(boolean)> (1)
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> (4)
<android.app.ContextImpl$ApplicationContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)> (1)
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()> ()
Permission:android.permission.SET_TIME_ZONE
74 Callers:
<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)> (3)
<android.app.IAlarmManager$Stub$Proxy: void setTimeZone(java.lang.String)> ()
<android.app.IAlarmManager$Stub: void setTimeZone(java.lang.String)> (2)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<android.app.IAlarmManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IAlarmManager: void setTimeZone(java.lang.String)> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.AlarmManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.AlarmManager: void setTimeZone(java.lang.String)> (3)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (3)
<com.android.internal.telephony.MccTable: void setTimezoneFromMccIfNeeded(android.content.Context,int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setAndBroadcastNetworkSetTimeZone(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void revertToNitzTimeZone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String,boolean)> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void fixTimeZone(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void revertToNitzTimeZone()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void access$100(com.android.internal.telephony.gsm.GsmServiceStateTracker)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.ServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void access$100(com.android.internal.telephony.cdma.CdmaServiceStateTracker)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$2: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmServiceStateTracker$3: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> ()
<com.android.internal.telephony.PhoneProxy: void phoneObjectUpdater(int)> (2)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.Phone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.PhoneBase: void updatePhoneObject(int)> (7)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.ServiceStateTracker: void updatePhoneObject()> (6)
<com.android.internal.telephony.sip.SipPhoneBase: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.sip.SipPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updatePhoneObject()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updatePhoneObject()> (3)
Permission:android.permission.DISABLE_KEYGUARD
23 Callers:
<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub$Proxy: void disableKeyguard(android.os.IBinder,java.lang.String)> ()
<android.view.IWindowManager$Stub: void disableKeyguard(android.os.IBinder,java.lang.String)> (2)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void disableKeyguard(android.os.IBinder,java.lang.String)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()> ()
<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager$Stub$Proxy: void reenableKeyguard(android.os.IBinder)> ()
<android.view.IWindowManager$Stub: void reenableKeyguard(android.os.IBinder)> (2)
<android.view.IWindowManager: void reenableKeyguard(android.os.IBinder)> (1)
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()> ()
<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager$Stub$Proxy: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> ()
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (2)
<android.view.IWindowManager: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)> (1)
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)> ()
<com.android.server.wm.WindowManagerService: void dismissKeyguard()> (3)
<android.view.IWindowManager$Stub$Proxy: void dismissKeyguard()> ()
<android.view.IWindowManager$Stub: void dismissKeyguard()> (2)
<com.android.server.am.ActivityStackSupervisor: void dismissKeyguard()> (3)
<android.view.IWindowManager: void dismissKeyguard()> ()
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
Permission:android.permission.RECORD_AUDIO
274 Callers:
<android.speech.RecognitionService: boolean checkPermissions(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService: boolean access$700(android.speech.RecognitionService,android.speech.IRecognitionListener)> (3)
<android.speech.RecognitionService$RecognitionServiceBinder: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.RecognitionService$RecognitionServiceBinder: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void cancel(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void cancel(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void startListening(android.content.Intent,android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub$Proxy: void stopListening(android.speech.IRecognitionListener)> ()
<android.speech.IRecognitionService$Stub: void stopListening(android.speech.IRecognitionListener)> (2)
<android.speech.IRecognitionService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.IRecognitionService: void cancel(android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void startListening(android.content.Intent,android.speech.IRecognitionListener)> (1)
<android.speech.IRecognitionService: void stopListening(android.speech.IRecognitionListener)> (1)
<android.speech.RecognitionService$RecognitionServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.SpeechRecognizer: void handleCancelMessage()> (1)
<android.speech.SpeechRecognizer: void handleStartListening(android.content.Intent)> (1)
<android.speech.SpeechRecognizer: void handleStopMessage()> (1)
<android.speech.SpeechRecognizer: void access$200(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void access$000(android.speech.SpeechRecognizer,android.content.Intent)> (2)
<android.speech.SpeechRecognizer: void access$100(android.speech.SpeechRecognizer)> (2)
<android.speech.SpeechRecognizer: void putMessage(android.os.Message)> (4)
<android.speech.SpeechRecognizer: void cancel()> ()
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)> ()
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> ()
<android.speech.SpeechRecognizer: void stopListening()> ()
<android.media.AudioRecord: void <init>(int,int,int,int,int)> ()
<android.media.MediaRecorder: void setAudioSource(int)> (3)
<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()> (1)
<com.android.camera.VideoModule: void initializeRecorder()> ()
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)> (2)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> (2)
Permission:android.permission.ACCESS_FINE_LOCATION
1029 Callers:
<com.android.server.LocationManagerService: int getAllowedResolutionLevel(int,int)> (2)
<com.android.server.LocationManagerService: int access$500(com.android.server.LocationManagerService,int,int)> (1)
<com.android.server.LocationManagerService: int getCallerAllowedResolutionLevel()> (9)
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<com.android.server.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> ()
<android.location.ILocationManager$Stub: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<android.location.ILocationManager: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)> (2)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)> (1)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)> (3)
<android.location.ILocationManager: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (1)
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.Location getLastLocation()> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> ()
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (3)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: void removeAllGeofences(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)> ()
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)> ()
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)> (11)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.TwilightService$LocationHandler: void retrieveLocation()> (3)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.android.server.location.GeofenceManager: android.location.Location getFreshLocationLocked()> (1)
<com.android.server.TwilightService$LocationHandler: void enableLocationUpdates()> (2)
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)> (3)
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (6)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.android.server.location.GeofenceManager: void updateFences()> (2)
<com.android.server.TwilightService: void registerListener(com.android.server.TwilightService$TwilightListener,android.os.Handler)> (2)
<com.android.server.TwilightService: void systemReady()> (1)
<com.android.server.TwilightService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.FlpHardwareProvider: void <init>(android.content.Context)> (1)
<com.android.server.location.GpsLocationProvider$3: void run()> (1)
<com.android.camera.LocationManager: void startReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)> (1)
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> (6)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<com.android.server.location.GeofenceManager: void access$000(com.android.server.location.GeofenceManager)> (2)
<com.android.server.location.GeofenceManager: void onLocationChanged(android.location.Location)> (1)
<com.android.server.power.DisplayPowerController: void <init>(android.os.Looper,android.content.Context,com.android.server.power.Notifier,com.android.server.LightsService,com.android.server.TwilightService,android.hardware.SensorManager,com.android.server.display.DisplayManagerService,com.android.server.power.SuspendBlocker,com.android.server.power.DisplayBlanker,com.android.server.power.DisplayPowerController$Callbacks,android.os.Handler)> (1)
<com.android.server.UiModeManagerService: void <init>(android.content.Context,com.android.server.TwilightService)> (1)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.server.location.FlpHardwareProvider: com.android.server.location.FlpHardwareProvider getInstance(android.content.Context)> (1)
<com.android.camera.LocationManager: void recordLocation(boolean)> (8)
<com.android.camera.LocationManager: void stopReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)> (1)
<com.android.wallpaper.grass.GrassRS: void stop()> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<android.renderscript.RSSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (8)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.server.location.GeofenceManager: void scheduleUpdateFencesLocked()> (3)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.LocationManagerService: void loadProvidersLocked()> (1)
<com.android.camera.PhotoModule: void initializeFirstTime()> (1)
<com.android.camera.PhotoModule: void initializeSecondTime()> (1)
<com.android.camera.PhotoModule: void onPauseAfterSuper()> (1)
<com.android.camera.PhotoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.camera.VideoModule: void onSharedPreferenceChanged()> (1)
<com.android.camera.WideAnglePanoramaModule: void onPauseBeforeSuper()> (1)
<com.android.server.location.LocationBasedCountryDetector: void stop()> (3)
<com.android.wallpaper.RenderScriptScene: void stop()> (6)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.galaxy4.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.noisefield.NoiseFieldView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.phasebeam.PhaseBeamView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.holospiral.HoloSpiralView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)> (2)
<com.android.server.location.GeofenceManager: void removeFence(java.lang.String)> ()
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.LocationManagerService: void systemRunning()> (1)
<com.android.camera.PhotoModule: void access$700(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onResumeTasks()> (2)
<com.android.camera.CameraModule: void onPauseAfterSuper()> ()
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.PhotoModule: void setLocationPreference(java.lang.String)> (1)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> ()
<com.android.camera.CameraModule: void onResumeAfterSuper()> ()
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.server.location.LocationBasedCountryDetector$1: void onLocationChanged(android.location.Location)> (1)
<com.android.wallpaper.fall.FallRS: void stop()> (1)
<com.android.wallpaper.galaxy.GalaxyRS: void stop()> (1)
<com.android.wallpaper.nexus.NexusRS: void stop()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void destroyRenderer()> (2)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.location.GeofenceManager: void sendIntent(android.app.PendingIntent,android.content.Intent)> (2)
<com.android.camera.PhotoModule: void access$3800(com.android.camera.PhotoModule)> (1)
<com.android.camera.PhotoModule: void onResumeAfterSuper()> (1)
<com.android.camera.PieController: void onSettingChanged(com.android.camera.ListPreference)> (5)
<com.android.camera.PhotoModule: void enableRecordingLocation(boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onDestroy()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceDestroyed(android.view.SurfaceHolder)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (18)
<com.android.server.location.GeofenceManager: void sendIntentEnter(android.app.PendingIntent)> (1)
<com.android.server.location.GeofenceManager: void sendIntentExit(android.app.PendingIntent)> (1)
<com.android.camera.PhotoModule$5: void run()> (1)
<com.android.camera.PhotoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PieController$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.PieController$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PhotoController: void enableRecordingLocation(boolean)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (2)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void reload()> (1)
<com.android.photos.shims.MediaItemsLoader: android.database.Cursor loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: android.database.Cursor loadInBackground()> (1)
<com.android.camera.PhotoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.ui.PieItem$OnClickListener: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.ui.ListPrefSettingPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.TimeIntervalPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.MoreSettingPopup$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.PhotoUI$7: void onCancel(android.content.DialogInterface)> (1)
<com.android.camera.PhotoUI$9: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void <init>(com.android.gallery3d.data.Path,java.util.Comparator,com.android.gallery3d.data.MediaSet[],int)> (2)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (2)
<com.android.photos.shims.MediaItemsLoader: java.lang.Object loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: java.lang.Object loadInBackground()> (1)
<com.android.camera.ui.CountdownTimerPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.PieItem: void performClick()> (1)
<com.android.camera.ui.ListPrefSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.TimeIntervalPopup: void updateInputState()> (1)
<com.android.camera.ui.MoreSettingPopup: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getLocalAlbum(com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (2)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.camera.ui.CountdownTimerPopup: void updateInputState()> (1)
<com.android.camera.ui.PieRenderer$3: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.camera.ui.TimeIntervalPopup: void access$000(com.android.camera.ui.TimeIntervalPopup)> (1)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (3)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet access$400(com.android.gallery3d.data.LocalAlbumSet,com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (1)
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (2)
<com.android.camera.ui.CountdownTimerPopup: void access$000(com.android.camera.ui.CountdownTimerPopup)> (1)
<com.android.camera.ui.TimeIntervalPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (2)
<com.android.gallery3d.app.ActivityState: void resume()> (12)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.FilmstripPage: void onResume()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onResume()> (2)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.util.ArrayList run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> (24)
<com.android.gallery3d.data.MediaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (8)
<com.android.camera.ui.CountdownTimerPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean changeIndex(int)> (2)
<com.android.camera.ui.InLineSettingMenu: boolean changeIndex(int)> (1)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.FilmstripPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState,boolean)> (1)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (8)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (5)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.GalleryActivity: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (3)
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> (3)
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void delete(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void getPanoramaSupport(com.android.gallery3d.data.Path,com.android.gallery3d.data.MediaObject$PanoramaSupportCallback)> ()
<com.android.gallery3d.data.DataManager: void onStitchingResult(android.net.Uri)> (1)
<com.android.gallery3d.data.DataManager: void rotate(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void resolveAlbumPath()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void setChoosenAlbum(android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgetsInternal(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList getSelectedMediaObjects(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean execute(com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.MediaItemsLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.photos.shims.MediaSetLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.gallery3d.data.ClusterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.DataManager: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (5)
<com.android.gallery3d.data.FilterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.UriSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.camera.ui.InLineSettingCheckBox$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (8)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (5)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.GalleryActivity: void startDefaultPage()> (2)
<com.android.gallery3d.app.GalleryActivity: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (3)
<com.android.gallery3d.app.PhotoPage: void switchToGrid()> (3)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (5)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.app.GalleryActivity: void initializeByIntent()> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (9)
<com.android.gallery3d.app.FilmstripPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onGetContent(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computePanoramaSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computeSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: android.content.Intent getIntentBySingleSelectedPath(java.lang.String)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> (10)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void <init>(com.android.gallery3d.data.DataManager,java.lang.String)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void monitorRootPath()> (1)
<com.android.gallery3d.app.AlbumPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean,int)> (3)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingResult(android.net.Uri)> ()
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (8)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.gallery3d.gadget.MediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgets(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList access$100(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean access$700(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.LoaderCompatShim: void deleteItemWithPath(java.lang.Object)> (3)
<com.android.gallery3d.data.ClusterAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> (2)
<com.android.gallery3d.data.ClusterAlbum: void delete()> (2)
<com.android.gallery3d.data.FilterTypeSet: void delete()> (2)
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (9)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$6: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.PhotoPage: void onSingleTapUp(int,int)> (3)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (2)
<com.android.gallery3d.app.DialogPicker: void onResume()> (2)
<com.android.gallery3d.app.GalleryActivity: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumPage: void switchToFilmstrip()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1100(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.SinglePhotoPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onStateResult(int,int,android.content.Intent)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.FilmstripPage: void switchToGrid()> (1)
<com.android.gallery3d.app.PhotoPage: void onAlbumModeSelected(int)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void switchToGrid()> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.GalleryActivity: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumSetPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$600(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$700(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> (3)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context)> (3)
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context,java.lang.String)> ()
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context)> (3)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onCreate()> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> (6)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.UriSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.data.ContentListener: void onContentDirty()> (4)
<com.android.gallery3d.gadget.PhotoAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.photos.AlbumFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.AlbumSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.PhotoSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.gallery3d.data.MediaSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (15)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.MediaObject: void delete()> (22)
<com.android.gallery3d.data.MediaSet: void delete()> (2)
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> (21)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.AlbumPage: void access$1700(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1700(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished(boolean)> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.FilmstripPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.ActivityState: void onStateResult(int,int,android.content.Intent)> (4)
<com.android.gallery3d.app.FilmstripPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.FilmstripPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.GalleryActionBar$OnAlbumModeSelectedListener: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onBackPressed()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onBackPressed()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.photos.AlbumFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.PhotoSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.AlbumSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.MenuExecutor: com.android.gallery3d.data.Path getSingleSelectedPath()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.data.MediaSet: void notifyContentChanged()> (15)
<com.android.gallery3d.gadget.LocalPhotoSource$1: void onChange(boolean)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (16)
<com.android.gallery3d.data.MediaSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (16)
<com.android.gallery3d.data.SecureAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ActionImage: void delete()> (2)
<com.android.gallery3d.data.CameraShortcutImage: void delete()> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbum: void delete()> (2)
<com.android.gallery3d.data.EmptyAlbumImage: void delete()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void delete()> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: void delete()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMediaItem: void delete()> (2)
<com.android.gallery3d.data.MediaItem: void delete()> (3)
<com.android.gallery3d.data.SecureAlbum: void delete()> (2)
<com.android.gallery3d.data.SingleItemAlbum: void delete()> (2)
<com.android.gallery3d.data.SnailAlbum: void delete()> (3)
<com.android.gallery3d.data.SnailItem: void delete()> (2)
<com.android.gallery3d.data.UnlockImage: void delete()> (2)
<com.android.gallery3d.data.UriImage: void delete()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMergeAlbum: void delete()> (2)
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> (7)
<com.android.gallery3d.app.AlbumSetPage: boolean albumShouldOpenInFilmstrip(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem findMediaItem(com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> (1)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (17)
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (16)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.ui.SelectionManager: boolean expandMediaSet(java.util.ArrayList,com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (5)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.gallery3d.app.ManageCachePage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.SlideshowPage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.ui.PopupList$OnPopupItemClickListener: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$500(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(android.view.MenuItem,java.lang.String,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: int setIndex()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.data.ChangeNotifier: void onChange(boolean)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ClusterAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void notifyContentChanged()> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterTypeSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.SecureAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SingleItemAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyContentChanged()> (3)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void notifyContentChanged()> (1)
<com.android.gallery3d.data.ClusterAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (21)
<com.android.gallery3d.data.SecureAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(android.database.Cursor)> (1)
<com.android.gallery3d.data.ClusterAlbum$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.data.FilterTypeSet$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.AlbumPage$1: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumPage: void prepareAnimationBackToFilmstrip(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void prepareSlotContent(int)> (3)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.data.MediaSet,int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterDeleteSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SecureAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SnailAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: int findIndexOfTarget(com.android.gallery3d.app.PhotoDataAdapter$UpdateInfo)> (1)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SecureAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (9)
<com.android.gallery3d.app.GalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (2)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (2)
<com.android.gallery3d.app.GalleryActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (3)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1800(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.PopupList$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.ui.DialogDetailsView: void reloadDetails()> (2)
<com.android.gallery3d.data.ChangeNotifier: void fakeChange()> (2)
<com.android.gallery3d.data.DataManager$NotifyBroker: void onChange(boolean)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ClusterAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void sendRequest(int,com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterTypeSet: void onContentDirty()> (1)
<com.android.gallery3d.data.LocalAlbumSet$1: void run()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyChange()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClustersContents()> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FaceClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SizeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (2)
<com.android.gallery3d.data.TagClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.MediaSet$ItemConsumer: void consume(int,com.android.gallery3d.data.MediaItem)> (3)
<com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage$4: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1200(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setContentWindow(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (16)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.FilmstripPage: void onPause()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onPause()> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (5)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void reloadDetails()> (1)
<com.android.gallery3d.ui.DialogDetailsView: void show()> (1)
<com.android.gallery3d.data.LocalAlbumSet: void fakeChange()> ()
<com.android.gallery3d.data.SecureAlbum: void addMediaItem(boolean,int)> (2)
<com.android.gallery3d.data.FilterDeleteSet: void addDeletion(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void clearDeletion()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void removeDeletion(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.PhotoPage: void notifyScreenNailChanged()> (3)
<com.android.photos.shims.LoaderCompatShim: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.LocalSource: void processMapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,boolean)> (1)
<com.android.gallery3d.ui.PhotoFallbackEffect: void setPositionProvider(com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onLongTap(int)> (2)
<com.android.gallery3d.app.AlbumPage$4: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$DataListener: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setActiveWindow(int,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (13)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (14)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (2)
<com.android.gallery3d.app.DialogPicker: void onPause()> (2)
<com.android.gallery3d.app.GalleryActivity: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.gallery3d.ui.DetailsHelper: void reloadDetails()> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void show()> (1)
<com.android.gallery3d.app.PhotoPage: void addSecureAlbumItem(boolean,int)> (3)
<com.android.gallery3d.data.SecureAlbum: void onStitchingQueued(android.net.Uri)> (1)
<com.android.gallery3d.app.PhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.app.PhotoPage: void onUndoDeleteImage()> (3)
<com.android.gallery3d.app.AppBridge$Server: void notifyScreenNailChanged()> ()
<com.android.gallery3d.app.FilmstripPage: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void notifyScreenNailChanged()> (1)
<com.android.photos.AlbumSetFragment: java.util.ArrayList getSubItemUrisForItem(java.lang.Object)> ()
<com.android.gallery3d.data.LocalSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.app.ManageCachePage$4: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void onVisibleRangeChanged(int,int)> ()
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (12)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (12)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage: void updateUIForCurrentPhoto()> (4)
<com.android.gallery3d.ui.DetailsHelper: void show()> (3)
<com.android.gallery3d.app.AppBridge$Server: void addSecureAlbumItem(boolean,int)> ()
<com.android.gallery3d.app.FilmstripPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingQueued(android.net.Uri)> ()
<com.android.gallery3d.app.FilmstripPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (7)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.gallery3d.app.FilmstripPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (9)
<com.android.gallery3d.app.PhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (4)
<com.android.gallery3d.app.SinglePhotoPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.AlbumPage: void showDetails()> (1)
<com.android.gallery3d.app.AlbumSetPage: void showDetails()> (1)
<com.android.gallery3d.app.PhotoPage: void showDetails()> (3)
<com.android.gallery3d.ui.PhotoView$1: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: void onPictureCenter(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void requestDeferredUpdate()> (3)
<com.android.gallery3d.app.PhotoPage: void refreshHidingMessage()> (6)
<com.android.gallery3d.app.PhotoPage: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void onActionBarWanted()> (3)
<com.android.gallery3d.app.FilmstripPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (11)
<com.android.gallery3d.app.SinglePhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void showDetails()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void showDetails()> (1)
<com.android.gallery3d.ui.GLView$OnClickListener: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.gallery3d.app.FilmstripPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.FilmstripPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.PhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (5)
<com.android.gallery3d.app.PhotoPage: void onFilmModeChanged(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void showBars()> (6)
<com.android.gallery3d.app.SinglePhotoPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.FilmstripPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.FilmstripPage: void onActionBarWanted()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarWanted()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarWanted()> (2)
<com.android.gallery3d.app.FilmstripPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage$6: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView$FullPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.app.FilmstripPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$9: void onConfirmDialogDismissed(boolean)> (1)
<com.android.gallery3d.app.PhotoPage$MyMenuVisibilityListener: void onMenuVisibilityChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void showBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (3)
<com.android.gallery3d.app.PhotoPage: void toggleBars()> (3)
<com.android.gallery3d.app.PhotoPage: void wantBars()> (3)
<com.android.gallery3d.app.SinglePhotoPage: void showBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimationLocked(int)> (1)
<com.android.gallery3d.ui.PhotoView: void captureAnimationDone(int)> (1)
<com.android.gallery3d.ui.PhotoView: void updateActionBar()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.ui.PhotoView$Picture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onConfirmDialogDismissed(boolean)> (2)
<com.android.gallery3d.ui.PhotoView: void setFilmMode(boolean)> (16)
<com.android.gallery3d.app.FilmstripPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$7: void onSystemUiVisibilityChange(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void toggleBars()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void toggleBars()> (1)
<com.android.gallery3d.app.FilmstripPage: void wantBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (6)
<com.android.gallery3d.app.SinglePhotoPage: void wantBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$900(com.android.gallery3d.ui.PhotoView,int)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void updateCurrentIndex(int)> (1)
<com.android.gallery3d.ui.PhotoView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.gallery3d.app.PhotoPage: void transitionFromAlbumPageIfNeeded()> (3)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void resetToFirstPicture()> (1)
<com.android.gallery3d.app.FilmstripPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: boolean switchWithCaptureAnimation(int)> (4)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void moveTo(int)> (2)
<com.android.gallery3d.ui.GLView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (12)
<com.android.gallery3d.app.FilmstripPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.app.AppBridge$Server: boolean switchWithCaptureAnimation(int)> ()
<com.android.gallery3d.app.FilmstripPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.PhotoPage$Model: void moveTo(int)> (2)
<com.android.gallery3d.ui.PhotoView$Model: void moveTo(int)> (5)
<com.android.gallery3d.app.AlbumPage$2: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.PhotoPage$4: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.EdgeView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GLRootView: void onDrawFrameLocked(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.ui.GLView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (13)
<com.android.gallery3d.ui.PreparePageFadeoutTexture: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.SlotView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.UndoBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyScaleListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToFirstImage()> (1)
<com.android.gallery3d.ui.PhotoView: void switchToImage(int)> (7)
<com.android.gallery3d.ui.PhotoView: void switchToNextImage()> (3)
<com.android.gallery3d.ui.PhotoView: void switchToPrevImage()> (2)
<com.android.gallery3d.ui.GLRootView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.app.AlbumPage$2: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.ui.ScrollBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLRoot$OnGLIdleListener: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToNextPicture()> (3)
<com.android.gallery3d.ui.PhotoView: void switchFocus()> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToPrevPicture()> (3)
<com.android.gallery3d.ui.PhotoView$FullPicture: void drawTileView(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.GLRootView$IdleRunner: void run()> (1)
<com.android.gallery3d.ui.PhotoView: boolean snapToNeighborImage()> (2)
<com.android.gallery3d.ui.PhotoView: boolean swipeImages(float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToHitPicture(int,int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$800(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean access$3700(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: void snapback()> (2)
<com.android.gallery3d.ui.PhotoView: boolean access$3500(com.android.gallery3d.ui.PhotoView,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void access$3200(com.android.gallery3d.ui.PhotoView,int,int)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: void onUp()> (1)
<com.android.gallery3d.ui.PhotoView: void access$1500(com.android.gallery3d.ui.PhotoView)> (2)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: void onUp()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.DownUpDetector$DownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void setState(boolean,android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView: boolean onTouch(android.view.MotionEvent)> (1)
<android.hardware.location.GeofenceHardwareImpl: int getAllowedResolutionLevel(int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void checkPermission(int,int,int)> (1)
<android.hardware.location.GeofenceHardwareService: void access$200(android.hardware.location.GeofenceHardwareService,int,int,int)> (6)
<android.hardware.location.GeofenceHardwareService$1: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean removeGeofence(int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.GeofenceHardwareService$1: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean pauseGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean pauseGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean removeGeofence(int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean removeGeofence(int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean resumeGeofence(int,int,int)> (2)
<android.hardware.location.IGeofenceHardware$Stub$Proxy: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> ()
<android.hardware.location.IGeofenceHardware$Stub: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (2)
<android.hardware.location.IGeofenceHardware: boolean addCircularFence(int,int,double,double,double,int,int,int,int,android.hardware.location.IGeofenceHardwareCallback)> (1)
<android.hardware.location.IGeofenceHardware$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.IGeofenceHardware: boolean pauseGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.IGeofenceHardware: boolean removeGeofence(int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean resumeGeofence(int,int,int)> (1)
<android.hardware.location.IGeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.IGeofenceHardwareMonitorCallback)> (1)
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)> ()
<android.hardware.location.GeofenceHardwareService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)> ()
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)> ()
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)> ()
Permission:android.permission.CLEAR_APP_CACHE
21 Callers:
<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> ()
<android.content.pm.IPackageManager$Stub: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (3)
<com.android.server.pm.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ApplicationPackageManager: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)> (1)
<com.android.commands.pm.Pm: void runTrimCaches()> (1)
<com.android.server.DeviceStorageMonitorService: void clearCache()> (1)
<com.android.commands.pm.Pm: void run(java.lang.String[])> (1)
<com.android.server.DeviceStorageMonitorService: void checkMemory(boolean)> (2)
<com.android.commands.pm.Pm: void main(java.lang.String[])> ()
<com.android.server.DeviceStorageMonitorService: void access$000(com.android.server.DeviceStorageMonitorService,boolean)> (1)
<com.android.server.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.pm.PackageManagerService: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void freeStorage(long,android.content.IntentSender)> ()
<android.content.pm.IPackageManager$Stub: void freeStorage(long,android.content.IntentSender)> (2)
<android.content.pm.IPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
<android.app.ApplicationPackageManager: void freeStorage(long,android.content.IntentSender)> (1)
Permission:android.permission.RECEIVE_SMS
175 Callers:
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> ()
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> ()
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> ()
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> (3)
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor getSingleMessageFromIcc(java.lang.String)> (1)
<com.android.providers.telephony.SmsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableGsmBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean enableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.ISms: boolean enableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)> ()
<android.telephony.SmsManager: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableGsmBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.ISms: boolean disableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)> ()
<android.telephony.SmsManager: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCdmaBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCdmaBroadcastRange(int,int)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpSmsTable()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpMessages()> ()
<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.map.BluetoothMapContent: byte[] getSmsMessage(long,int)> (1)
<com.android.bluetooth.map.BluetoothMapContent: byte[] getMessage(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int sendGetMessageRsp(javax.obex.Operation,java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusDeleted(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int setMessageStatus(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.map.BluetoothMapContent: boolean msgListingHasUnread(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int sendMessageListingRsp(javax.obex.Operation,com.android.bluetooth.map.BluetoothMapAppParams,java.lang.String)> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<com.android.bluetooth.map.BluetoothMapContent: int msgListingSize(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageSms(long)> (1)
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void addSmsEntry()> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void handleMsgListChangesSms()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void handleMsgListChanges()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void access$000(com.android.bluetooth.map.BluetoothMapContentObserver)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver$1: void onChange(boolean,android.net.Uri)> (2)
<com.android.bluetooth.map.BluetoothMapContentObserver$1: void onChange(boolean)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void initMsgList()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void registerObserver(com.android.bluetooth.map.BluetoothMnsObexClient,int)> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void handleRegistration(int,int)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void resendPendingMessages()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void access$900(com.android.bluetooth.map.BluetoothMapContentObserver)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver$2: void onServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.bluetooth.map.BluetoothMapContent: com.android.bluetooth.map.BluetoothMapMessageListing msgListing(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (2)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void failPendingMessages()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void deinit()> (1)
<com.android.bluetooth.map.BluetoothMnsObexClient: void shutdown()> (3)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnectMap(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService: void closeService()> (3)
<com.android.bluetooth.map.BluetoothMapService: void stopObexServerSession()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1400(com.android.bluetooth.map.BluetoothMapService)> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1000(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.btservice.ProfileService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService$MapBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<com.android.bluetooth.btservice.ProfileService: void doStop(android.content.Intent)> (8)
<android.bluetooth.IBluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.bluetooth.a2dp.A2dpService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (8)
<com.android.bluetooth.gatt.GattService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStop(android.content.Intent)> (1)
<android.bluetooth.BluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler: boolean handleServiceCategoryProgramData(com.android.internal.telephony.cdma.SmsMessage)> (1)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler: boolean handleSmsMessage(android.os.Message)> (1)
<com.android.internal.telephony.WakeLockStateMachine: boolean handleSmsMessage(android.os.Message)> (1)
<com.android.internal.telephony.WakeLockStateMachine$IdleState: boolean processMessage(android.os.Message)> (1)
Permission:android.permission.ACCESS_WIFI_STATE
224 Callers:
<com.android.server.wifi.WifiService: void enforceAccessPermission()> (15)
<com.android.server.wifi.WifiService: android.net.DhcpInfo getDhcpInfo()> (2)
<com.android.server.wifi.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<com.android.server.wifi.WifiService: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiServiceMessenger()> (2)
<com.android.server.wifi.WifiService: android.os.Messenger getWifiStateMachineMessenger()> (2)
<com.android.server.wifi.WifiService: boolean isMulticastEnabled()> (2)
<com.android.server.wifi.WifiService: boolean isScanAlwaysAvailable()> (2)
<com.android.server.wifi.WifiService: boolean pingSupplicant()> (2)
<com.android.server.wifi.WifiService: int getFrequencyBand()> (2)
<com.android.server.wifi.WifiService: int getWifiApEnabledState()> (2)
<com.android.server.wifi.WifiService: int getWifiEnabledState()> (2)
<com.android.server.wifi.WifiService: java.lang.String getConfigFile()> (2)
<com.android.server.wifi.WifiService: java.util.List getBatchedScanResults(java.lang.String)> (2)
<com.android.server.wifi.WifiService: java.util.List getConfiguredNetworks()> (2)
<com.android.server.wifi.WifiService: java.util.List getScanResults(java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.DhcpInfo getDhcpInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.DhcpInfo getDhcpInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiConfiguration getWifiApConfiguration()> ()
<android.net.wifi.IWifiManager$Stub: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.net.wifi.WifiInfo getConnectionInfo()> ()
<android.net.wifi.IWifiManager$Stub: android.net.wifi.WifiInfo getConnectionInfo()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiServiceMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiServiceMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.Messenger getWifiStateMachineMessenger()> ()
<android.net.wifi.IWifiManager$Stub: android.os.Messenger getWifiStateMachineMessenger()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean isMulticastEnabled()> ()
<android.net.wifi.IWifiManager$Stub: boolean isMulticastEnabled()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean isScanAlwaysAvailable()> ()
<android.net.wifi.IWifiManager$Stub: boolean isScanAlwaysAvailable()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean pingSupplicant()> ()
<android.net.wifi.IWifiManager$Stub: boolean pingSupplicant()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getFrequencyBand()> ()
<android.net.wifi.IWifiManager$Stub: int getFrequencyBand()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiApEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiApEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: int getWifiEnabledState()> ()
<android.net.wifi.IWifiManager$Stub: int getWifiEnabledState()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.lang.String getConfigFile()> ()
<android.net.wifi.IWifiManager$Stub: java.lang.String getConfigFile()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getBatchedScanResults(java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getBatchedScanResults(java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getConfiguredNetworks()> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getConfiguredNetworks()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: java.util.List getScanResults(java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: java.util.List getScanResults(java.lang.String)> (2)
<android.net.wifi.IWifiManager: android.net.DhcpInfo getDhcpInfo()> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> (1)
<android.net.wifi.IWifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (1)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiServiceMessenger()> (1)
<android.net.wifi.IWifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.IWifiManager: boolean isMulticastEnabled()> (1)
<android.net.wifi.IWifiManager: boolean isScanAlwaysAvailable()> (1)
<android.net.wifi.IWifiManager: boolean pingSupplicant()> (1)
<android.net.wifi.IWifiManager: int getFrequencyBand()> (1)
<android.net.wifi.IWifiManager: int getWifiApEnabledState()> (1)
<android.net.wifi.IWifiManager: int getWifiEnabledState()> (1)
<android.net.wifi.IWifiManager: java.lang.String getConfigFile()> (1)
<android.net.wifi.IWifiManager: java.util.List getBatchedScanResults(java.lang.String)> (1)
<android.net.wifi.IWifiManager: java.util.List getConfiguredNetworks()> (1)
<android.net.wifi.IWifiManager: java.util.List getScanResults(java.lang.String)> (1)
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> ()
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager: android.net.wifi.WifiConfiguration getWifiApConfiguration()> ()
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> (4)
<android.net.wifi.WifiManager: android.os.Messenger getWifiServiceMessenger()> (1)
<android.net.wifi.WifiManager: android.os.Messenger getWifiStateMachineMessenger()> (1)
<android.net.wifi.WifiManager: boolean isMulticastEnabled()> ()
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()> ()
<android.net.wifi.WifiManager: boolean pingSupplicant()> ()
<android.net.wifi.WifiManager: int getFrequencyBand()> ()
<android.net.wifi.WifiManager: int getWifiApState()> (1)
<android.net.wifi.WifiManager: int getWifiState()> (3)
<android.net.wifi.WifiManager: java.lang.String getConfigFile()> ()
<android.net.wifi.WifiManager: java.util.List getBatchedScanResults()> ()
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> ()
<android.net.wifi.WifiManager: java.util.List getScanResults()> (1)
<android.net.CaptivePortalTracker: void sendNetworkConditionsBroadcast(boolean,boolean,long,long)> (2)
<android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)> (4)
<android.net.sip.SipAudioCall: boolean isWifiOn()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiManager: void init()> (1)
<android.net.wifi.WifiWatchdogStateMachine: void <init>(android.content.Context)> (1)
<android.net.wifi.WifiManager: boolean isWifiApEnabled()> ()
<android.net.wifi.WifiManager: boolean isWifiEnabled()> ()
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.development.Connectivity$WifiScanReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.CaptivePortalTracker: boolean isCaptivePortal(java.net.InetAddress)> (1)
<android.net.CaptivePortalTracker: void sendFailedCaptivePortalCheckBroadcast(long)> (2)
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfoUnchecked(android.net.NetworkState)> (1)
<com.android.server.net.NetworkPolicyManagerService: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()> (5)
<com.android.server.net.NetworkStatsService: void updateIfacesLocked()> (1)
<android.net.sip.SipAudioCall: void startAudioInternal()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)> (1)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<com.android.development.Connectivity: void access$2200(com.android.development.Connectivity)> (1)
<android.net.CaptivePortalTracker: boolean access$2600(android.net.CaptivePortalTracker,java.net.InetAddress)> (1)
<android.net.CaptivePortalTracker: java.net.InetAddress lookupHost(java.lang.String)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: boolean isNetworkMetered(android.net.NetworkState)> ()
<android.net.INetworkPolicyManager$Stub: boolean isNetworkMetered(android.net.NetworkState)> (2)
<com.android.server.net.NetworkPolicyManagerService: void access$1300(com.android.server.net.NetworkPolicyManagerService)> (2)
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)> (2)
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<android.net.sip.SipAudioCall: void startAudio()> (4)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker: java.net.InetAddress access$2500(android.net.CaptivePortalTracker,java.lang.String)> (1)
<android.net.INetworkPolicyManager: boolean isNetworkMetered(android.net.NetworkState)> (1)
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.net.NetworkPolicyManagerService$10: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1200(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkPolicy)> (1)
<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1000(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkTemplate,int)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.INetworkPolicyManager$Stub: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<android.net.sip.SipAudioCall: void transferToNewSession()> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEstablished(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallHeld(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void separate()> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.ConnectivityService: boolean isNetworkMeteredUnchecked(int)> (2)
<com.android.server.net.NetworkPolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void access$1500(com.android.server.net.NetworkPolicyManagerService)> (1)
<com.android.server.net.NetworkPolicyManagerService$8: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.sip.SipAudioCall: void access$800(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.Connection: void separate()> ()
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.sip.SipAudioCall$1: void onCallEstablished(android.net.sip.SipSession,java.lang.String)> (1)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.development.Connectivity: void access$3800(com.android.development.Connectivity)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: void enter()> (36)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<android.net.wifi.p2p.WifiP2pService: void enforceAccessPermission()> (1)
<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.IWifiP2pManager: android.os.Messenger getMessenger()> (1)
<android.net.wifi.p2p.IWifiP2pManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.os.Messenger getMessenger()> (2)
<android.net.wifi.p2p.WifiP2pService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> (1)
<android.net.wifi.WifiStateMachine$InitialState: void enter()> (1)
<com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)> (1)
<com.android.server.display.WifiDisplayAdapter$1: void run()> (1)
Permission:android.permission.WRITE_CALL_LOG
2 Callers:
<android.provider.CallLog$Calls: void removeExpiredEntries(android.content.Context)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> ()
Permission:android.permission.GET_ACCOUNTS
557 Callers:
<com.android.server.accounts.AccountManagerService: void checkReadAccountsPermission()> (4)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String,int)> (3)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(int)> (3)
<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (4)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (2)
<com.android.server.accounts.AccountManagerService$4: void run()> (1)
<com.android.server.content.SyncManager: void doDatabaseCleanup()> (2)
<com.android.server.content.SyncManager: void onUserStarting(int)> (1)
<android.accounts.IAccountManager$Stub$Proxy: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> ()
<android.accounts.IAccountManager$Stub: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (2)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (2)
<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void onUserStarted(android.content.Intent)> (1)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (2)
<com.android.server.accounts.AccountManagerService$Session: void run()> (1)
<com.android.server.content.SyncManager: void access$2000(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void updateRunningAccounts()> (4)
<com.android.server.content.SyncManager: void access$900(com.android.server.content.SyncManager,int)> (1)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])> (1)
<android.accounts.IAccountManager: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])> (1)
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)> (1)
<android.accounts.IAccountManager$Stub$Proxy: android.accounts.Account[] getAccounts(java.lang.String)> ()
<android.accounts.IAccountManager$Stub: android.accounts.Account[] getAccounts(java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void access$200(com.android.server.accounts.AccountManagerService,android.content.Intent)> (1)
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (1)
<android.accounts.IAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (1)
<com.android.server.accounts.AccountManagerService$Session: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (12)
<com.android.server.content.SyncManager$SyncHandler: void onBootCompleted()> (1)
<com.android.server.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void onUserRemoved(int)> (1)
<com.android.server.content.SyncManager: void onUserStopping(int)> (1)
<com.android.server.content.SyncManager$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$3: void doWork()> (1)
<android.accounts.AccountManager$2: void doWork()> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> (2)
<android.accounts.IAccountManager: android.accounts.Account[] getAccounts(java.lang.String)> (1)
<com.android.server.accounts.AccountManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (4)
<com.android.server.accounts.AccountManagerService$10: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$3: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$4: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$5: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$6: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$7: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$8: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$9: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$RemoveAccountSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.accounts.AccountManagerService$TestFeaturesSession: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void access$800(com.android.server.content.SyncManager,int)> (2)
<com.android.server.content.SyncManager: void access$1000(com.android.server.content.SyncManager,int)> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (15)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String,android.os.UserHandle)> (1)
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> (10)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> (1)
<android.accounts.ChooseTypeAndAccountActivity: java.util.ArrayList getAcceptableAccountChoices(android.accounts.AccountManager)> (2)
<android.accounts.ChooseTypeAndAccountActivity: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)> (1)
<com.android.server.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (5)
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: android.accounts.Account[] getAccounts(android.content.Context)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void enableSync(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<com.android.development.SyncAdapterDriver: void startSyncSelected(android.view.View)> ()
<com.android.email.provider.AccountReconciler: java.util.List getAllAmAccounts(android.content.Context)> (1)
<com.android.email.provider.DBHelper: boolean isAccountPresent(android.accounts.AccountManager,java.lang.String,java.lang.String)> (1)
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void fixPeriodicSyncs(java.lang.String,java.util.Map)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void updateAccountManagerAccountsOfType(java.lang.String,java.util.Map)> (1)
<com.android.exchange.CalendarSyncEnabler: java.lang.String enableEasCalendarSyncInternalForTest()> (1)
<com.android.exchange.ExchangeBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.exchange.provider.ExchangeDirectoryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.inputmethod.research.ResearchLogger: java.lang.String getAccountName()> (1)
<android.accounts.AccountManager$13: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void run()> (2)
<com.android.browser.provider.BrowserProvider2: int updateInTransaction(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[],boolean)> (1)
<com.android.calendar.CalendarController: void refreshCalendars()> (1)
<com.android.calendar.CalendarSettingsActivity$1: void run()> (1)
<com.android.calendar.CalendarSettingsActivity: void onBuildHeaders(java.util.List)> (1)
<com.android.email.service.AttachmentDownloadService$AccountManagerStub: int getNumberOfAccounts()> (1)
<com.android.inputmethod.latin.personalization.AccountUtils: android.accounts.Account[] getAccounts(android.content.Context)> (2)
<android.accounts.ChooseTypeAndAccountActivity: void onCreate(android.os.Bundle)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void onResume()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<com.android.server.content.SyncManager: void sendSyncAlarmMessage()> (1)
<com.android.server.content.SyncManager: void sendCheckAlarmsMessage()> (4)
<com.android.server.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,int,java.lang.String)> (1)
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$4: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context)> (2)
<com.android.email.provider.DBHelper: void createAccountManagerAccount(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onAppUpgrade()> (2)
<com.android.exchange.CalendarSyncEnabler: void enableEasCalendarSync()> ()
<com.android.inputmethod.research.ResearchLogger: void sendFeedback(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.development.AccountsTester: void onStart()> (1)
<com.android.browser.AccountsChangedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.email.service.AttachmentDownloadService: boolean canPrefetchForAccount(com.android.emailcommon.provider.Account,java.io.File)> (1)
<com.android.inputmethod.latin.personalization.AccountUtils: java.util.List getDeviceAccountsEmailAddresses(android.content.Context)> (1)
<com.android.inputmethod.latin.personalization.AccountUtils: java.util.List getDeviceAccountsWithDomain(android.content.Context,java.lang.String)> ()
<com.android.server.content.SyncManager: void access$1200(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void access$100(com.android.server.content.SyncManager)> (3)
<com.android.server.content.SyncManager: void scheduleSyncOperation(com.android.server.content.SyncOperation)> (6)
<com.android.server.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> (3)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (4)
<com.android.browser.Controller: void doStart(android.os.Bundle,android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void reconcileAndStartServices()> (2)
<com.android.email.service.EmailServiceStub: void deleteAccountPIMData(java.lang.String)> (5)
<com.android.email.provider.DBHelper: void migrateLegacyAccounts(android.database.sqlite.SQLiteDatabase,android.content.Context)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.FeedbackFragment: void onClick(android.view.View)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDeviceAccountsEmailAddresses()> (2)
<com.android.server.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$10: void onStatusChanged(int)> (2)
<com.android.server.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.server.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,com.android.server.content.SyncManager$ActiveSyncContext)> (4)
<com.android.server.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,com.android.server.content.SyncOperation)> (1)
<com.android.server.content.SyncManager: void scheduleSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle,long,long,boolean)> (8)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManager$Future2Task start()> (2)
<com.android.browser.CrashRecoveryHandler: void startRecovery(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onBootCompleted()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(java.lang.String)> ()
<com.android.emailcommon.service.IEmailService$Stub: void deleteAccountPIMData(java.lang.String)> (2)
<com.android.emailcommon.service.IEmailService: void deleteAccountPIMData(java.lang.String)> (2)
<com.android.email.service.ImapService$1: void deleteAccountPIMData(java.lang.String)> (1)
<com.android.email.service.Pop3Service$1: void deleteAccountPIMData(java.lang.String)> (1)
<com.android.email.provider.DBHelper: void access$800(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.email.provider.DBHelper: void upgradeFromVersion21ToVersion22(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDeviceAccountsEmailAddresses()> (1)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager: void sendSyncFinishedOrCanceledMessage(com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,int,java.lang.String)> (2)
<com.android.server.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$8: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(android.content.SyncAdapterType,int,boolean)> (1)
<com.android.server.content.SyncManager: void scheduleLocalSync(android.accounts.Account,int,int,java.lang.String)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<com.android.browser.Controller: void start(android.content.Intent)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.EmailServiceProxy$7: void run()> (1)
<com.android.email.provider.EmailProvider: void deleteAccountData(android.content.Context,long)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.server.content.SyncManager: void access$1400(com.android.server.content.SyncManager,com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncStorageEngine$OnSyncRequestListener: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(java.lang.Object,int,boolean)> (1)
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal(android.content.Context,java.util.List,java.util.List,boolean)> (1)
<com.android.email.service.EmailServiceUtils: void updateAccountManagerType(android.content.Context,android.accounts.Account,java.util.Map)> (1)
<com.android.browser.ActivityController: void start(android.content.Intent)> (1)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.provider.EmailProvider: int uiDeleteAccount(android.net.Uri)> (1)
<com.android.email.provider.EmailProvider: int uiDeleteAccountData(android.net.Uri)> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$13: void run()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void writeBinaryDictionary()> (9)
<com.android.server.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<com.android.server.content.SyncStorageEngine: void requestSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (3)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.provider.EmailProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (10)
<com.android.inputmethod.latin.personalization.DecayingExpandableBinaryDictionaryBase: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.personalization.PersonalizationDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.personalization.PersonalizationPredictionDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.personalization.UserHistoryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void writeBinaryDictionary()> (1)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<com.android.server.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (2)
<com.android.server.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (2)
<com.android.server.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$12: void run()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$14: void run()> (1)
<com.android.inputmethod.latin.personalization.DecayingExpandableBinaryDictionaryBase: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.personalization.PersonalizationDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.personalization.PersonalizationPredictionDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.personalization.UserHistoryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.server.content.SyncStorageEngine: void readAndDeleteLegacyAccountInfoLocked()> (2)
<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<com.android.server.content.SyncStorageEngine: void clearAndReadState()> ()
<com.android.server.content.SyncStorageEngine: void <init>(android.content.Context,java.io.File)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine newTestInstance(android.content.Context)> ()
<com.android.server.content.SyncStorageEngine: void init(android.content.Context)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.calendar.AllInOneActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.email.service.EmailServiceUtils: android.accounts.AccountManagerFuture setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.browser.AutologinBar: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> ()
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.server.content.ContentService: com.android.server.content.SyncManager getSyncManager()> (21)
<com.android.server.content.ContentService: void systemReady()> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.browser.DataController$DataControllerHandler: void doUpdateVisitedHistory(java.lang.String)> (1)
<com.android.browser.DataController$DataControllerHandler: void handleMessage(com.android.browser.DataController$DCMessage)> (1)
<com.android.browser.DataController$DataControllerHandler: void run()> (2)
<com.android.browser.DataController: void <init>(android.content.Context)> (1)
<com.android.browser.DataController: com.android.browser.DataController getInstance(android.content.Context)> (6)
<com.android.browser.Controller: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.Controller: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.Tab: void deleteThumbnail()> (3)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView,android.os.Bundle)> (3)
<com.android.browser.Tab: void persistThumbnail()> (1)
<com.android.browser.Tab: void restoreState(android.os.Bundle)> (1)
<com.android.browser.WebViewController: void doUpdateVisitedHistory(com.android.browser.Tab,boolean)> (1)
<com.android.browser.WebViewController: void onReceivedTitle(com.android.browser.Tab,java.lang.String)> (1)
<com.android.browser.TabControl: void saveState(android.os.Bundle)> (1)
<com.android.browser.Tab: void removeFromTree()> (2)
<com.android.browser.Tab: void updateShouldCaptureThumbnails()> (3)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(android.os.Bundle,boolean)> (2)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.os.Bundle)> (1)
<com.android.browser.Tab: void <init>(com.android.browser.WebViewController,android.webkit.WebView)> (1)
<com.android.browser.Tab: void capture()> (5)
<com.android.browser.Tab$2: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> (1)
<com.android.browser.Tab$3: void onReceivedTitle(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.Controller: android.os.Bundle createSaveState()> (2)
<com.android.browser.TabControl: boolean removeTab(com.android.browser.Tab)> (2)
<com.android.browser.TabControl: void removeParentChildRelationShips()> (1)
<com.android.browser.Tab: void setController(com.android.browser.WebViewController)> (1)
<com.android.browser.XLargeUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab(boolean)> (2)
<com.android.browser.TabControl: void restoreState(android.os.Bundle,long,boolean,boolean)> (1)
<com.android.browser.Preloader$PreloaderSession: void <init>(com.android.browser.Preloader,java.lang.String)> (1)
<com.android.browser.PhoneUi: void showNavScreen()> (2)
<com.android.browser.PieControl: void buildTabs()> (1)
<com.android.browser.Tab: void putInBackground()> (4)
<com.android.browser.Tab: void postCapture()> (2)
<com.android.browser.Controller: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.CrashRecoveryHandler$2: void run()> (1)
<com.android.browser.Controller: void closeCurrentTab(boolean)> (2)
<com.android.browser.Controller: void removeTab(com.android.browser.Tab)> (3)
<com.android.browser.Controller: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.browser.TabControl: void addPreloadedTab(com.android.browser.Tab)> (1)
<com.android.browser.BaseUi: void setUseQuickControls(boolean)> (3)
<com.android.browser.XLargeUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.Controller: com.android.browser.Tab createNewTab(boolean,boolean,boolean)> (2)
<com.android.browser.TabControl: com.android.browser.Tab createNewTab()> ()
<com.android.browser.Controller: void onPreloginFinished(android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: com.android.browser.Preloader$PreloaderSession getSession(java.lang.String)> (2)
<com.android.browser.PhoneUi: void toggleNavScreen()> (1)
<com.android.browser.PieControl: void onClick(android.view.View)> (1)
<com.android.browser.PieControl: void access$000(com.android.browser.PieControl)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab,boolean)> (2)
<com.android.browser.Tab: void onNewPicture(android.webkit.WebView,android.graphics.Picture)> (1)
<com.android.browser.ActivityController: void onSaveInstanceState(android.os.Bundle)> (2)
<com.android.browser.Controller: void closeCurrentTab()> (4)
<com.android.browser.Controller: void goBackOnePageOrQuit()> (2)
<com.android.browser.Controller: void closeOtherTabs()> (2)
<com.android.browser.Controller: void closeTab(com.android.browser.Tab)> (6)
<com.android.browser.Controller: void onDestroy()> (1)
<com.android.browser.Controller: com.android.browser.Tab showPreloadedTab(com.android.browser.IntentHandler$UrlData)> (1)
<com.android.browser.PhoneUi: void setUseQuickControls(boolean)> (2)
<com.android.browser.UI: void setUseQuickControls(boolean)> (1)
<com.android.browser.BaseUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.Controller: com.android.browser.Tab openTab(com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean,com.android.browser.Tab)> (2)
<com.android.browser.Controller: void access$100(com.android.browser.Controller,android.os.Bundle,android.content.Intent,long,boolean)> (1)
<com.android.browser.Preloader: void cancelSearchBoxPreload(java.lang.String)> (1)
<com.android.browser.Preloader: void handlePreloadRequest(java.lang.String,java.lang.String,java.util.Map,java.lang.String)> (1)
<com.android.browser.NavigationBarPhone: void onClick(android.view.View)> (1)
<com.android.browser.PieControl$1: void onLayout(int,int,boolean)> (1)
<com.android.browser.TabControl: boolean setCurrentTab(com.android.browser.Tab)> (3)
<com.android.browser.TabControl: void recreateWebView(com.android.browser.Tab)> (1)
<com.android.browser.BrowserActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.browser.BrowserActivity: void onSaveInstanceState(android.os.Bundle)> (1)
<com.android.browser.Controller: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.browser.Controller: void closeEmptyTab()> (2)
<com.android.browser.UiController: void closeCurrentTab()> (3)
<com.android.browser.Controller: void onBackKey()> (1)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.UiController: void closeOtherTabs()> ()
<com.android.browser.UiController: void closeTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: void closeTab(com.android.browser.Tab)> (1)
<com.android.browser.ActivityController: void onDestroy()> (1)
<com.android.browser.PhoneUi: void <init>(android.app.Activity,com.android.browser.UiController)> (2)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.IntentHandler: void onNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (5)
<com.android.browser.Controller: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (5)
<com.android.browser.Controller$2: void run()> (1)
<com.android.browser.PreloadRequestReceiver: void handlePreload(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarBase: void onClick(android.view.View)> (3)
<com.android.browser.view.PieMenu$PieView$OnLayoutListener: void onLayout(int,int,boolean)> (1)
<com.android.browser.Controller: void setActiveTab(com.android.browser.Tab)> (7)
<com.android.browser.Controller: void reuseTab(com.android.browser.Tab,com.android.browser.IntentHandler$UrlData)> (2)
<com.android.browser.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UiController: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.UrlHandler: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler: boolean startActivityForUrl(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.NavScreen: void onCloseTab(com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void closeTab()> (1)
<com.android.browser.Controller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.browser.Tab$3: void onCloseWindow(android.webkit.WebView)> (1)
<com.android.browser.BrowserActivity: void onDestroy()> (1)
<com.android.browser.Controller: void handleNewIntent(android.content.Intent)> (2)
<com.android.browser.Controller: com.android.browser.Tab openIncognitoTab()> (3)
<com.android.browser.Controller: com.android.browser.Tab openTabToHomePage()> (4)
<com.android.browser.UiController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> (1)
<com.android.browser.UrlHandler: boolean handleMenuClick(com.android.browser.Tab,java.lang.String)> (2)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,boolean,boolean,boolean)> ()
<com.android.browser.Controller$7: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller$9: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: com.android.browser.Tab openTab(java.lang.String,com.android.browser.Tab,boolean,boolean)> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NavigationBarTablet: void onClick(android.view.View)> (1)
<com.android.browser.view.BasePieView: void layout(int,int,boolean,float,int)> (3)
<com.android.browser.Controller: boolean switchToTab(com.android.browser.Tab)> (8)
<com.android.browser.UiController: void setActiveTab(com.android.browser.Tab)> (2)
<com.android.browser.BrowserActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.ActivityController: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.NavigationBarPhone: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.NavScreen: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.browser.Controller: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.String)> (1)
<com.android.browser.NavScreen: void access$000(com.android.browser.NavScreen,com.android.browser.Tab)> (1)
<com.android.browser.TabBar$TabView: void onClick(android.view.View)> (1)
<com.android.browser.ActivityController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.ActivityController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.UiController: void handleNewIntent(android.content.Intent)> (1)
<com.android.browser.Controller: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.UiController: com.android.browser.Tab openIncognitoTab()> (1)
<com.android.browser.UiController: com.android.browser.Tab openTabToHomePage()> (2)
<com.android.browser.NavScreen: void openNewTab()> (1)
<com.android.browser.Tab$3: void createWindow(boolean,android.os.Message)> (2)
<com.android.browser.view.PieListView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieMenu$PieView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.view.PieStackView: void layout(int,int,boolean,float,int)> (1)
<com.android.browser.UiController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.WebViewController: boolean switchToTab(com.android.browser.Tab)> (2)
<com.android.browser.NavScreen: void switchToTab(com.android.browser.Tab)> (1)
<com.android.browser.PhoneUi: void hideNavScreen(int,boolean)> (5)
<com.android.browser.BrowserActivity: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.WebViewController: boolean shouldOverrideUrlLoading(com.android.browser.Tab,android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.UrlHandler$RLZTask: void onPostExecute(java.lang.Object)> (1)
<com.android.browser.NavScreen$1: void onRemovePosition(int)> (1)
<com.android.browser.BrowserActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: void onAction(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.TabBar: void onClick(android.view.View)> (1)
<com.android.browser.NavScreen: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> (1)
<com.android.browser.Tab$3: void access$1700(com.android.browser.Tab$3,boolean,android.os.Message)> (1)
<com.android.browser.view.PieMenu: void layoutPieView(com.android.browser.view.PieMenu$PieView,int,int,float)> (1)
<com.android.browser.PieControl$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.Tab$3: void onRequestFocus(android.webkit.WebView)> (1)
<com.android.browser.NavScreen: void access$100(com.android.browser.NavScreen,com.android.browser.Tab)> (2)
<com.android.browser.NavScreen$2: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int,boolean)> (2)
<com.android.browser.PhoneUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.PhoneUi: void showWeb(boolean)> (1)
<com.android.browser.Tab$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> (1)
<com.android.browser.NavTabScroller$OnRemoveListener: void onRemovePosition(int)> (1)
<com.android.browser.NavigationBarPhone: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.NavigationBarTablet: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.UrlInputView$UrlInputListener: void onAction(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.Tab$3$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavScreen$TabAdapter$1: void onClick(android.view.View)> (1)
<com.android.browser.NavTabScroller$OnLayoutListener: void onLayout(int,int,int,int)> (1)
<com.android.browser.NavScreen: void close(int)> (2)
<com.android.browser.BaseUi: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BaseUi: void showWeb(boolean)> (3)
<com.android.browser.NavTabScroller$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.browser.UrlInputView: void finishInput(java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.browser.NavTabScroller: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.PhoneUi: boolean onBackKey()> (1)
<com.android.browser.UI: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.XLargeUi: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.UI: void showWeb(boolean)> (2)
<com.android.browser.XLargeUi: void showWeb(boolean)> (1)
<com.android.browser.UrlInputView: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.UrlInputView: boolean onKeyDown(int,android.view.KeyEvent)> (4)
<com.android.browser.UrlInputView: void onSelect(java.lang.String,int,java.lang.String)> (2)
<com.android.browser.view.ScrollerView: void onLayout(boolean,int,int,int,int)> (4)
<com.android.browser.BaseUi: boolean onBackKey()> (3)
<com.android.browser.SuggestionsAdapter$CompletionListener: void onSelect(java.lang.String,int,java.lang.String)> (1)
<com.android.browser.UrlInputView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.UI: boolean onBackKey()> (1)
<com.android.browser.XLargeUi: boolean onBackKey()> (1)
<com.android.browser.SuggestionsAdapter: void onClick(android.view.View)> (1)
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (2)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> (1)
<com.android.browser.BrowserSettings: void clearHistory()> (1)
<com.android.browser.BrowserYesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.internal.preference.YesNoPreference: void onDialogClosed(boolean)> (2)
<com.android.browser.DataController$DataControllerHandler: void doUpdateHistoryTitle(java.lang.String,java.lang.String)> (1)
<com.android.browser.Bookmarks: void addBookmark(android.content.Context,boolean,java.lang.String,java.lang.String,android.graphics.Bitmap,long)> (1)
<com.android.browser.AddBookmarkPage$SaveBookmarkRunnable: void run()> (1)
<com.android.browser.AccountsChangedReceiver$DeleteRemovedAccounts: void delete(android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage: android.net.Uri getUriForFolder(long)> (2)
<com.android.browser.AddBookmarkPage: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.BreadCrumbView$Controller: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (2)
<com.android.browser.BreadCrumbView: void notifyController()> (3)
<com.android.browser.view.BookmarkExpandableView: void onTop(com.android.browser.BreadCrumbView,int,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage: void descendInto(java.lang.String,long)> (2)
<com.android.browser.BreadCrumbView: void onClick(android.view.View)> (1)
<com.android.browser.BreadCrumbView: void pop(boolean)> (3)
<com.android.browser.AddBookmarkPage: void completeOrCancelFolderNaming(boolean)> (3)
<com.android.browser.AddBookmarkPage: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.BreadCrumbView: void clear()> (1)
<com.android.browser.BreadCrumbView: void popView()> (1)
<com.android.browser.AddBookmarkPage: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.AddBookmarkPage: void onClick(android.view.View)> (1)
<com.android.browser.AddBookmarkPage: void setupTopCrumb()> (2)
<com.android.browser.AddBookmarkPage: void onRootFolderFound(long)> (2)
<com.android.browser.AddBookmarkPage: void switchToDefaultView(boolean)> (1)
<com.android.browser.AddBookmarkPage: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.browser.AddBookmarkPage: void setAccount(java.lang.String,java.lang.String)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,com.android.browser.AddBookmarkPage$EditBookmarkInfo)> (1)
<com.android.browser.AddBookmarkPage$1: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.browser.DownloadTouchIcon: void storeIcon(android.graphics.Bitmap)> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Void doInBackground(java.lang.String[])> (1)
<com.android.browser.DownloadTouchIcon: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<com.android.browser.Controller$PruneThumbnails: void run()> (1)
<com.android.browser.DataController$DataControllerHandler: void doSaveThumbnail(com.android.browser.Tab)> (1)
<com.android.browser.AddBookmarkPage: long addFolderToCurrent(java.lang.String)> (1)
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> (1)
<com.android.browser.BrowserBackupAgent: void addBookmark(com.android.browser.BrowserBackupAgent$Bookmark)> (1)
<com.android.browser.BrowserBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (1)
<com.android.browser.Bookmarks: void removeFromBookmarks(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (3)
<com.android.browser.BrowserBookmarksPage: boolean handleContextItem(int,int,int)> (1)
<com.android.browser.BrowserHistoryPage: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.browser.HistoryItem: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.browser.BrowserBookmarksPage: boolean onContextItemSelected(android.view.MenuItem)> (2)
<com.android.browser.BrowserBookmarksPage$2: boolean onMenuItemClick(android.view.MenuItem)> (1)
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.Bookmarks$1: void updateImages(android.content.ContentResolver,java.lang.String,android.content.ContentValues)> (1)
<com.android.browser.Bookmarks$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Bookmarks$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.Controller$10: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.Controller$10: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BookmarkUtils$1$1: void run()> (1)
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (3)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<com.android.browser.BrowserHistoryPage$ClearHistoryTask: void run()> (2)
<com.android.browser.BrowserHistoryPage$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.BookmarkUtils: android.net.Uri getBookmarksUri(android.content.Context)> (5)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Void doInBackground(android.content.ContentValues[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Integer doInBackground(java.lang.Long[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: android.database.Cursor doInBackground(java.lang.Void[])> (1)
<com.android.browser.DataController$DataControllerHandler: void doQueryBookmarkStatus(java.lang.String,java.lang.Object)> (1)
<com.android.browser.AddBookmarkPage$UpdateBookmarkTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$LookupBookmarkCount: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.BrowserBookmarksPage$OpenAllInTabsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.browser.provider.BrowserProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> (1)
<com.android.browser.IntentHandler$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.browser.IntentHandler$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
Permission:android.permission.ACCESS_NETWORK_STATE
1353 Callers:
<com.android.server.ConnectivityService: void enforceAccessPermission()> (16)
<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)> (5)
<com.android.server.ConnectivityService: android.net.LinkQualityInfo getActiveLinkQualityInfo()> (2)
<com.android.server.ConnectivityService: android.net.LinkQualityInfo[] getAllLinkQualityInfo()> (2)
<com.android.server.ConnectivityService: android.net.LinkQualityInfo getLinkQualityInfo(int)> (2)
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()> (3)
<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoUnfiltered()> (1)
<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()> (4)
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)> (3)
<com.android.server.ConnectivityService: android.net.NetworkInfo getProvisioningNetworkInfo()> (1)
<com.android.server.ConnectivityService: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> (2)
<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()> (2)
<com.android.server.ConnectivityService: boolean getMobileDataEnabled()> (2)
<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()> (2)
<com.android.server.ConnectivityService: boolean isNetworkSupported(int)> (4)
<com.android.server.ConnectivityService: int getNetworkPreference()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getLinkProperties(int)> ()
<android.net.IConnectivityManager$Stub: android.net.LinkProperties getLinkProperties(int)> (2)
<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()> (4)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkQualityInfo getActiveLinkQualityInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.LinkQualityInfo getActiveLinkQualityInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkQualityInfo[] getAllLinkQualityInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.LinkQualityInfo[] getAllLinkQualityInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkQualityInfo getLinkQualityInfo(int)> ()
<android.net.IConnectivityManager$Stub: android.net.LinkQualityInfo getLinkQualityInfo(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getActiveNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: void handleConnectionFailure(android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void handleStateChangedLocked()> (4)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo[] getAllNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo[] getAllNetworkInfo()> (2)
<com.android.server.ConnectivityService$CheckMp: void printNetworkInfo()> ()
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getNetworkInfo(int)> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getNetworkInfo(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.NetworkState[] getAllNetworkState()> ()
<android.net.IConnectivityManager$Stub: android.net.NetworkState[] getAllNetworkState()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean getMobileDataEnabled()> ()
<android.net.IConnectivityManager$Stub: boolean getMobileDataEnabled()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isActiveNetworkMetered()> ()
<android.net.IConnectivityManager$Stub: boolean isActiveNetworkMetered()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isNetworkSupported(int)> ()
<android.net.IConnectivityManager$Stub: boolean isNetworkSupported(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int getNetworkPreference()> ()
<android.net.IConnectivityManager$Stub: int getNetworkPreference()> (2)
<android.net.IConnectivityManager: android.net.LinkProperties getLinkProperties(int)> (2)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: android.net.LinkProperties getActiveLinkProperties()> ()
<android.net.IConnectivityManager$Stub: android.net.LinkProperties getActiveLinkProperties()> (2)
<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<android.net.IConnectivityManager: android.net.LinkQualityInfo getActiveLinkQualityInfo()> (1)
<android.net.IConnectivityManager: android.net.LinkQualityInfo[] getAllLinkQualityInfo()> (1)
<android.net.IConnectivityManager: android.net.LinkQualityInfo getLinkQualityInfo(int)> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (2)
<com.android.server.ConnectivityService: void access$1200(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void initLocked()> (2)
<com.android.server.net.LockdownVpnTracker: void onNetworkInfoChanged(android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void onVpnStateChanged(android.net.NetworkInfo)> (1)
<com.android.server.net.LockdownVpnTracker: void reset()> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (2)
<android.net.IConnectivityManager: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> (1)
<android.net.IConnectivityManager: android.net.NetworkState[] getAllNetworkState()> (2)
<android.net.IConnectivityManager: boolean getMobileDataEnabled()> (1)
<android.net.IConnectivityManager: boolean isActiveNetworkMetered()> (1)
<android.net.IConnectivityManager: boolean isNetworkSupported(int)> (1)
<android.net.IConnectivityManager: int getNetworkPreference()> (1)
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> (2)
<android.net.IConnectivityManager$Stub$Proxy: void startLegacyVpn(com.android.internal.net.VpnProfile)> ()
<android.net.IConnectivityManager$Stub: void startLegacyVpn(com.android.internal.net.VpnProfile)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.net.ConnectivityManager: android.net.LinkQualityInfo getActiveLinkQualityInfo()> ()
<android.net.ConnectivityManager: android.net.LinkQualityInfo[] getAllLinkQualityInfo()> ()
<android.net.ConnectivityManager: android.net.LinkQualityInfo getLinkQualityInfo(int)> ()
<android.net.CaptivePortalTracker: boolean isActiveNetwork(android.net.NetworkInfo)> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> (26)
<com.android.server.net.LockdownVpnTracker: void init()> (1)
<com.android.server.net.LockdownVpnTracker$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> ()
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> (3)
<android.net.ConnectivityManager: android.net.NetworkInfo getProvisioningOrActiveNetworkInfo()> ()
<android.net.ConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()> ()
<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesLocked()> (5)
<com.android.server.net.NetworkStatsService: void updateIfacesLocked()> (1)
<android.net.ConnectivityManager: boolean getMobileDataEnabled()> ()
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()> (4)
<android.net.ConnectivityManager: boolean isNetworkSupported(int)> (3)
<android.net.ConnectivityManager: int getNetworkPreference()> ()
<android.net.DnsPinger: android.net.LinkProperties getCurrentLinkProperties()> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<android.net.ConnectivityManager: android.net.LinkProperties getActiveLinkProperties()> ()
<android.net.IConnectivityManager: void startLegacyVpn(com.android.internal.net.VpnProfile)> ()
<android.net.CaptivePortalTracker: boolean access$1200(android.net.CaptivePortalTracker,android.net.NetworkInfo)> (2)
<android.net.http.RequestQueue: void setProxyConfig()> (2)
<android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompatGingerbread: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompatHoneycombMR2: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.browser.BrowserSettings: void updateConnectionType()> (3)
<com.android.browser.NetworkStateHandler: void <init>(android.app.Activity,com.android.browser.Controller)> (1)
<com.android.browser.PreloadRequestReceiver: boolean isOnWifi(android.content.Context)> (1)
<com.android.browser.search.OpenSearchSearchEngine: android.net.NetworkInfo getActiveNetworkInfo(android.content.Context)> (1)
<com.android.emailcommon.provider.Account: boolean isAutomaticSyncDisabledByRoaming(android.content.Context,long)> (1)
<com.android.email.EmailConnectivityManager: boolean hasConnectivity()> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.net.ConnectivityManager)> (2)
<com.android.email.EmailConnectivityManager: void waitForConnectivity()> (1)
<com.android.email.provider.RefreshStatusMonitor: boolean isConnected()> (1)
<com.android.emailsync.AbstractSyncService: boolean hasConnectivity()> (3)
<com.android.emailsync.SyncManager: void waitForConnectivity()> (2)
<com.android.ex.photo.fragments.PhotoViewFragment$InternetStateBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.ex.photo.fragments.PhotoViewFragment: void onResume()> (1)
<com.android.gallery3d.util.ReverseGeocoder: android.location.Address lookupAddress(double,double,boolean)> (3)
<com.android.inputmethod.compat.ConnectivityManagerCompatUtils: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void refreshNetworkState()> (3)
<com.android.inputmethod.latin.SubtypeSwitcher: void initialize(android.content.Context)> (1)
<com.android.mail.utils.AttachmentUtils: boolean canDownloadAttachment(android.content.Context,com.android.mail.providers.Attachment)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: android.net.NetworkInfo getActiveNetworkInfo()> (1)
<com.android.server.content.SyncManager: boolean readDataConnectionState()> (1)
<com.android.server.NetworkTimeUpdateService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.sip.SipService: void onConnectivityChanged(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)> (1)
<android.support.v4.net.ConnectivityManagerCompat: android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent)> ()
<com.android.inputmethod.research.Uploader: boolean hasWifiConnection()> (1)
<com.android.server.location.GpsLocationProvider$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1300(com.android.server.net.NetworkPolicyManagerService)> (2)
<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyLocked(android.net.NetworkPolicy)> (2)
<com.android.server.net.NetworkPolicyManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)> (2)
<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<android.support.v4.net.ConnectivityManagerCompatJellyBean: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.dreams.phototable.PicasaSource: java.io.InputStream getStream(com.android.dreams.phototable.PhotoSource$ImageData,int)> (1)
<com.android.dreams.phototable.PicasaSource: java.util.Collection findImages(int)> (1)
<com.android.server.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context)> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.RIL: void <init>(android.content.Context,int,int)> (1)
<android.net.DnsPinger: java.util.List getDnsList()> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: boolean processMessage(android.os.Message)> (1)
<android.net.http.RequestQueue: void access$300(android.net.http.RequestQueue)> (1)
<android.net.http.RequestQueue: void enablePlatformNotifications()> ()
<android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompat$GingerbreadConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<android.support.v4.net.ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.NetworkStateHandler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NetworkStateHandler: void onResume()> (1)
<com.android.browser.Controller: void <init>(android.app.Activity)> (1)
<com.android.browser.PreloadRequestReceiver: boolean isPreloadEnabledOnCurrentNetwork(android.content.Context)> (1)
<com.android.browser.search.OpenSearchSearchEngine: boolean isNetworkConnected(android.content.Context)> (1)
<com.android.email.Preferences: boolean shouldShowRequireManualSync(android.content.Context,com.android.emailcommon.provider.Account)> ()
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType(android.content.Context)> (1)
<com.android.email.EmailConnectivityManager: int getActiveNetworkType()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.email.provider.RefreshStatusMonitor: boolean access$300(com.android.email.provider.RefreshStatusMonitor)> (1)
<com.android.exchange.EasAccountService: boolean hasConnectivity()> (2)
<com.android.exchange.EasOutboxService: boolean hasConnectivity()> (2)
<com.android.exchange.EasSyncService: boolean hasConnectivity()> (2)
<com.android.emailsync.SyncManager: void run()> (2)
<com.android.exchange.ExchangeService: void waitForConnectivity()> (1)
<com.android.gallery3d.ui.DetailsAddressResolver$AddressLookupJob: android.location.Address run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void installIfNeverRequested(android.content.Context,java.lang.String,java.lang.String,boolean)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void access$000(com.android.inputmethod.dictionarypack.DictionarySettingsFragment)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void onResume()> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void init(android.content.Context)> (2)
<com.android.mail.browse.MessageAttachmentTile: void thumbnailLoadFailed()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: boolean isNetworkConnected()> (1)
<com.android.server.content.SyncManager: boolean access$500(com.android.server.content.SyncManager)> (8)
<com.android.server.sip.SipService: void access$1700(com.android.server.sip.SipService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: boolean updateLockdownVpn()> (4)
<com.android.inputmethod.research.Uploader: boolean isConvenientToUpload()> (1)
<com.android.server.net.NetworkPolicyManagerService$10: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1200(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkPolicy)> (1)
<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyLocked()> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1000(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkTemplate,int)> (1)
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<android.net.INetworkPolicyManager$Stub: void setNetworkPolicies(android.net.NetworkPolicy[])> (2)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<android.support.v4.net.ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> (1)
<com.android.dreams.phototable.PhotoSource: java.io.InputStream getStream(com.android.dreams.phototable.PhotoSource$ImageData,int)> (1)
<com.android.dreams.phototable.PhotoSource: java.util.Collection findImages(int)> (3)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<com.android.server.content.SyncManager: void sendSyncAlarmMessage()> (1)
<com.android.server.content.SyncManager: void sendCheckAlarmsMessage()> (4)
<com.android.server.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,int,java.lang.String)> (1)
<com.android.server.wifi.WifiService: void checkAndStartWifi()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: void enter()> (36)
<android.net.http.RequestQueue$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.support.v4.net.ConnectivityManagerCompat: boolean isActiveNetworkMetered(android.net.ConnectivityManager)> ()
<com.android.browser.Controller: void onResume()> (1)
<com.android.browser.BrowserActivity: com.android.browser.Controller createController()> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.search.OpenSearchSearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long,int)> (3)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.email.provider.RefreshStatusMonitor$RemoveRefreshStatusRunnable: void run()> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.gallery3d.ui.DetailsAddressResolver$AddressLookupJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: java.util.Collection getDictionaryWordListsForLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void onClickAllow(android.view.View)> ()
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$4: void run()> (1)
<com.android.inputmethod.latin.LatinIME: void onCreate()> (2)
<com.android.inputmethod.latin.settings.SettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.mail.ui.AttachmentTile: void thumbnailLoadFailed()> (3)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult query(java.lang.String)> (2)
<com.android.server.content.SyncManager$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager: void sendSyncFinishedOrCanceledMessage(com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.sip.SipService$ConnectivityReceiver$1: void run()> (1)
<android.net.IConnectivityManager$Stub$Proxy: boolean updateLockdownVpn()> ()
<android.net.IConnectivityManager$Stub: boolean updateLockdownVpn()> (2)
<com.android.server.ConnectivityService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.ConnectivityService: void systemReady()> (1)
<com.android.inputmethod.research.UploaderService: void onHandleIntent(android.content.Intent)> (1)
<com.android.server.net.NetworkPolicyManagerService: void access$1500(com.android.server.net.NetworkPolicyManagerService)> (1)
<com.android.server.net.NetworkPolicyManagerService$8: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.INetworkPolicyManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.dreams.phototable.PhotoSource$ImageData: java.io.InputStream getStream(int)> (2)
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (6)
<com.android.dreams.phototable.PhotoSourcePlexor: java.util.Collection findImages(int)> (1)
<com.android.dreams.phototable.PhotoSource: void fillQueue()> (6)
<com.android.server.content.SyncManager: void access$1200(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void access$100(com.android.server.content.SyncManager)> (3)
<com.android.server.content.SyncManager: void onUserStarting(int)> (1)
<com.android.server.content.SyncManager: void scheduleSyncOperation(com.android.server.content.SyncOperation)> (6)
<com.android.server.content.SyncManager: void updateRunningAccounts()> (4)
<com.android.server.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> (3)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> ()
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.browser.ActivityController: void onResume()> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.search.SearchEngine: android.database.Cursor getSuggestions(android.content.Context,java.lang.String)> (2)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> ()
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> ()
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.inputmethodcommon.InputMethodSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.mail.compose.ComposeAttachmentTile: void thumbnailLoadFailed()> (1)
<com.android.mail.ui.AttachmentBitmapHolder: void thumbnailLoadFailed()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (1)
<com.android.server.content.SyncManager: void access$1400(com.android.server.content.SyncManager,com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<android.net.IConnectivityManager: boolean updateLockdownVpn()> (1)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.server.net.NetworkPolicyManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> ()
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (8)
<com.android.dreams.phototable.PhotoSourcePlexor: java.io.InputStream getStream(com.android.dreams.phototable.PhotoSource$ImageData,int)> (1)
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (2)
<com.android.dreams.phototable.PhotoTable$PhotoLaunchTask: android.view.View doInBackground(java.lang.Void[])> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap next(android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.CursorPhotoSource: void fillQueue()> (1)
<com.android.dreams.phototable.LocalSource: void fillQueue()> (2)
<com.android.dreams.phototable.PhotoSourcePlexor: void fillQueue()> (1)
<com.android.dreams.phototable.PicasaSource: void fillQueue()> (2)
<com.android.dreams.phototable.StockSource: void fillQueue()> (2)
<com.android.server.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$10: void onStatusChanged(int)> (2)
<com.android.server.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void access$900(com.android.server.content.SyncManager,int)> (1)
<com.android.server.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.server.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,com.android.server.content.SyncManager$ActiveSyncContext)> (4)
<com.android.server.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,com.android.server.content.SyncOperation)> (1)
<com.android.server.content.SyncManager: void scheduleSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle,long,long,boolean)> (8)
<com.android.server.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void onUserRemoved(int)> (1)
<com.android.server.content.SyncManager: void onUserStopping(int)> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.browser.provider.BrowserProvider: android.database.Cursor doSuggestQuery(java.lang.String,java.lang.String[],boolean)> (1)
<com.android.browser.SuggestionsAdapter$SuggestCursor: void runQuery(java.lang.CharSequence)> (2)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.mail.ui.ThumbnailLoadTask: void onPostExecute(android.graphics.Bitmap)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (2)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> (2)
<com.android.server.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<android.net.ConnectivityManager: boolean updateLockdownVpn()> ()
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (6)
<com.android.dreams.phototable.PhotoSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (6)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap load(com.android.dreams.phototable.PhotoSource$ImageData,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoCarousel$PhotoLoadTask: android.graphics.Bitmap doInBackground(java.lang.Void[])> (1)
<com.android.dreams.phototable.PhotoTable$PhotoLaunchTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dreams.phototable.LocalSource: void <init>(android.content.Context,android.content.SharedPreferences)> (3)
<com.android.dreams.phototable.PicasaSource: void <init>(android.content.Context,android.content.SharedPreferences)> (3)
<com.android.dreams.phototable.StockSource: void <init>(android.content.Context,android.content.SharedPreferences)> (1)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.server.content.SyncManager$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,int,java.lang.String)> (2)
<com.android.server.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$8: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(android.content.SyncAdapterType,int,boolean)> (1)
<com.android.server.content.SyncManager: void scheduleLocalSync(android.accounts.Account,int,int,java.lang.String)> (1)
<com.android.server.content.SyncManager: void access$800(com.android.server.content.SyncManager,int)> (2)
<com.android.server.content.SyncManager: void access$1000(com.android.server.content.SyncManager,int)> (1)
<com.android.browser.provider.BrowserProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.browser.SuggestionsAdapter$CursorSource: void runQuery(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SlowFilterTask: java.util.List doInBackground(java.lang.CharSequence[])> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.mail.ui.ThumbnailLoadTask: void onPostExecute(java.lang.Object)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int)> (3)
<com.android.quicksearchbox.google.GoogleSource: com.android.quicksearchbox.SourceResult queryInternal(java.lang.String)> ()
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoTable$LoadNaturalSiblingTask: android.view.View doInBackground(android.view.View[])> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap naturalNext(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.CursorPhotoSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.LocalSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoSourcePlexor: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PicasaSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.StockSource: android.graphics.Bitmap naturalPrevious(android.graphics.Bitmap,android.graphics.BitmapFactory$Options,int,int)> (1)
<com.android.dreams.phototable.PhotoCarousel$PhotoLoadTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dreams.phototable.CursorPhotoSource: void <init>(android.content.Context,android.content.SharedPreferences)> (3)
<com.android.dreams.phototable.PhotoSourcePlexor: void <init>(android.content.Context,android.content.SharedPreferences)> (4)
<com.android.dreams.phototable.PhotoSource: void <init>(android.content.Context,android.content.SharedPreferences)> (2)
<com.android.server.content.SyncStorageEngine$OnSyncRequestListener: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(java.lang.Object,int,boolean)> (1)
<com.android.browser.SuggestionsAdapter$SuggestFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.browser.SuggestionsAdapter$SlowFilterTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestionsExternal(java.lang.String)> (1)
<com.android.quicksearchbox.google.GoogleSuggestionProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.quicksearchbox.google.AbstractGoogleSource: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int)> (2)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int)> (1)
<com.android.quicksearchbox.Source: com.android.quicksearchbox.SourceResult getSuggestions(java.lang.String,int)> ()
<com.android.dreams.phototable.PhotoTable$LoadNaturalSiblingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.dreams.phototable.FlipperDreamSettings: void init()> (3)
<com.android.dreams.phototable.PhotoCarousel: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.dreams.phototable.PhotoTable: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.server.content.SyncStorageEngine: void requestSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (3)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (18)
<com.android.quicksearchbox.google.GoogleSuggestClient: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int)> (1)
<com.android.quicksearchbox.SuggestionCursorProvider: com.android.quicksearchbox.SuggestionCursor getSuggestions(java.lang.String,int)> (1)
<com.android.dreams.phototable.FlipperDreamSettings: void onCreate(android.os.Bundle)> (2)
<com.android.dreams.phototable.FlipperDreamSettings: void onResume()> (2)
<com.android.dreams.phototable.PhotoTableDreamSettings: void init()> (2)
<com.android.server.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (2)
<com.android.server.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (2)
<com.android.server.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (1)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (2)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void reload()> (1)
<com.android.photos.shims.MediaItemsLoader: android.database.Cursor loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: android.database.Cursor loadInBackground()> (1)
<com.android.quicksearchbox.QueryTask: void run()> (2)
<com.android.dreams.phototable.PhotoTableDreamSettings: void onCreate(android.os.Bundle)> (2)
<com.android.dreams.phototable.PhotoTableDreamSettings: void onResume()> (2)
<com.android.server.content.SyncStorageEngine: void readAndDeleteLegacyAccountInfoLocked()> (2)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void <init>(com.android.gallery3d.data.Path,java.util.Comparator,com.android.gallery3d.data.MediaSet[],int)> (2)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (2)
<com.android.photos.shims.MediaItemsLoader: java.lang.Object loadInBackground()> (1)
<com.android.photos.shims.MediaSetLoader: java.lang.Object loadInBackground()> (1)
<com.android.quicksearchbox.util.NamedTask: void run()> (1)
<com.android.server.content.SyncStorageEngine: void clearAndReadState()> ()
<com.android.server.content.SyncStorageEngine: void <init>(android.content.Context,java.io.File)> (2)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet getLocalAlbum(com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (2)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker: void loop()> (1)
<com.android.server.content.SyncStorageEngine: com.android.server.content.SyncStorageEngine newTestInstance(android.content.Context)> ()
<com.android.server.content.SyncStorageEngine: void init(android.content.Context)> (1)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (3)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaSet access$400(com.android.gallery3d.data.LocalAlbumSet,com.android.gallery3d.data.DataManager,int,com.android.gallery3d.data.Path,int,java.lang.String)> (1)
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (2)
<com.android.quicksearchbox.util.SingleThreadNamedTaskExecutor$Worker: void run()> (1)
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.gallery3d.app.ActivityState: void resume()> (12)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.FilmstripPage: void onResume()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onResume()> (2)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.util.ArrayList run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(com.android.gallery3d.data.Path)> (24)
<com.android.gallery3d.data.MediaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (8)
<com.android.server.content.ContentService: com.android.server.content.SyncManager getSyncManager()> (21)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.FilmstripPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState,boolean)> (1)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (8)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (5)
<com.android.gallery3d.data.LocalAlbumSet$AlbumsLoader: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.GalleryActivity: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (3)
<com.android.gallery3d.data.DataManager: android.net.Uri getContentUri(com.android.gallery3d.data.Path)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaObject getMediaObject(java.lang.String)> (5)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(com.android.gallery3d.data.Path)> (3)
<com.android.gallery3d.data.DataManager: int getMediaType(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.DataManager: int getSupportedOperations(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void delete(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: void getPanoramaSupport(com.android.gallery3d.data.Path,com.android.gallery3d.data.MediaObject$PanoramaSupportCallback)> ()
<com.android.gallery3d.data.DataManager: void onStitchingResult(android.net.Uri)> (1)
<com.android.gallery3d.data.DataManager: void rotate(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void resolveAlbumPath()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void setChoosenAlbum(android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgetsInternal(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList getSelectedMediaObjects(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean execute(com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.MediaItemsLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.photos.shims.MediaSetLoader: void deleteItemWithPath(java.lang.Object)> (1)
<com.android.gallery3d.data.ClusterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.DataManager: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (5)
<com.android.gallery3d.data.FilterSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.UriSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.picasasource.PicasaSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.server.content.ContentService: void systemReady()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (8)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (5)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.GalleryActivity: void startDefaultPage()> (2)
<com.android.gallery3d.app.GalleryActivity: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (3)
<com.android.gallery3d.app.PhotoPage: void switchToGrid()> (3)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (5)
<com.android.gallery3d.app.GalleryActivity: void initializeByIntent()> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (9)
<com.android.gallery3d.app.FilmstripPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onCreate(android.os.Bundle,android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onGetContent(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computePanoramaSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent computeSharingIntent(com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: android.content.Intent getIntentBySingleSelectedPath(java.lang.String)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet getMediaSet(java.lang.String)> (10)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void <init>(com.android.gallery3d.data.DataManager,java.lang.String)> (1)
<com.android.gallery3d.gadget.MediaSetSource: void monitorRootPath()> (1)
<com.android.gallery3d.app.AlbumPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean,int)> (3)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingResult(android.net.Uri)> ()
<com.android.gallery3d.data.MediaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (8)
<com.android.gallery3d.gadget.MediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.gadget.WidgetConfigure: void onActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.onetimeinitializer.GalleryWidgetMigrator: void migrateGalleryWidgets(android.content.Context)> (1)
<com.android.gallery3d.ui.ActionModeHandler: java.util.ArrayList access$100(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor: boolean access$700(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.data.DataManager,com.android.gallery3d.util.ThreadPool$JobContext,int,com.android.gallery3d.data.Path)> (1)
<com.android.photos.shims.LoaderCompatShim: void deleteItemWithPath(java.lang.Object)> (3)
<com.android.gallery3d.data.ClusterAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItemFromPath(java.util.ArrayList,int,int,com.android.gallery3d.data.DataManager)> (2)
<com.android.gallery3d.data.ClusterAlbum: void delete()> (2)
<com.android.gallery3d.data.FilterTypeSet: void delete()> (2)
<com.android.gallery3d.data.SecureAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (9)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$6: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.PhotoPage: void onSingleTapUp(int,int)> (3)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (2)
<com.android.gallery3d.app.DialogPicker: void onResume()> (2)
<com.android.gallery3d.app.GalleryActivity: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumPage: void switchToFilmstrip()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1100(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.gallery3d.app.FilmstripPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.SinglePhotoPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.PhotoPage: void onStateResult(int,int,android.content.Intent)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void setCurrentPhotoByIntent(android.content.Intent)> (1)
<com.android.gallery3d.app.FilmstripPage: void switchToGrid()> (1)
<com.android.gallery3d.app.PhotoPage: void onAlbumModeSelected(int)> (3)
<com.android.gallery3d.app.SinglePhotoPage: void switchToGrid()> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (3)
<com.android.gallery3d.app.FilmstripPage: void onUpPressed()> (1)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (4)
<com.android.gallery3d.app.SinglePhotoPage: void onUpPressed()> (1)
<com.android.gallery3d.app.GalleryActivity: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.AlbumPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumSetPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$600(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.ActionModeHandler: android.content.Intent access$700(com.android.gallery3d.ui.ActionModeHandler,com.android.gallery3d.util.ThreadPool$JobContext,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.app.AlbumSetPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.ManageCachePage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeData(android.os.Bundle)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.MediaSet[] getMediaSetsFromString(java.lang.String)> (3)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.photos.shims.MediaItemsLoader: void <init>(android.content.Context)> (3)
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context,java.lang.String)> ()
<com.android.photos.shims.MediaSetLoader: void <init>(android.content.Context)> (3)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onCreate()> (1)
<com.android.gallery3d.ui.SelectionManager: java.util.ArrayList getSelected(boolean)> (6)
<com.android.gallery3d.data.ClusterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.DataManager: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SecureSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.SnailSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.UriSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.picasasource.PicasaSource: com.android.gallery3d.data.Path getDefaultSetOf(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.ContentListener: void onContentDirty()> (4)
<com.android.gallery3d.gadget.PhotoAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.photos.AlbumFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.AlbumSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.photos.PhotoSetFragment: void deleteItemWithPath(java.lang.Object)> ()
<com.android.gallery3d.data.MediaSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (15)
<com.android.gallery3d.data.ClusterAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.MediaObject: void delete()> (22)
<com.android.gallery3d.data.MediaSet: void delete()> (2)
<com.android.gallery3d.data.MediaSet: java.util.ArrayList getMediaItem(int,int)> (21)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.AlbumPage: void access$1700(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1700(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished(boolean)> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished(boolean)> (2)
<com.android.gallery3d.app.FilmstripPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onSingleTapUp(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.ActivityState: void onStateResult(int,int,android.content.Intent)> (4)
<com.android.gallery3d.app.FilmstripPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onStateResult(int,int,android.content.Intent)> (2)
<com.android.gallery3d.app.FilmstripPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.GalleryActionBar$OnAlbumModeSelectedListener: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onAlbumModeSelected(int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onBackPressed()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onBackPressed()> (2)
<com.android.gallery3d.ui.ActionModeHandler: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.data.ComboSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.data.FilterSource: com.android.gallery3d.data.MediaObject createMediaObject(com.android.gallery3d.data.Path)> (1)
<com.android.photos.AlbumFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.PhotoSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.photos.AlbumSetFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyDetailsSource: int setIndex()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.ui.MenuExecutor: com.android.gallery3d.data.Path getSingleSelectedPath()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener,boolean,boolean)> (2)
<com.android.gallery3d.data.MediaSet: void notifyContentChanged()> (15)
<com.android.gallery3d.gadget.LocalPhotoSource$1: void onChange(boolean)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: void onContentDirty()> (1)
<com.android.gallery3d.ui.ActionModeHandler$2: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (16)
<com.android.gallery3d.data.MediaSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (16)
<com.android.gallery3d.data.SecureAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ActionImage: void delete()> (2)
<com.android.gallery3d.data.CameraShortcutImage: void delete()> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void delete()> (2)
<com.android.gallery3d.data.ComboAlbum: void delete()> (2)
<com.android.gallery3d.data.EmptyAlbumImage: void delete()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void delete()> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: void delete()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMediaItem: void delete()> (2)
<com.android.gallery3d.data.MediaItem: void delete()> (3)
<com.android.gallery3d.data.SecureAlbum: void delete()> (2)
<com.android.gallery3d.data.SingleItemAlbum: void delete()> (2)
<com.android.gallery3d.data.SnailAlbum: void delete()> (3)
<com.android.gallery3d.data.SnailItem: void delete()> (2)
<com.android.gallery3d.data.UnlockImage: void delete()> (2)
<com.android.gallery3d.data.UriImage: void delete()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void delete()> (2)
<com.android.gallery3d.data.LocalMergeAlbum: void delete()> (2)
<com.android.gallery3d.app.AlbumDataLoader: com.android.gallery3d.data.MediaItem get(int)> (7)
<com.android.gallery3d.app.AlbumSetPage: boolean albumShouldOpenInFilmstrip(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem findMediaItem(com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: java.util.ArrayList getMediaItem(int,int)> (2)
<com.android.gallery3d.data.FilterEmptyPromptSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum$FetchCache: com.android.gallery3d.data.MediaItem getItem(int)> (1)
<com.android.gallery3d.data.MediaSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (17)
<com.android.gallery3d.data.MediaSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (16)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.ui.SelectionManager: boolean expandMediaSet(java.util.ArrayList,com.android.gallery3d.data.MediaSet,int)> (2)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (5)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished(boolean)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.gallery3d.app.ManageCachePage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.SlideshowPage: void onStateResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)> (1)
<com.android.gallery3d.ui.PopupList$OnPopupItemClickListener: boolean onPopupItemClick(int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$500(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onMenuClicked(android.view.MenuItem,java.lang.String,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (2)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: int setIndex()> (1)
<com.android.gallery3d.ui.MenuExecutor: void startAction(int,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.data.ChangeNotifier: void onChange(boolean)> (2)
<com.android.gallery3d.data.ClusterAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ClusterAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.ComboAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterDeleteSet: void notifyContentChanged()> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.FilterTypeSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbumSet: void notifyContentChanged()> (2)
<com.android.gallery3d.data.LocalAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void notifyContentChanged()> (2)
<com.android.gallery3d.data.SecureAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SingleItemAlbum: void notifyContentChanged()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyContentChanged()> (3)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void notifyContentChanged()> (1)
<com.android.gallery3d.data.ClusterAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.MediaSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (21)
<com.android.gallery3d.data.SecureAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(android.database.Cursor)> (1)
<com.android.gallery3d.data.ClusterAlbum$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.data.FilterTypeSet$2: void consume(int,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.AlbumPage$1: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.AlbumPage$MyDetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumPage: void prepareAnimationBackToFilmstrip(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void prepareSlotContent(int)> (3)
<com.android.gallery3d.app.SlideshowPage: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.data.MediaSet,int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: java.util.ArrayList getMediaItem(int,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.ComboAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterDeleteSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.FilterTypeSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SecureAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SingleItemAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.data.SnailAlbum: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: com.android.gallery3d.data.MediaItem getCoverMediaItem()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: int findIndexOfTarget(com.android.gallery3d.app.PhotoDataAdapter$UpdateInfo)> (1)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.ComboAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterTypeSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SecureAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SingleItemAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.SnailAlbum: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (2)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: int getIndexOfItem(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (9)
<com.android.gallery3d.app.GalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (2)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (2)
<com.android.gallery3d.app.GalleryActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (3)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1800(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onSingleTapUp(float,float)> (1)
<com.android.gallery3d.ui.PopupList$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.ui.DialogDetailsView: void reloadDetails()> (2)
<com.android.gallery3d.data.ChangeNotifier: void fakeChange()> (2)
<com.android.gallery3d.data.DataManager$NotifyBroker: void onChange(boolean)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ClusterAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbumSet: void onContentDirty()> (1)
<com.android.gallery3d.data.ComboAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void sendRequest(int,com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.data.FilterEmptyPromptSet: void onContentDirty()> (1)
<com.android.gallery3d.data.FilterTypeSet: void onContentDirty()> (1)
<com.android.gallery3d.data.LocalAlbumSet$1: void run()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void onContentDirty()> (1)
<com.android.gallery3d.data.SnailAlbum: void notifyChange()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClustersContents()> (1)
<com.android.gallery3d.data.ClusterAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.ComboAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FaceClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterEmptyPromptSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.FilterTypeSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.LocalMergeAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SecureAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SingleItemAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.data.SizeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.SnailAlbum: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (2)
<com.android.gallery3d.data.TagClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.gallery3d.picasasource.PicasaSource$EmptyAlbumSet: void enumerateTotalMediaItems(com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.photos.shims.MediaSetLoader: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.MediaSet$ItemConsumer: void consume(int,com.android.gallery3d.data.MediaItem)> (3)
<com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider: int getItemIndex(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsSource: com.android.gallery3d.data.MediaDetails getDetails()> (1)
<com.android.gallery3d.app.AlbumPage$4: void onLongTap(int)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1200(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setContentWindow(int,int)> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: com.android.gallery3d.data.MediaItem getMediaItem(int)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: int findItemIndex(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (16)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.FilmstripPage: void onPause()> (2)
<com.android.gallery3d.app.SinglePhotoPage: void onPause()> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (5)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void reloadDetails()> (1)
<com.android.gallery3d.ui.DialogDetailsView: void show()> (1)
<com.android.gallery3d.data.LocalAlbumSet: void fakeChange()> ()
<com.android.gallery3d.data.SecureAlbum: void addMediaItem(boolean,int)> (2)
<com.android.gallery3d.data.FilterDeleteSet: void addDeletion(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.data.FilterDeleteSet: void clearDeletion()> (1)
<com.android.gallery3d.data.FilterDeleteSet: void removeDeletion(com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.PhotoPage: void notifyScreenNailChanged()> (3)
<com.android.photos.shims.LoaderCompatShim: java.util.ArrayList urisForSubItems(java.lang.Object)> (1)
<com.android.gallery3d.data.LocalSource: void processMapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer,boolean)> (1)
<com.android.gallery3d.ui.PhotoFallbackEffect: void setPositionProvider(com.android.gallery3d.ui.PhotoFallbackEffect$PositionProvider)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onLongTap(int)> (2)
<com.android.gallery3d.app.AlbumPage$4: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$DataListener: void onContentChanged(int)> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void resume()> (1)
<com.android.gallery3d.ui.AlbumSlidingWindow: void setActiveWindow(int,int)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (13)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (14)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (2)
<com.android.gallery3d.app.DialogPicker: void onPause()> (2)
<com.android.gallery3d.app.GalleryActivity: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.gallery3d.ui.DetailsHelper: void reloadDetails()> (1)
<com.android.gallery3d.ui.DetailsHelper$DetailsViewContainer: void show()> (1)
<com.android.gallery3d.app.PhotoPage: void addSecureAlbumItem(boolean,int)> (3)
<com.android.gallery3d.data.SecureAlbum: void onStitchingQueued(android.net.Uri)> (1)
<com.android.gallery3d.app.PhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (3)
<com.android.gallery3d.app.PhotoPage: void onUndoDeleteImage()> (3)
<com.android.gallery3d.app.AppBridge$Server: void notifyScreenNailChanged()> ()
<com.android.gallery3d.app.FilmstripPage: void notifyScreenNailChanged()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void notifyScreenNailChanged()> (1)
<com.android.photos.AlbumSetFragment: java.util.ArrayList getSubItemUrisForItem(java.lang.Object)> ()
<com.android.gallery3d.data.LocalSource: void mapMediaItems(java.util.ArrayList,com.android.gallery3d.data.MediaSet$ItemConsumer)> (1)
<com.android.gallery3d.app.ManageCachePage$4: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onLongTap(int)> (1)
<com.android.gallery3d.ui.SlotView$SimpleListener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.ui.AlbumSlotRenderer: void onVisibleRangeChanged(int,int)> ()
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (12)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (12)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage: void updateUIForCurrentPhoto()> (4)
<com.android.gallery3d.ui.DetailsHelper: void show()> (3)
<com.android.gallery3d.app.AppBridge$Server: void addSecureAlbumItem(boolean,int)> ()
<com.android.gallery3d.app.FilmstripPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void addSecureAlbumItem(boolean,int)> (1)
<com.android.gallery3d.app.StitchingChangeListener: void onStitchingQueued(android.net.Uri)> ()
<com.android.gallery3d.app.FilmstripPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onDeleteImage(com.android.gallery3d.data.Path,int)> (1)
<com.android.gallery3d.app.FilmstripPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onUndoDeleteImage()> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView$Listener: void onSingleTapUp(int)> (1)
<com.android.gallery3d.app.AlbumDataLoader$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (7)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$4: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.gallery3d.app.FilmstripPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (9)
<com.android.gallery3d.app.PhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (4)
<com.android.gallery3d.app.SinglePhotoPage: void updateUIForCurrentPhoto()> (1)
<com.android.gallery3d.app.AlbumPage: void showDetails()> (1)
<com.android.gallery3d.app.AlbumSetPage: void showDetails()> (1)
<com.android.gallery3d.app.PhotoPage: void showDetails()> (3)
<com.android.gallery3d.ui.PhotoView$1: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView$MyGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SinglePhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.FilmstripPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1800(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: void onPictureCenter(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void requestDeferredUpdate()> (3)
<com.android.gallery3d.app.PhotoPage: void refreshHidingMessage()> (6)
<com.android.gallery3d.app.PhotoPage: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void onActionBarWanted()> (3)
<com.android.gallery3d.app.FilmstripPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (11)
<com.android.gallery3d.app.SinglePhotoPage: void updateCurrentPhoto(com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.FilmstripPage: void showDetails()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void showDetails()> (1)
<com.android.gallery3d.ui.GLView$OnClickListener: void onClick(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.gallery3d.app.FilmstripPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onPictureCenter(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void requestDeferredUpdate()> (1)
<com.android.gallery3d.app.FilmstripPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.PhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (5)
<com.android.gallery3d.app.PhotoPage: void onFilmModeChanged(boolean)> (3)
<com.android.gallery3d.app.PhotoPage: void showBars()> (6)
<com.android.gallery3d.app.SinglePhotoPage: void refreshHidingMessage()> (1)
<com.android.gallery3d.app.FilmstripPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarAllowed(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarAllowed(boolean)> (3)
<com.android.gallery3d.app.FilmstripPage: void onActionBarWanted()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onActionBarWanted()> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onActionBarWanted()> (2)
<com.android.gallery3d.app.FilmstripPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.app.PhotoPage$6: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$2400(com.android.gallery3d.app.PhotoPage,com.android.gallery3d.data.MediaItem)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView$FullPicture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.app.FilmstripPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$9: void onConfirmDialogDismissed(boolean)> (1)
<com.android.gallery3d.app.PhotoPage$MyMenuVisibilityListener: void onMenuVisibilityChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$400(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.ui.PhotoView$Listener: void onFilmModeChanged(boolean)> (1)
<com.android.gallery3d.app.FilmstripPage: void showBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (3)
<com.android.gallery3d.app.PhotoPage: void toggleBars()> (3)
<com.android.gallery3d.app.PhotoPage: void wantBars()> (3)
<com.android.gallery3d.app.SinglePhotoPage: void showBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimationLocked(int)> (1)
<com.android.gallery3d.ui.PhotoView: void captureAnimationDone(int)> (1)
<com.android.gallery3d.ui.PhotoView: void updateActionBar()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onPhotoChanged(int,com.android.gallery3d.data.Path)> (2)
<com.android.gallery3d.ui.PhotoView$Picture: void draw(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onConfirmDialogDismissed(boolean)> (2)
<com.android.gallery3d.ui.PhotoView: void setFilmMode(boolean)> (16)
<com.android.gallery3d.app.FilmstripPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage$7: void onSystemUiVisibilityChange(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$3300(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.FilmstripPage: void toggleBars()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void toggleBars()> (1)
<com.android.gallery3d.app.FilmstripPage: void wantBars()> (1)
<com.android.gallery3d.app.PhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (6)
<com.android.gallery3d.app.SinglePhotoPage: void wantBars()> (1)
<com.android.gallery3d.ui.PhotoView: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$900(com.android.gallery3d.ui.PhotoView,int)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Void call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void updateCurrentIndex(int)> (1)
<com.android.gallery3d.ui.PhotoView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.MenuExecutor$ConfirmDialogListener: void onCancel(android.content.DialogInterface)> (1)
<com.android.gallery3d.app.PhotoPage: void transitionFromAlbumPageIfNeeded()> (3)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void resetToFirstPicture()> (1)
<com.android.gallery3d.app.FilmstripPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.SinglePhotoPage: void access$1500(com.android.gallery3d.app.PhotoPage)> (1)
<com.android.gallery3d.app.PhotoPage: boolean switchWithCaptureAnimation(int)> (4)
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Object call()> (1)
<com.android.gallery3d.app.PhotoDataAdapter: void moveTo(int)> (2)
<com.android.gallery3d.ui.GLView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (12)
<com.android.gallery3d.app.FilmstripPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.app.SinglePhotoPage: void transitionFromAlbumPageIfNeeded()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onScale(float,float,float)> (1)
<com.android.gallery3d.app.AppBridge$Server: boolean switchWithCaptureAnimation(int)> ()
<com.android.gallery3d.app.FilmstripPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.SinglePhotoPage: boolean switchWithCaptureAnimation(int)> (1)
<com.android.gallery3d.app.PhotoPage$Model: void moveTo(int)> (2)
<com.android.gallery3d.ui.PhotoView$Model: void moveTo(int)> (5)
<com.android.gallery3d.app.AlbumPage$2: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.PhotoPage$4: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.EdgeView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GLRootView: void onDrawFrameLocked(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.ui.GLView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (13)
<com.android.gallery3d.ui.PreparePageFadeoutTexture: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.SlotView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.UndoBarView: void render(com.android.gallery3d.glrenderer.GLCanvas)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyScaleListener: boolean onScale(android.view.ScaleGestureDetector)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToFirstImage()> (1)
<com.android.gallery3d.ui.PhotoView: void switchToImage(int)> (7)
<com.android.gallery3d.ui.PhotoView: void switchToNextImage()> (3)
<com.android.gallery3d.ui.PhotoView: void switchToPrevImage()> (2)
<com.android.gallery3d.ui.GLRootView: void onDrawFrame(javax.microedition.khronos.opengles.GL10)> (1)
<com.android.gallery3d.app.AlbumPage$2: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$4: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.ui.ScrollBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void renderChild(com.android.gallery3d.glrenderer.GLCanvas,com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLRoot$OnGLIdleListener: boolean onGLIdle(com.android.gallery3d.glrenderer.GLCanvas,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToNextPicture()> (3)
<com.android.gallery3d.ui.PhotoView: void switchFocus()> (1)
<com.android.gallery3d.ui.PhotoView: boolean slideToPrevPicture()> (3)
<com.android.gallery3d.ui.PhotoView$FullPicture: void drawTileView(com.android.gallery3d.glrenderer.GLCanvas,android.graphics.Rect)> (1)
<com.android.gallery3d.ui.GLRootView$IdleRunner: void run()> (1)
<com.android.gallery3d.ui.PhotoView: boolean snapToNeighborImage()> (2)
<com.android.gallery3d.ui.PhotoView: boolean swipeImages(float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void switchToHitPicture(int,int)> (1)
<com.android.gallery3d.ui.PhotoView: void access$800(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean access$3700(com.android.gallery3d.ui.PhotoView)> (1)
<com.android.gallery3d.ui.PhotoView: void snapback()> (2)
<com.android.gallery3d.ui.PhotoView: boolean access$3500(com.android.gallery3d.ui.PhotoView,float,float)> (1)
<com.android.gallery3d.ui.PhotoView: void access$3200(com.android.gallery3d.ui.PhotoView,int,int)> (1)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: void onUp()> (1)
<com.android.gallery3d.ui.PhotoView: void access$1500(com.android.gallery3d.ui.PhotoView)> (2)
<com.android.gallery3d.ui.PhotoView$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: void onUp()> (1)
<com.android.gallery3d.ui.GestureRecognizer$Listener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyDownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer$MyGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.gallery3d.ui.DownUpDetector$DownUpListener: void onUp(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void setState(boolean,android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.DownUpDetector: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GestureRecognizer: void onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.PhotoView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.server.ConnectivityService: void enforceTetherAccessPermission()> (8)
<com.android.server.ConnectivityService: boolean isTetheringSupported()> (10)
<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()> (2)
<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean isTetheringSupported()> ()
<android.net.IConnectivityManager$Stub: boolean isTetheringSupported()> (2)
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<com.android.server.ConnectivityService: void handleConnectivityChange(int,boolean)> (3)
<android.net.IConnectivityManager$Stub$Proxy: int getLastTetherError(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int getLastTetherError(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableBluetoothRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableBluetoothRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableUsbRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableUsbRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetherableWifiRegexs()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetherableWifiRegexs()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheredIfaces()> (2)
<android.net.IConnectivityManager$Stub$Proxy: java.lang.String[] getTetheringErroredIfaces()> ()
<android.net.IConnectivityManager$Stub: java.lang.String[] getTetheringErroredIfaces()> (2)
<android.net.IConnectivityManager: boolean isTetheringSupported()> (2)
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> ()
<android.net.IConnectivityManager$Stub: int setUsbTethering(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<com.android.server.ConnectivityService: void access$1800(com.android.server.ConnectivityService,int,boolean)> (1)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void handleDisconnect(android.net.NetworkInfo)> (1)
<android.net.IConnectivityManager: int getLastTetherError(java.lang.String)> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheredIfaces()> (1)
<android.net.IConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> (1)
<android.net.ConnectivityManager: boolean isTetheringSupported()> ()
<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()> (1)
<android.net.IConnectivityManager: int setUsbTethering(boolean)> (1)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<com.android.server.ConnectivityService: void access$1600(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<com.android.server.ConnectivityService: void access$1500(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.net.ConnectivityManager: int getLastTetherError(java.lang.String)> ()
<android.net.ConnectivityManager: java.lang.String[] getTetherableBluetoothRegexs()> (1)
<android.net.ConnectivityManager: java.lang.String[] getTetherableIfaces()> ()
<android.net.ConnectivityManager: java.lang.String[] getTetherableUsbRegexs()> ()
<android.net.ConnectivityManager: java.lang.String[] getTetherableWifiRegexs()> (2)
<android.net.ConnectivityManager: java.lang.String[] getTetheredIfaces()> ()
<android.net.ConnectivityManager: java.lang.String[] getTetheringErroredIfaces()> ()
<com.android.server.connectivity.Tethering: void access$900(com.android.server.connectivity.Tethering)> (5)
<android.net.ConnectivityManager: int setUsbTethering(boolean)> ()
<android.net.ConnectivityManager: int tether(java.lang.String)> (2)
<android.net.ConnectivityManager: int untether(java.lang.String)> (1)
<com.android.bluetooth.pan.PanService: java.lang.String enableTethering(java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: boolean isWifiTethered(java.util.ArrayList)> (1)
<android.net.wifi.WifiStateMachine: boolean startTethering(java.util.ArrayList)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void enter()> (1)
<android.net.wifi.WifiStateMachine: void stopTethering()> (1)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<android.net.wifi.WifiStateMachine: boolean access$23400(android.net.wifi.WifiStateMachine,java.util.ArrayList)> (3)
<android.net.wifi.WifiStateMachine: boolean access$23000(android.net.wifi.WifiStateMachine,java.util.ArrayList)> (1)
<android.net.wifi.WifiStateMachine: void access$24200(android.net.wifi.WifiStateMachine)> (1)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$TetheringState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> ()
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> ()
<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> (2)
<android.net.INetworkStatsService$Stub$Proxy: android.net.NetworkStats getDataLayerSnapshotForUid(int)> ()
<android.net.INetworkStatsService$Stub: android.net.NetworkStats getDataLayerSnapshotForUid(int)> (2)
<android.net.INetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)> (1)
<android.net.INetworkStatsService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.TrafficStats: android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)> (2)
<com.android.server.net.NetworkStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.TrafficStats: android.net.NetworkStats stopDataProfiling(android.content.Context)> ()
<android.net.TrafficStats: void startDataProfiling(android.content.Context)> ()
<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> (2)
<android.net.INetworkPolicyManager$Stub$Proxy: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> ()
<android.net.INetworkPolicyManager$Stub: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> (2)
<android.net.INetworkPolicyManager: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)> (1)
Permission:android.permission.WRITE_EXTERNAL_STORAGE
1 Callers:
<com.android.inputmethod.latin.utils.UsabilityStudyLogUtils$2: void run()> (1)
Permission:com.android.voicemail.permission.ADD_VOICEMAIL
2 Callers:
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)> ()
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)> ()
Permission:android.permission.SEND_SMS
94 Callers:
<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> ()
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> ()
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.ISms$Stub: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (2)
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: void sendMessage(com.android.bluetooth.map.BluetoothMapContentObserver$PushMsgInfo,java.lang.String)> (2)
<com.android.bluetooth.map.BluetoothMapContentObserver: long pushMessage(com.android.bluetooth.map.BluetoothMapbMessage,java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void resendPendingMessages()> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int pushMessage(javax.obex.Operation,java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: void access$900(com.android.bluetooth.map.BluetoothMapContentObserver)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver$2: void onServiceStateChanged(android.telephony.ServiceState)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusDeleted(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int setMessageStatus(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void addSmsEntry()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpSmsTable()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpMessages()> ()
Permission:android.permission.CAMERA
250 Callers:
<android.hardware.Camera: android.hardware.Camera open()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void startCamera()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void access$200(com.android.wallpaper.walkaround.WalkAroundWallpaper)> (2)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void onSurfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void onVisibilityChanged(boolean)> (1)
<android.hardware.Camera: void native_setup(java.lang.Object)> ()
<android.media.MediaRecorder: void setVideoSource(int)> (2)
<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()> (1)
<com.android.camera.VideoModule: void initializeRecorder()> ()
<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> (2)
Permission:android.permission.READ_CALL_LOG
55 Callers:
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> (1)
<com.android.bluetooth.hfp.AtPhonebook: com.android.bluetooth.hfp.AtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (3)
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> (2)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbsCommand(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void handleAccessPermissionResult(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbs(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList loadCallHistoryList(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.hfp.AtPhonebook: java.lang.String getLastDialledNumber()> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processDialCall(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processKeyPressed()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5200(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6100(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getCallHistorySize(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
Permission:android.permission.WRITE_USER_DICTIONARY
15 Callers:
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: void deleteWord(java.lang.String,java.lang.String,android.content.ContentResolver)> (2)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: int apply(android.content.Context,android.os.Bundle)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: void delete(android.content.Context)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void onPause()> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.inputmethod.compat.UserDictionaryCompatUtils: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (2)
<com.android.inputmethod.latin.LatinIME: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
Permission:android.permission.TRANSMIT_IR
12 Callers:
<com.android.server.ConsumerIrService: void transmit(java.lang.String,int,int[])> (2)
<android.hardware.IConsumerIrService$Stub$Proxy: void transmit(java.lang.String,int,int[])> ()
<android.hardware.IConsumerIrService$Stub: void transmit(java.lang.String,int,int[])> (2)
<android.hardware.IConsumerIrService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.IConsumerIrService: void transmit(java.lang.String,int,int[])> (1)
<com.android.server.ConsumerIrService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.hardware.ConsumerIrManager: void transmit(int,int[])> ()
<com.android.server.ConsumerIrService: int[] getCarrierFrequencies()> (2)
<android.hardware.IConsumerIrService$Stub$Proxy: int[] getCarrierFrequencies()> ()
<android.hardware.IConsumerIrService$Stub: int[] getCarrierFrequencies()> (2)
<android.hardware.IConsumerIrService: int[] getCarrierFrequencies()> (1)
<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies()> ()
Permission:android.permission.MANAGE_ACCOUNTS
150 Callers:
<com.android.server.accounts.AccountManagerService: void checkManageAccountsPermission()> (6)
<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService: void clearPassword(android.accounts.Account)> (2)
<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> (2)
<com.android.server.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<com.android.server.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void clearPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void clearPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> ()
<android.accounts.IAccountManager$Stub: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> ()
<android.accounts.IAccountManager$Stub: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)> (1)
<android.accounts.IAccountManager: void clearPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)> (1)
<android.accounts.IAccountManager: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)> (1)
<android.accounts.IAccountManager: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)> (1)
<android.accounts.IAccountManager: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager$7: void doWork()> (1)
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)> (2)
<android.accounts.AccountManager$8: void doWork()> (1)
<android.accounts.AccountManager$10: void doWork()> (1)
<android.accounts.AccountManager$4: void doWork()> (1)
<android.accounts.AccountManager$9: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: void doWork()> (2)
<android.test.IsolatedContext$MockAccountManager: void clearPassword(android.accounts.Account)> (1)
<com.android.development.AccountsTester: boolean onContextItemSelected(android.view.MenuItem)> (1)
<android.accounts.AccountManager$BaseFutureTask: void doWork()> (1)
<android.accounts.AccountManager$AmsTask: android.accounts.AccountManagerFuture start()> (7)
<android.accounts.AccountManager$AmsTask$Response: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$BaseFutureTask: void startTask()> (5)
<android.accounts.AccountManager$10: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$5: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$6: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$7: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$8: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$9: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: android.accounts.AccountManagerFuture start()> (2)
<android.accounts.IAccountManagerResponse$Stub$Proxy: void onResult(android.os.Bundle)> ()
<android.accounts.AccountManager$1: void startTask()> (1)
<android.accounts.AccountManager$2: void startTask()> (1)
<android.accounts.AccountManager$3: void startTask()> (1)
<android.accounts.AccountManager$4: void startTask()> (1)
<android.accounts.AccountManager$Future2Task: void startTask()> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (10)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (6)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager$Future2Task: android.accounts.AccountManager$Future2Task start()> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$ButtonClickListener: void onClick(android.view.View)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void onResult(android.os.Bundle)> (2)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void run(android.accounts.AccountManagerFuture)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void run(android.accounts.AccountManagerFuture)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.browser.DeviceAccountLogin: void handleLogin(java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.DeviceAccountLogin: void login(int,com.android.browser.DeviceAccountLogin$AutoLoginCallback)> (1)
<com.android.browser.GoogleAccountLogin: void invalidateTokens()> (1)
<com.android.browser.GoogleAccountLogin: void run(android.accounts.AccountManagerFuture)> (1)
<com.android.browser.GoogleAccountLogin: void startLogin()> (1)
<com.android.development.AccountsTester$2: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (4)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.calendar.AllInOneActivity$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.email.service.EmailServiceUtils: android.accounts.AccountManagerFuture setupAccountManagerAccount(android.content.Context,com.android.emailcommon.provider.Account,boolean,boolean,boolean,android.accounts.AccountManagerCallback)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentialsAsUser(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler,android.os.UserHandle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.development.AccountsTester$3: void onClick(android.content.DialogInterface,int)> (1)
<android.accounts.AccountManager$1: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$2: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$3: android.accounts.AccountManager$Future2Task start()> (2)
<android.accounts.AccountManager$4: android.accounts.AccountManager$Future2Task start()> (2)
<com.android.browser.Tab$2: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.browser.AutologinBar: void onClick(android.view.View)> (1)
<com.android.browser.GoogleAccountLogin: void run()> (1)
<com.android.browser.GoogleAccountLogin: void startLoginIfNeeded(android.app.Activity,java.lang.Runnable)> (1)
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> ()
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.ChooseTypeAndAccountActivity: void onResume()> (1)
<com.android.email.activity.setup.AccountSetupOptions$1: void run()> (1)
<com.android.email.service.EmailServiceUtils: void updateAccountManagerType(android.content.Context,android.accounts.Account,java.util.Map)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (2)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (5)
<com.android.browser.Controller: void doStart(android.os.Bundle,android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void updateAccountManagerAccountsOfType(java.lang.String,java.util.Map)> (1)
<android.accounts.GrantCredentialsPermissionActivity: void onCreate(android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void doWork()> (1)
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> (1)
<com.android.email.provider.AccountReconciler: boolean reconcileAccountsInternal(android.content.Context,java.util.List,java.util.List,boolean)> (1)
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.browser.CrashRecoveryHandler: void startRecovery(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onAppUpgrade()> (2)
<com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context)> (2)
<com.android.browser.Controller: void start(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void reconcileAndStartServices()> (2)
<com.android.email.service.EmailServiceStub: void deleteAccountPIMData(java.lang.String)> (5)
<com.android.browser.ActivityController: void start(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onBootCompleted()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void deleteAccountPIMData(java.lang.String)> ()
<com.android.emailcommon.service.IEmailService$Stub: void deleteAccountPIMData(java.lang.String)> (2)
<com.android.emailcommon.service.IEmailService: void deleteAccountPIMData(java.lang.String)> (2)
<com.android.email.service.ImapService$1: void deleteAccountPIMData(java.lang.String)> (1)
<com.android.email.service.Pop3Service$1: void deleteAccountPIMData(java.lang.String)> (1)
<com.android.browser.BrowserActivity: void onCreate(android.os.Bundle)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.EmailServiceProxy$7: void run()> (1)
<com.android.email.provider.EmailProvider: void deleteAccountData(android.content.Context,long)> (2)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.provider.EmailProvider: int uiDeleteAccount(android.net.Uri)> (1)
<com.android.email.provider.EmailProvider: int uiDeleteAccountData(android.net.Uri)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.provider.EmailProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.server.accounts.AccountManagerService: void checkManageAccountsOrUseCredentialsPermissions()> (1)
<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void invalidateAuthToken(java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void invalidateAuthToken(java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (3)
<android.test.IsolatedContext$MockAccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> (1)
<com.android.development.AccountsTester$GetAndInvalidateAuthTokenCallback: void run(android.accounts.AccountManagerFuture)> (1)
Permission:android.permission.SYSTEM_ALERT_WINDOW
100 Callers:
<com.android.internal.policy.impl.PhoneWindowManager: int checkAddPermission(android.view.WindowManager$LayoutParams,int[])> (1)
<android.view.WindowManagerPolicy: int checkAddPermission(android.view.WindowManager$LayoutParams,int[])> (1)
<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.Session: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (3)
<com.android.server.wm.Session: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (3)
<android.view.IWindowSession$Stub$Proxy: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.IWindowSession$Stub: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.Session: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub$Proxy: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (2)
<com.android.server.wm.Session: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession$Stub$Proxy: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.IWindowSession$Stub: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (1)
<android.view.IWindowSession$Stub$Proxy: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)> (15)
<android.view.ViewRootImpl: void setView(android.view.View,android.view.WindowManager$LayoutParams,android.view.View)> (1)
<com.android.server.wm.Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.SurfaceView: void updateWindow(boolean,boolean)> (19)
<android.view.IWindowSession: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<android.service.wallpaper.WallpaperService$Engine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (11)
<android.service.wallpaper.WallpaperService$Engine: void reportVisibility()> (12)
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)> (10)
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)> (10)
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void executeMessage(android.os.Message)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void updateSurface(boolean,boolean,boolean)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void updateSurface(boolean,boolean,boolean)> (1)
<android.view.WindowManagerGlobal: void addView(android.view.View,android.view.ViewGroup$LayoutParams,android.view.Display,android.view.Window)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<android.service.wallpaper.WallpaperService$Engine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.service.wallpaper.WallpaperService$Engine: void doVisibilityChanged(boolean)> (11)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void reportVisibility()> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void reportVisibility()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void reportVisibility()> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void reportVisibility()> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void setOffsetNotificationsEnabled(boolean)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void setTouchEventsEnabled(boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void setTouchEventsEnabled(boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void setTouchEventsEnabled(boolean)> (2)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void setTouchEventsEnabled(boolean)> (1)
<android.view.WindowManagerImpl: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> (2)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.musicvis.vis1.Visualization1$CubeEngine: void doVisibilityChanged(boolean)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.polarclock.PolarClockWallpaper$ClockEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void doVisibilityChanged(boolean)> (1)
<com.android.wallpaper.walkaround.WalkAroundWallpaper$WalkAroundEngine: void doVisibilityChanged(boolean)> (1)
<com.android.galaxy4.Galaxy4Wallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.magicsmoke.RenderScriptWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.musicvis.RenderScriptWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.noisefield.NoiseFieldWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.phasebeam.PhaseBeamWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onCreate(android.view.SurfaceHolder)> (1)
Permission:android.permission.INTERNET
332 Callers:
<com.android.inputmethod.research.Uploader: boolean hasUploadingPermission()> (1)
<com.android.inputmethod.research.Uploader: boolean isPossibleToUpload()> (1)
<com.android.inputmethod.research.UploaderService: void onHandleIntent(android.content.Intent)> (1)
<com.android.server.NsdService: android.os.Messenger getMessenger()> (2)
<android.net.nsd.INsdManager$Stub$Proxy: android.os.Messenger getMessenger()> ()
<android.net.nsd.INsdManager$Stub: android.os.Messenger getMessenger()> (2)
<android.net.nsd.INsdManager: android.os.Messenger getMessenger()> (1)
<android.net.nsd.INsdManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.nsd.NsdManager: android.os.Messenger getMessenger()> (1)
<com.android.server.NsdService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.nsd.NsdManager: void init()> (1)
<android.net.nsd.NsdManager: void <init>(android.content.Context,android.net.nsd.INsdManager)> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> (2)
<com.android.browser.OpenDownloadReceiver: void onReceiveAsync(android.content.Context,long)> (1)
<com.android.emailcommon.utility.AttachmentUtilities: void saveAttachment(android.content.Context,java.io.InputStream,com.android.emailcommon.provider.EmailContent$Attachment)> (3)
<com.android.browser.OpenDownloadReceiver: void access$000(com.android.browser.OpenDownloadReceiver,android.content.Context,long)> (1)
<com.android.email.service.EmailServiceStub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (4)
<com.android.exchange.adapter.AttachmentLoader: void finishLoadAttachment(java.io.File)> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean finishLoadAttachment(com.android.emailcommon.provider.EmailContent$Attachment,java.io.File)> (1)
<com.android.browser.OpenDownloadReceiver$1: void run()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.email.service.ImapService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.adapter.AttachmentLoader: void loadAttachment()> (1)
<com.android.exchange.eas.EasLoadAttachment: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.eas.EasOperation: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean)> (1)
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> (3)
<com.android.browser.Controller$Download: void saveDataUri()> (1)
<com.android.mail.providers.EmlAttachmentProvider: int copyAttachment(android.net.Uri,android.content.ContentValues)> (1)
<com.android.browser.Controller$Download: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mail.providers.EmlAttachmentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (1)
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> (4)
<com.android.browser.DownloadHandler$1: void run()> (2)
<com.android.browser.FetchUrlMimeType: void run()> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: long registerDownloadRequest(android.app.DownloadManager,android.app.DownloadManager$Request,android.database.sqlite.SQLiteDatabase,java.lang.String,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void updateClientsWithMetadataUri(android.content.Context,boolean,java.lang.String)> (1)
<com.android.browser.DownloadHandler: void onDownloadStartNoStream(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (3)
<com.android.inputmethod.dictionarypack.ActionBatch$StartDownloadAction: void execute(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: boolean tryUpdate(android.content.Context,boolean)> (3)
<com.android.browser.DownloadHandler: void onDownloadStart(android.app.Activity,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.ActionBatch$Action: void execute(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: void dispatchBroadcast(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService: void updateNowIfNotUpdatedInAVeryLongTime(android.content.Context)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$5: void run()> (2)
<com.android.browser.Controller: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.inputmethod.dictionarypack.ActionBatch: void execute(android.content.Context,com.android.inputmethod.dictionarypack.ProblemReporter)> (7)
<com.android.inputmethod.dictionarypack.DictionaryService: void access$000(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void startRefresh()> (1)
<com.android.browser.WebViewController: void onDownloadStart(com.android.browser.Tab,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: void handleMetadata(android.content.Context,java.io.InputStream,java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void installIfNeverRequested(android.content.Context,java.lang.String,java.lang.String,boolean)> (2)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsDeleted(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsDeleting(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsUnused(android.content.Context,java.lang.String,java.lang.String,int,int)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void markAsUsed(android.content.Context,java.lang.String,java.lang.String,int,int,boolean)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void publishUpdateWordListCompleted(android.content.Context,boolean,long,android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String)> (1)
<com.android.inputmethod.dictionarypack.DictionaryService$1: void run()> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.browser.Tab$4: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.browser.Tab$7: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: boolean handleDownloadedFile(android.content.Context,com.android.inputmethod.dictionarypack.DownloadRecord,android.app.DownloadManager,long)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: java.util.Collection getDictionaryWordListsForLocale(java.lang.String,java.lang.String,boolean)> (1)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void onClickAllow(android.view.View)> ()
<com.android.inputmethod.dictionarypack.DictionaryProvider: int deleteDataFile(android.net.Uri)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void deleteDict()> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void disableDict()> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void enableDict()> (1)
<com.android.inputmethod.dictionarypack.UpdateHandler: void downloadFinished(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$800(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$700(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference: void access$600(com.android.inputmethod.dictionarypack.WordListPreference)> (1)
<com.android.inputmethod.dictionarypack.WordListPreference$OnActionButtonClick: void onClick(android.view.View)> (1)
<android.provider.Downloads: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages(android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100(com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run()> (2)
<com.android.server.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<java.net.DatagramSocket: void <init>(int)> ()
<java.net.HttpURLConnection: void <init>(int)> ()
<java.net.HttpURLConnection: void connect()> (2)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String get(java.lang.String,java.util.Map)> (2)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String post(java.lang.String,java.util.Map,java.lang.String)> (2)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String get(java.lang.String,java.util.Map)> ()
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String get(com.android.quicksearchbox.util.HttpHelper$GetRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String post(java.lang.String,java.util.Map,java.lang.String)> ()
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.lang.String post(com.android.quicksearchbox.util.HttpHelper$PostRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String get(com.android.quicksearchbox.util.HttpHelper$GetRequest)> (1)
<com.android.quicksearchbox.util.HttpHelper: java.lang.String post(com.android.quicksearchbox.util.HttpHelper$PostRequest)> ()
<com.android.quicksearchbox.google.SearchBaseUrlHelper$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.quicksearchbox.google.SearchBaseUrlHelper$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<java.net.MulticastSocket: void <init>(int)> ()
<java.net.NetworkInterface: void <init>(int)> ()
<java.net.ServerSocket: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpSessionNotifier: void <init>(int)> (1)
<com.android.bluetooth.opp.TestTcpServer: void run()> (1)
<java.net.ServerSocket: void bind(java.net.SocketAddress)> (1)
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.net.InetSocketAddress)> ()
<java.net.Socket: void <init>(int)> ()
<java.net.URL: java.lang.Object getContent()> ()
<java.net.URL: java.net.URLConnection openConnection()> (3)
<android.net.CaptivePortalTracker: boolean isCaptivePortal(java.net.InetAddress)> (1)
<com.android.inputmethod.research.Uploader: void uploadFile(java.io.File)> (1)
<com.android.quicksearchbox.util.JavaNetHttpHelper: java.net.HttpURLConnection createConnection(java.lang.String,java.util.Map)> (2)
<android.net.CaptivePortalTracker: boolean access$2600(android.net.CaptivePortalTracker,java.net.InetAddress)> (1)
<com.android.inputmethod.research.Uploader: void doUpload()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<java.net.URL: java.io.InputStream openStream()> (5)
<com.android.browser.WallpaperHandler: java.io.InputStream openStream()> (1)
<com.android.ex.photo.util.ImageUtils$HttpInputStreamFactory: byte[] downloadBytes()> (1)
<com.android.gallery3d.data.DownloadUtils: boolean download(com.android.gallery3d.util.ThreadPool$JobContext,java.net.URL,java.io.OutputStream)> (1)
<com.coremedia.iso.PropertyBoxParserImpl: void <init>(java.lang.String[])> (5)
<com.google.common.io.Resources$1: java.io.InputStream getInput()> (1)
<com.android.browser.WallpaperHandler: void run()> (2)
<com.android.ex.photo.util.ImageUtils$HttpInputStreamFactory: java.io.InputStream createInputStream()> (1)
<com.android.gallery3d.data.DownloadUtils: boolean requestDownload(com.android.gallery3d.util.ThreadPool$JobContext,java.net.URL,java.io.File)> (1)
<com.coremedia.iso.IsoFile: com.coremedia.iso.BoxParser createBoxParser()> (2)
<com.coremedia.iso.IsoFile: void <init>(java.io.File)> ()
<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel,com.coremedia.iso.BoxParser)> ()
<com.coremedia.iso.IsoFile: void <init>(java.nio.channels.ReadableByteChannel)> (1)
<com.coremedia.iso.IsoFile: void <init>()> (2)
<com.google.common.io.Resources$1: java.lang.Object getInput()> (1)
<com.android.browser.WallpaperHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.ex.photo.util.ImageUtils$BaseInputStreamFactory: java.io.InputStream createInputStream()> (3)
<com.android.gallery3d.data.DownloadCache$DownloadTask: java.io.File run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.googlecode.mp4parser.authoring.container.mp4.MovieCreator: com.googlecode.mp4parser.authoring.Movie build(java.nio.channels.ReadableByteChannel)> (2)
<com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> (3)
<com.googlecode.mp4parser.authoring.builder.FragmentedMp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> (2)
<com.google.common.io.InputSupplier: java.lang.Object getInput()> (16)
<com.android.ex.photo.util.ImageUtils$DataInputStreamFactory: java.io.InputStream createInputStream()> (1)
<com.android.ex.photo.util.ImageUtils$InputStreamFactory: java.io.InputStream createInputStream()> (1)
<com.android.gallery3d.data.DownloadCache$DownloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.VideoUtils: void startMuteUsingMp4Parser(java.lang.String,com.android.gallery3d.util.SaveVideoFileInfo)> (1)
<com.android.gallery3d.app.VideoUtils: void trimUsingMp4Parser(java.io.File,java.io.File,int,int)> (1)
<com.android.gallery3d.app.VideoUtils: void writeMovieIntoFile(java.io.File,com.googlecode.mp4parser.authoring.Movie)> (2)
<com.googlecode.mp4parser.authoring.adaptivestreaming.FlatPackageWriterImpl: void write(com.googlecode.mp4parser.authoring.Movie)> (1)
<com.googlecode.mp4parser.authoring.builder.Mp4Builder: com.coremedia.iso.IsoFile build(com.googlecode.mp4parser.authoring.Movie)> ()
<com.google.common.io.ByteStreams$4: java.io.InputStream getInput()> (1)
<com.google.common.io.ByteStreams: boolean equal(com.google.common.io.InputSupplier,com.google.common.io.InputSupplier)> (1)
<com.google.common.io.ByteStreams: byte[] toByteArray(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)> (3)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,java.io.OutputStream)> (2)
<com.google.common.io.ByteStreams: long length(com.google.common.io.InputSupplier)> ()
<com.google.common.io.CharStreams$2: java.io.InputStreamReader getInput()> (1)
<com.google.common.io.CharStreams: java.lang.Object readLines(com.google.common.io.InputSupplier,com.google.common.io.LineProcessor)> (2)
<com.google.common.io.CharStreams: java.lang.StringBuilder toStringBuilder(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.lang.String readFirstLine(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.CharStreams: java.util.List readLines(com.google.common.io.InputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)> (2)
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,java.lang.Appendable)> (1)
<com.google.common.io.MultiInputStream: void advance()> (3)
<com.google.common.io.MultiReader: void advance()> (3)
<com.android.ex.photo.util.ImageUtils: android.graphics.Bitmap decodeStream(com.android.ex.photo.util.ImageUtils$InputStreamFactory,android.graphics.Rect,android.graphics.BitmapFactory$Options)> (2)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.gallery3d.app.VideoUtils: void startMute(java.lang.String,com.android.gallery3d.util.SaveVideoFileInfo)> (1)
<com.android.gallery3d.app.VideoUtils: void startTrim(java.io.File,java.io.File,int,int)> (1)
<com.googlecode.mp4parser.authoring.adaptivestreaming.PackageWriter: void write(com.googlecode.mp4parser.authoring.Movie)> ()
<com.google.common.io.ByteStreams$4: java.lang.Object getInput()> (1)
<com.google.common.io.Files: boolean equal(java.io.File,java.io.File)> ()
<com.google.common.io.Files: byte[] toByteArray(java.io.File)> (1)
<com.google.common.io.Resources: byte[] toByteArray(java.net.URL)> ()
<com.google.common.io.ByteStreams: byte[] getDigest(com.google.common.io.InputSupplier,java.security.MessageDigest)> (1)
<com.google.common.io.ByteStreams: long getChecksum(com.google.common.io.InputSupplier,java.util.zip.Checksum)> (1)
<com.google.common.io.Files: java.lang.Object readBytes(java.io.File,com.google.common.io.ByteProcessor)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File)> (1)
<com.google.common.io.Files: void copy(java.io.File,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.OutputStream)> ()
<com.google.common.io.Resources: void copy(java.net.URL,java.io.OutputStream)> ()
<com.google.common.io.CharStreams$2: java.lang.Object getInput()> (1)
<com.google.common.io.Files: java.lang.Object readLines(java.io.File,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.Resources: java.lang.Object readLines(java.net.URL,java.nio.charset.Charset,com.google.common.io.LineProcessor)> ()
<com.google.common.io.CharStreams: java.lang.String toString(com.google.common.io.InputSupplier)> (1)
<com.google.common.io.Files: java.lang.String readFirstLine(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: java.util.List readLines(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Resources: java.util.List readLines(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,com.google.common.io.OutputSupplier)> ()
<com.google.common.io.Files: void copy(java.io.File,java.nio.charset.Charset,java.lang.Appendable)> ()
<com.google.common.io.MultiInputStream: int read(byte[],int,int)> (2)
<com.google.common.io.MultiInputStream: int read()> (3)
<com.google.common.io.MultiInputStream: void <init>(java.util.Iterator)> (1)
<com.google.common.io.MultiReader: int read(char[],int,int)> (2)
<com.google.common.io.MultiReader: long skip(long)> (1)
<com.google.common.io.MultiReader: void <init>(java.util.Iterator)> (1)
<com.android.ex.photo.util.ImageUtils: android.graphics.Point getImageBounds(com.android.ex.photo.util.ImageUtils$InputStreamFactory)> (1)
<com.android.ex.photo.util.ImageUtils: com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult createLocalBitmap(android.content.ContentResolver,android.net.Uri,int)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.MuteVideo$1: void run()> (1)
<com.android.gallery3d.app.TrimVideo$3: void run()> (1)
<com.google.common.io.Files: java.lang.String toString(java.io.File,java.nio.charset.Charset)> ()
<com.google.common.io.Files: byte[] getDigest(java.io.File,java.security.MessageDigest)> ()
<com.google.common.io.Files: long getChecksum(java.io.File,java.util.zip.Checksum)> ()
<com.google.common.io.Files: void copy(java.io.File,java.io.File)> (1)
<com.google.common.io.Resources: java.lang.String toString(java.net.URL,java.nio.charset.Charset)> ()
<com.google.common.io.MultiInputStream: long skip(long)> (1)
<com.google.common.io.ByteStreams$5: java.io.InputStream getInput()> (1)
<com.google.common.io.CharStreams$4: java.io.Reader getInput()> (1)
<com.android.ex.photo.loaders.PhotoBitmapLoader: com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult loadInBackground()> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.google.common.io.Files: void move(java.io.File,java.io.File)> ()
<com.google.common.io.ByteStreams$5: java.lang.Object getInput()> (1)
<com.google.common.io.CharStreams$4: java.lang.Object getInput()> (1)
<com.android.ex.photo.loaders.PhotoBitmapLoader: java.lang.Object loadInBackground()> (1)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<android.support.v4.content.AsyncTaskLoader: java.lang.Object loadInBackground()> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<android.support.v4.content.AsyncTaskLoader: java.lang.Object onLoadInBackground()> (4)
<android.support.v4.content.AsyncTaskLoader$LoadTask: java.lang.Object doInBackground(java.lang.Void[])> (1)
<android.support.v4.content.CursorLoader: java.lang.Object onLoadInBackground()> (1)
<com.android.ex.photo.loaders.PhotoBitmapLoader: java.lang.Object onLoadInBackground()> (1)
<com.android.ex.photo.loaders.PhotoPagerLoader: java.lang.Object onLoadInBackground()> (2)
<android.support.v4.content.AsyncTaskLoader$LoadTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.support.v4.content.ModernAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.support.v4.content.ModernAsyncTask$2: java.lang.Object call()> ()
<java.net.URLConnection: void connect()> ()
<java.net.URLConnection: java.io.InputStream getInputStream()> (1)
<com.android.server.connectivity.PacManager: java.lang.String get(java.lang.String)> (1)
<com.android.server.connectivity.PacManager: java.lang.String access$200(java.lang.String)> (1)
<com.android.server.connectivity.PacManager$1: void run()> (1)
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)> ()
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> ()
Permission:android.permission.READ_SYNC_STATS
34 Callers:
<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncActive(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncActive(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (3)
<com.android.server.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> (1)
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)> ()
<com.android.server.content.ContentService: java.util.List getCurrentSyncs()> (2)
<android.content.IContentService$Stub$Proxy: java.util.List getCurrentSyncs()> ()
<android.content.IContentService$Stub: java.util.List getCurrentSyncs()> (2)
<android.content.IContentService: java.util.List getCurrentSyncs()> (2)
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> (2)
<android.content.ContentResolver: java.util.List getCurrentSyncs()> (2)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()> (1)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getCurrentSyncs()> (1)
<android.test.mock.MockContentResolver: java.util.List getCurrentSyncs()> (1)
<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (2)
<android.app.ContextImpl$ApplicationContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)> (1)
<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean isSyncPending(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> (1)
Permission:android.permission.KILL_BACKGROUND_PROCESSES
22 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.commands.am.Am: void runKill()> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<com.android.commands.am.Am: void onRun()> (1)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<com.android.internal.os.BaseCommand: void run(java.lang.String[])> (3)
<com.android.commands.am.Am: void run(java.lang.String[])> (2)
<com.android.commands.media.Media: void run(java.lang.String[])> (2)
<com.android.commands.wm.Wm: void run(java.lang.String[])> (2)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.commands.media.Media: void main(java.lang.String[])> ()
<com.android.commands.wm.Wm: void main(java.lang.String[])> ()
<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()> (1)
<android.app.ActivityManagerNative: void killAllBackgroundProcesses()> (2)
<android.app.IActivityManager: void killAllBackgroundProcesses()> (1)
<com.android.commands.am.Am: void runKillAll()> (1)
Permission:android.permission.READ_PROFILE
4315 Callers:
<com.android.server.LockSettingsService: void checkReadPermission(java.lang.String,int)> (3)
<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)> (2)
<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)> (3)
<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)> (2)
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean getBoolean(java.lang.String,boolean,int)> ()
<com.android.internal.widget.ILockSettings$Stub: boolean getBoolean(java.lang.String,boolean,int)> (2)
<com.android.internal.widget.ILockSettings$Stub$Proxy: java.lang.String getString(java.lang.String,java.lang.String,int)> ()
<com.android.internal.widget.ILockSettings$Stub: java.lang.String getString(java.lang.String,java.lang.String,int)> (2)
<com.android.server.LockSettingsService: void migrateOldData()> (1)
<com.android.internal.widget.ILockSettings$Stub$Proxy: long getLong(java.lang.String,long,int)> ()
<com.android.internal.widget.ILockSettings$Stub: long getLong(java.lang.String,long,int)> (2)
<com.android.internal.widget.ILockSettings: boolean getBoolean(java.lang.String,boolean,int)> (1)
<com.android.internal.widget.ILockSettings$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)> (2)
<com.android.server.LockSettingsService: void systemReady()> (1)
<com.android.internal.widget.ILockSettings: long getLong(java.lang.String,long,int)> (1)
<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)> (2)
<com.android.server.LockSettingsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> (30)
<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)> (2)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)> (10)
<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean)> (7)
<com.android.internal.widget.LockPatternUtils: boolean getWidgetsEnabled(int)> (1)
<android.media.MediaFocusControl: void onReevaluateRemoteControlDisplays()> (1)
<android.provider.Settings$Secure: boolean isLocationProviderEnabledForUser(android.content.ContentResolver,java.lang.String,int)> (3)
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> (1)
<android.provider.Settings$Secure: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> (11)
<android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> (3)
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> (27)
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$Secure: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> (1)
<android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)> (9)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getDisabledSystemInputMethods()> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getEnabledInputMethodsStr()> (4)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getSelectedInputMethod()> (9)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getSubtypeHistoryStr()> (1)
<com.android.internal.policy.impl.ImmersiveModeConfirmation: void loadSetting()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void updateSettings()> (3)
<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets(int)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void readComponentNamesFromSettingLocked(java.lang.String,int,java.util.Set)> (2)
<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponentsForUser(int)> (2)
<com.android.server.location.LocationBlacklist: java.lang.String[] getStringArrayLocked(java.lang.String)> (1)
<com.android.server.NotificationManagerService: void disableNonexistentListeners()> (1)
<com.android.server.NotificationManagerService: void rebindListenerServices()> (3)
<com.android.server.print.UserState: void enableSystemPrintServicesOnFirstBootLocked()> (1)
<com.android.server.print.UserState: void readPrintServicesFromSettingLocked(java.lang.String,java.util.Set)> (2)
<com.android.server.RecognitionManagerService: android.content.ComponentName getCurRecognizer(int)> (2)
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellCheckerSubtype()> (1)
<com.android.server.TextServicesManagerService$TextServicesSettings: java.lang.String getSelectedSpellChecker()> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String)> (2)
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)> (2)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.internal.widget.LockPatternUtils: boolean isBiometricWeakLivelinessEnabled()> ()
<com.android.internal.widget.LockPatternUtils: boolean isLockPasswordEnabled()> (1)
<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()> (2)
<com.android.internal.widget.LockPatternUtils: boolean isLockScreenDisabled()> ()
<com.android.internal.widget.LockPatternUtils: boolean usingBiometricWeak()> (3)
<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()> ()
<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality()> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt()> (1)
<com.android.internal.widget.LockPatternUtils: long getLockoutAttemptDeadline()> ()
<com.android.internal.widget.LockPatternUtils: void setBiometricWeakLivelinessEnabled(boolean)> ()
<com.android.internal.widget.LockPatternUtils: boolean getPowerButtonInstantlyLocks()> ()
<com.android.internal.widget.LockPatternUtils: boolean isBiometricWeakEverChosen()> ()
<com.android.internal.widget.LockPatternUtils: boolean isOwnerInfoEnabled()> ()
<com.android.internal.widget.LockPatternUtils: boolean isPatternEverChosen()> ()
<com.android.internal.widget.LockPatternUtils: boolean isPermanentlyLocked()> ()
<com.android.internal.widget.LockPatternUtils: boolean isVisiblePatternEnabled()> ()
<com.android.internal.widget.LockPatternUtils: boolean getWidgetsEnabled()> ()
<android.media.MediaFocusControl: void access$2200(android.media.MediaFocusControl)> (1)
<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)> ()
<android.provider.Settings$Secure: int getLocationModeForUser(android.content.ContentResolver,int)> (2)
<com.android.server.LocationManagerService: boolean isAllowedByCurrentUserSettingsLocked(java.lang.String)> (6)
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)> (2)
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)> (21)
<android.service.dreams.Sandman: boolean isScreenSaverActivatedOnDock(android.content.Context)> (1)
<android.service.dreams.Sandman: boolean isScreenSaverEnabled(android.content.Context)> (1)
<com.android.internal.widget.LockPatternUtils: int getFallbackAppWidgetId()> ()
<com.android.server.accessibility.AccessibilityManagerService: boolean readAccessibilityEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readDisplayMagnificationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readEnhancedWebAccessibilityEnabledChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationEnabledSettingLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.power.PowerManagerService: void updateSettingsLocked()> (2)
<com.android.server.TextServicesManagerService$TextServicesSettings: boolean isSpellCheckerEnabled()> (1)
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: int getSelectedInputMethodSubtypeHashCode()> (2)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: java.lang.String getPersistedDeviceName()> (1)
<android.nfc.cardemulation.CardEmulation: int getSelectionModeForCategory(java.lang.String)> ()
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)> ()
<android.speech.tts.TtsEngines: java.lang.String getDefaultEngine()> (1)
<android.speech.tts.TtsEngines: java.lang.String getLocalePrefForEngine(java.lang.String)> (1)
<android.speech.tts.TtsEngines: java.lang.String getV1Locale()> (1)
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.lang.String)> ()
<android.view.accessibility.CaptioningManager$CaptionStyle: android.view.accessibility.CaptioningManager$CaptionStyle getCustomStyle(android.content.ContentResolver)> (2)
<android.view.accessibility.CaptioningManager: java.lang.String getRawLocale()> (1)
<com.android.browser.BrowserSettings: java.lang.String getDefaultLinkPrefetchSetting()> (2)
<com.android.browser.BrowserSettings: java.lang.String getDefaultPreloadSetting()> (2)
<com.android.browser.SystemAllowGeolocationOrigins: java.lang.String getSystemSetting()> (1)
<com.android.inputmethod.latin.setup.SetupActivity: boolean isThisImeCurrent(android.content.Context,android.view.inputmethod.InputMethodManager)> (2)
<com.android.internal.telephony.SmsApplication: com.android.internal.telephony.SmsApplication$SmsApplicationData getApplication(android.content.Context,boolean)> (4)
<com.android.internal.telephony.SmsApplication: void setDefaultApplication(java.lang.String,android.content.Context)> (1)
<com.android.printspooler.SelectPrinterFragment$AddPrinterAlertDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)> (1)
<com.android.server.am.CoreSettingsObserver: void populateCoreSettings(android.os.Bundle)> (1)
<com.android.server.BackupManagerService: void <init>(android.content.Context)> (1)
<com.android.server.BluetoothManagerService: void loadStoredNameAndAddress()> (1)
<com.android.server.BluetoothManagerService: void storeNameAndAddress(java.lang.String,java.lang.String)> (1)
<com.android.server.CertBlacklister$BlacklistObserver: java.lang.String getValue()> (1)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<com.android.server.location.LocationFudger: float loadCoarseAccuracy()> (2)
<com.android.server.search.Searchables: java.lang.String getGlobalSearchProviderSetting()> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (7)
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)> ()
<android.media.MediaFocusControl: void restoreMediaButtonReceiver()> (1)
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)> (4)
<android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)> (18)
<android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)> (4)
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> (10)
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,int)> (1)
<android.provider.Settings$System: long getLongForUser(android.content.ContentResolver,java.lang.String,long,int)> (1)
<com.android.internal.widget.LockPatternUtils: java.lang.String getNextAlarm()> ()
<com.android.server.InputMethodManagerService: void buildInputMethodListLocked(java.util.ArrayList,java.util.HashMap,boolean)> (5)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodsAndSubtypeListLocked()> (5)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void appendAndPutEnabledInputMethodLocked(java.lang.String,boolean)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void enableAllIMEsIfThereIsNoEnabledIME()> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void onChange(boolean)> (1)
<com.android.server.InputMethodManagerService: boolean setInputMethodEnabledLocked(java.lang.String,boolean)> (3)
<com.android.server.InputMethodManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)> (1)
<com.android.server.InputMethodManagerService: void resetAllInternalStateLocked(boolean,boolean)> (2)
<com.android.server.InputMethodManagerService: void showInputMethodMenuInternal(boolean)> (2)
<com.android.server.InputMethodManagerService: void switchUserLocked(int)> (1)
<com.android.server.InputMethodManagerService: void updateFromSettingsLocked(boolean)> (5)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List loadInputMethodAndSubtypeHistoryLocked()> (2)
<com.android.internal.policy.impl.PhoneWindowManager$20: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void onChange(boolean)> (2)
<com.android.internal.widget.LockPatternUtils: boolean hasWidgetsEnabledInKeyguard(int)> (1)
<com.android.internal.widget.LockPatternUtils: int[] getAppWidgets()> (3)
<com.android.server.accessibility.AccessibilityManagerService: boolean readEnabledAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean readTouchExplorationGrantedAccessibilityServicesLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.dreams.DreamManagerService: android.content.ComponentName chooseDreamForUser(int)> (1)
<com.android.server.location.LocationBlacklist: void reloadBlacklistLocked()> (2)
<com.android.server.NotificationManagerService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void update(android.net.Uri)> (3)
<com.android.server.NotificationManagerService: void systemReady()> (1)
<com.android.server.print.UserState: void <init>(android.content.Context,int,java.lang.Object)> (1)
<com.android.server.print.UserState: boolean readEnabledPrintServicesLocked()> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.RecognitionManagerService: void initForUser(int)> (2)
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> (2)
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> (7)
<com.android.internal.widget.LockPatternUtils: boolean checkPasswordHistory(java.lang.String)> ()
<com.android.internal.widget.LockPatternUtils: java.lang.String getOwnerInfo(int)> ()
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean)> ()
<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int)> (1)
<com.android.internal.widget.LockPatternUtils: boolean isSecure()> (1)
<com.android.internal.widget.LockPatternUtils: void deleteGallery()> (3)
<com.android.internal.widget.LockPatternUtils: byte[] passwordToHash(java.lang.String)> (4)
<com.android.server.LocationManagerService: boolean access$700(com.android.server.LocationManagerService,java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean isAllowedByUserSettingsLocked(java.lang.String,int)> (4)
<com.android.server.LocationManagerService: void applyAllProviderRequirementsLocked()> (1)
<com.android.server.LocationManagerService: void handleLocationChanged(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)> (4)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (7)
<android.view.accessibility.CaptioningManager: float getFontScale()> (4)
<com.android.server.accessibility.ScreenMagnifier: float getPersistedScale()> (1)
<android.inputmethodservice.KeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (2)
<android.speech.tts.TextToSpeechService: int getSecureSettingInt(java.lang.String,int)> (3)
<android.view.accessibility.CaptioningManager: boolean isEnabled()> (3)
<android.view.accessibility.CaptioningManager: int getRawUserStyle()> (1)
<android.widget.TextView: boolean shouldSpeakPasswordsForAccessibility()> (45)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,long,long,java.lang.String,java.lang.String,long,int)> (3)
<com.android.inputmethod.accessibility.AccessibilityUtils: boolean shouldObscureInput(android.view.inputmethod.EditorInfo)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()> (2)
<com.android.internal.telephony.PhoneBase: java.util.List privatizeCellInfoList(java.util.List)> (7)
<com.android.packageinstaller.InstallFlowAnalytics: boolean isUserConsentToVerifyAppsGranted()> (1)
<com.android.server.accessibility.ScreenMagnifier: boolean isScreenMagnificationAutoUpdateEnabled(android.content.Context)> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (4)
<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> (8)
<com.android.server.net.NetworkPolicyManagerService: void upgradeLegacyBackgroundData()> (1)
<com.android.server.UiModeManagerService: void <init>(android.content.Context,com.android.server.TwilightService)> (1)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.service.dreams.Sandman: void startDreamWhenDockedIfAppropriate(android.content.Context)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4400(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean readConfigurationForUserStateLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4600(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4900(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4500(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: boolean isSubtypeSelected()> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: int getSelectedInputMethodSubtypeId(java.lang.String)> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void initializeP2pSettings()> (1)
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()> (1)
<android.speech.tts.TextToSpeechService: java.lang.String[] getSettingsLocale()> (4)
<android.view.accessibility.CaptioningManager: android.view.accessibility.CaptioningManager$CaptionStyle getUserStyle()> (3)
<com.android.internal.widget.SubtitleView: void setStyle(int)> (1)
<android.view.accessibility.CaptioningManager: java.util.Locale getLocale()> (2)
<com.android.browser.BrowserSettings: java.lang.String getLinkPrefetchEnabled()> (1)
<com.android.browser.preferences.BandwidthPreferencesFragment: void onResume()> (1)
<com.android.browser.BrowserSettings: java.lang.String getPreloadEnabled()> (1)
<com.android.browser.SystemAllowGeolocationOrigins: java.lang.String access$000(com.android.browser.SystemAllowGeolocationOrigins)> (1)
<com.android.inputmethod.latin.setup.LauncherIconVisibilityManager: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: int determineSetupStepNumber()> (5)
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultMmsApplication(android.content.Context,boolean)> (1)
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultRespondViaMessageApplication(android.content.Context,boolean)> ()
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSendToApplication(android.content.Context,boolean)> (1)
<com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplication(android.content.Context,boolean)> (4)
<com.android.server.am.CoreSettingsObserver: void sendCoreSettings()> (2)
<com.android.server.BluetoothManagerService: void <init>(android.content.Context)> (1)
<com.android.server.BluetoothManagerService: void access$100(com.android.server.BluetoothManagerService,java.lang.String,java.lang.String)> (2)
<com.android.server.CertBlacklister$BlacklistObserver$1: void run()> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.location.LocationFudger: float access$000(com.android.server.location.LocationFudger)> (1)
<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)> (1)
<com.android.server.search.Searchables: android.content.ComponentName findGlobalSearchActivity(java.util.List)> (1)
<com.android.server.updates.CarrierProvisioningUrlsInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.CertPinInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (7)
<com.android.server.updates.IntentFirewallInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.SELinuxPolicyInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.SmsShortCodesInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<com.android.server.updates.TZInfoInstallReceiver: java.security.cert.X509Certificate getCert(android.content.ContentResolver)> (1)
<android.media.AudioService: void readPersistedSettings()> (2)
<android.media.AudioService: void restoreMasterVolume()> (2)
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)> ()
<android.provider.Settings$System: void getConfigurationForUser(android.content.ContentResolver,android.content.res.Configuration,int)> (1)
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)> ()
<android.media.AudioService: boolean updateRingerModeAffectedStreams()> (2)
<android.media.AudioService$VolumeStreamState: void readSettings()> (2)
<android.provider.Settings$System: boolean getShowGTalkServiceStatusForUser(android.content.ContentResolver,int)> (1)
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)> (10)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (6)
<com.android.internal.policy.impl.PhoneWindowManager: int getUserRotationMode()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<com.android.internal.view.RotationPolicy: boolean isRotationLocked(android.content.Context)> ()
<com.android.internal.view.RotationPolicy: boolean isRotationLockToggleVisible(android.content.Context)> ()
<com.android.internal.widget.LockPatternUtils: boolean isTactileFeedbackEnabled()> ()
<com.android.internal.widget.multiwaveview.GlowPadView: void vibrate()> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void vibrate()> (2)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.internal.widget.WaveView: void vibrate(long)> (1)
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)> (1)
<com.android.server.input.InputManagerService: int getPointerSpeedSetting()> (1)
<com.android.server.input.InputManagerService: int getShowTouchesSetting(int)> (1)
<com.android.server.VibratorService: void updateInputDeviceVibrators()> (5)
<android.media.MediaScanner$MyMediaScannerClient: void setSettingIfNotSet(java.lang.String,android.net.Uri,long)> (1)
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)> (4)
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)> (27)
<android.text.format.DateFormat: java.lang.String getDateFormatString(android.content.Context)> (1)
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)> (2)
<android.widget.DateTimeView: java.text.DateFormat getDateFormat()> (1)
<com.android.alarmclock.DigitalAppWidgetProvider: void refreshAlarm(android.content.Context,android.widget.RemoteViews)> (2)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: boolean isBluetoothAllowed()> (1)
<com.android.deskclock.Utils: void refreshAlarm(android.content.Context,android.view.View)> (9)
<com.android.server.NotificationManagerService$6: void run()> (1)
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)> ()
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)> (1)
<com.android.server.InputMethodManagerService: void systemRunning(com.android.server.StatusBarManagerService)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: android.util.Pair getLastSubtypeForInputMethodLockedInternal(java.lang.String)> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodAndSubtypeHashCodeListLocked()> ()
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodListLocked()> (10)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.view.inputmethod.InputMethodInfo)> (1)
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (12)
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged()> (8)
<com.android.server.InputMethodManagerService: void resetStateIfCurrentLocaleChangedLocked()> (2)
<com.android.server.InputMethodManagerService: void showInputMethodMenu()> (1)
<com.android.server.InputMethodManagerService: void showInputMethodSubtypeMenu()> (1)
<com.android.server.InputMethodManagerService: void access$1000(com.android.server.InputMethodManagerService,int)> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void addSubtypeToHistory(java.lang.String,java.lang.String)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$16: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.LockSettingsService$DatabaseHelper: void maybeEnableWidgetSettingForUsers(android.database.sqlite.SQLiteDatabase)> (1)
<com.android.internal.widget.LockPatternUtils: boolean addAppWidget(int,int)> ()
<com.android.internal.widget.LockPatternUtils: boolean removeAppWidget(int)> ()
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4700(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$4800(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.dreams.DreamManagerService: void startDream()> (1)
<com.android.server.location.LocationBlacklist: void reloadBlacklist()> (2)
<com.android.server.location.LocationBlacklist: void switchUser(int)> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void observe()> (1)
<com.android.server.NotificationManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.print.PrintManagerService: com.android.server.print.UserState getOrCreateUserStateLocked(int)> (18)
<com.android.server.print.UserState: boolean readConfigurationLocked()> (1)
<com.android.server.RecognitionManagerService: void access$000(com.android.server.RecognitionManagerService,int)> (1)
<com.android.server.RecognitionManagerService: void systemReady()> (1)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> (2)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onSomePackagesChanged()> (1)
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerLocked(java.lang.String)> (3)
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtypeLocked(int)> (2)
<com.android.server.TextServicesManagerService: void switchUserLocked(int)> (2)
<com.android.internal.widget.LockPatternUtils: void clearLock(boolean)> ()
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List,boolean)> (1)
<com.android.server.LockSettingsService: boolean checkPassword(java.lang.String,int)> (2)
<com.android.server.LockSettingsService: void setLockPassword(java.lang.String,int)> (2)
<com.android.server.LocationManagerService$Receiver: void updateMonitoring(boolean)> (5)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(android.location.LocationRequest,com.android.server.LocationManagerService$Receiver,int,int,java.lang.String)> (1)
<com.android.server.LocationManagerService: void access$200(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void access$1600(com.android.server.LocationManagerService,android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService: void access$1300(com.android.server.LocationManagerService,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)> (2)
<com.android.server.LocationManagerService: void access$300(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void switchUser(int)> (1)
<com.android.server.LocationManagerService: void systemRunning()> (1)
<android.media.WebVttRenderingWidget: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<android.media.WebVttRenderingWidget: void manageChangeListener()> (3)
<android.media.WebVttRenderingWidget: void onLayout(boolean,int,int,int,int)> (2)
<android.view.accessibility.CaptioningManager: void notifyFontScaleChanged()> (1)
<com.android.server.accessibility.ScreenMagnifier: float access$1100(com.android.server.accessibility.ScreenMagnifier)> (3)
<android.inputmethodservice.KeyboardView: void showPreview(int)> (4)
<com.android.internal.widget.PasswordEntryKeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (1)
<android.speech.tts.TextToSpeechService: int getDefaultSpeechRate()> (3)
<com.android.tts.compat.CompatTtsService: int getSecureSettingInt(java.lang.String,int)> (1)
<com.svox.pico.PicoService: int getSecureSettingInt(java.lang.String,int)> (1)
<android.media.SubtitleController: android.media.SubtitleTrack getDefaultTrack()> (1)
<android.media.SubtitleController: void doSelectDefaultTrack()> (1)
<android.view.accessibility.CaptioningManager: void notifyEnabledChanged()> (1)
<android.inputmethodservice.ExtractButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.inputmethodservice.ExtractEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.AutoCompleteTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.Button: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.CheckBox: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.CheckedTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.Chronometer: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.CompoundButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.DateTimeView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.DigitalClock: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.EditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.MultiAutoCompleteTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.NumberPicker$CustomEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.RadioButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.SearchView$SearchAutoComplete: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.Switch: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.TextClock: boolean shouldSpeakPasswordsForAccessibility()> (1)
<android.widget.TextView: boolean access$800(android.widget.TextView)> (44)
<android.widget.TextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (41)
<android.widget.ToggleButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.browser.UrlInputView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calculator2.CalculatorEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calculator2.ColorButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calendar.MultiStateButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.calendar.recurrencepicker.WeekButton: boolean shouldSpeakPasswordsForAccessibility()> (2)
<com.android.camera.ui.Switch: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.datetimepicker.AccessibleTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.deskclock.AndroidClockTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.deskclock.widget.TextTime: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.development.LogTextBox: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.dreams.phototable.BummerView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.ex.chips.RecipientEditTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.ex.editstyledtext.EditStyledText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.view.menu.IconMenuItemView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.internal.widget.DialogTitle: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.mail.browse.FolderSpanTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.mail.compose.EnterSubject: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.mail.ui.EmptyConversationListView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.quicksearchbox.ui.QueryTextView: boolean shouldSpeakPasswordsForAccessibility()> (1)
<com.android.email.AttachmentInfo: void <init>(android.content.Context,android.database.Cursor)> ()
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.email.AttachmentInfo)> ()
<com.android.email.AttachmentInfo: void <init>(android.content.Context,com.android.emailcommon.provider.EmailContent$Attachment)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: java.lang.String getKeyDescription(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.accessibility.AccessibilityUtils: void onStartInputViewInternal(android.view.View,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: android.telephony.CellLocation getCellLocation()> (1)
<com.android.internal.telephony.PhoneBase: android.telephony.CellLocation getCellLocation()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.util.List privatizeCellInfoList(java.util.List)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List privatizeCellInfoList(java.util.List)> (1)
<com.android.internal.telephony.gsm.GSMPhone: java.util.List privatizeCellInfoList(java.util.List)> (1)
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()> (6)
<com.android.internal.telephony.PhoneBase: void notifyCellInfo(java.util.List)> (8)
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List privatizeCellInfoList(java.util.List)> (1)
<com.android.internal.telephony.sip.SipPhone: java.util.List privatizeCellInfoList(java.util.List)> (2)
<com.android.packageinstaller.InstallFlowAnalytics: void writeToEventLog()> (1)
<com.android.server.accessibility.ScreenMagnifier: boolean access$3000(android.content.Context)> (1)
<com.android.server.accessibility.ScreenMagnifier: void resetMagnificationIfNeeded()> (2)
<com.android.server.am.ActiveServices: void serviceTimeout(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService$10: void run()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run()> (1)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> (2)
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> (2)
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<com.android.server.net.NetworkPolicyManagerService: void readPolicyLocked()> (1)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrashInner(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.UiModeManagerService: void sendConfigurationAndStartDreamOrDockAppLocked(java.lang.String)> (2)
<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.accessibility.AccessibilityManagerService: boolean access$400(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void switchUser(int)> (1)
<com.android.server.power.PowerManagerService: void access$1600(com.android.server.power.PowerManagerService)> (2)
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtypeLocked()> (4)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)> (1)
<android.speech.tts.TextToSpeech: int initTts()> (3)
<android.speech.tts.TextToSpeechService: java.lang.String[] access$400(android.speech.tts.TextToSpeechService)> (4)
<android.speech.tts.TextToSpeechService: void onCreate()> (2)
<com.android.tts.compat.CompatTtsService: java.lang.String[] getSettingsLocale()> (1)
<com.svox.pico.PicoService: java.lang.String[] getSettingsLocale()> (1)
<android.view.accessibility.CaptioningManager: void notifyUserStyleChanged()> (1)
<android.media.WebVttRenderingWidget$SpanLayout: void setStyle(int)> (1)
<android.view.accessibility.CaptioningManager: void notifyLocaleChanged()> (1)
<com.android.browser.BrowserSettings: void updateConnectionType()> (3)
<com.android.browser.PreloadRequestReceiver: boolean isPreloadEnabledOnCurrentNetwork(android.content.Context)> (1)
<com.android.browser.SystemAllowGeolocationOrigins$1: void run()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: int determineSetupStepNumberFromLauncher()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onRestart()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void updateSetupStepView()> (4)
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[],android.content.BroadcastReceiver,com.android.internal.telephony.InboundSmsHandler)> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onPackageChanged(java.lang.String)> (3)
<android.provider.Telephony$Sms: java.lang.String getDefaultSmsPackage(android.content.Context)> ()
<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.SmsApplication: boolean shouldWriteMessageForPackage(java.lang.String,android.content.Context)> (1)
<com.android.server.am.CoreSettingsObserver: void <init>(com.android.server.am.ActivityManagerService)> (1)
<com.android.server.am.CoreSettingsObserver: void onChange(boolean)> (1)
<com.android.server.BluetoothManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.CertBlacklister$BlacklistObserver: void writeBlacklist()> (1)
<com.android.server.location.LocationFudger$1: void onChange(boolean)> (1)
<com.android.server.updates.CarrierProvisioningUrlsInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.CertPinInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver$1: void run()> (2)
<com.android.server.updates.IntentFirewallInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.SELinuxPolicyInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.SmsShortCodesInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<com.android.server.updates.TZInfoInstallReceiver: java.security.cert.X509Certificate access$000(com.android.server.updates.ConfigUpdateInstallReceiver,android.content.ContentResolver)> (1)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.media.AudioService: void readAudioSettings(boolean)> (2)
<android.media.AudioService: void access$5700(android.media.AudioService)> (1)
<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)> (1)
<android.media.AudioService$SettingsObserver: void onChange(boolean)> (1)
<android.media.AudioService$VolumeStreamState: void <init>(android.media.AudioService,java.lang.String,int)> (1)
<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)> ()
<android.media.AudioManager: boolean querySoundEffectsEnabled()> (1)
<android.text.method.TextKeyListener: void updatePrefs(android.content.ContentResolver)> (2)
<com.android.camera.app.OrientationManager: void resume()> (1)
<com.android.datetimepicker.HapticFeedbackController: boolean checkGlobalSetting(android.content.Context)> (2)
<com.android.deskclock.SettingsActivity: boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)> (1)
<com.android.gallery3d.app.OrientationManager: void resume()> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: int getRecoveryAction()> (5)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setKeyboardMode(int)> ()
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistLongPressAction()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void setSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy: int getUserRotationMode()> (1)
<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void setGrabbedState(int)> (2)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.WaveView: void dispatchTriggerEvent(int)> (1)
<android.hardware.input.InputManager: int getPointerSpeed(android.content.Context)> ()
<com.android.server.input.InputManagerService: void updatePointerSpeedFromSettings()> (3)
<com.android.server.input.InputManagerService: void updateShowTouchesFromSettings()> (3)
<com.android.server.VibratorService: void access$400(com.android.server.VibratorService)> (2)
<com.android.server.VibratorService: void onInputDeviceAdded(int)> (1)
<com.android.server.VibratorService: void onInputDeviceChanged(int)> (1)
<com.android.server.VibratorService: void onInputDeviceRemoved(int)> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri endFile(android.media.MediaScanner$FileEntry,boolean,boolean,boolean,boolean,boolean)> (1)
<android.media.Ringtone: boolean playFallbackRingtone()> (1)
<android.media.Ringtone: java.lang.String getTitle(android.content.Context,android.net.Uri,boolean)> (2)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (3)
<com.android.deskclock.AlarmClockFragment: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (1)
<android.text.format.DateFormat: java.lang.String getTimeFormatString(android.content.Context)> (2)
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)> (17)
<android.widget.TextClock: boolean is24HourModeEnabled()> (1)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: void updateView(android.widget.RemoteViews,com.android.deskclock.worldclock.CityObj,int,int,int)> (1)
<com.android.calendar.agenda.AgendaAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertAdapter: void updateView(android.content.Context,android.view.View,java.lang.String,java.lang.String,long,long,boolean)> (1)
<com.android.calendar.alerts.AlertUtils: java.lang.String formatTimeLocation(android.content.Context,long,boolean,java.lang.String)> (2)
<com.android.calendar.AllInOneActivity: void updateSecondaryTitleFields(long)> (3)
<com.android.calendar.DayView: boolean onLongClick(android.view.View)> (1)
<com.android.calendar.DayView: void appendEventAccessibilityString(java.lang.StringBuilder,com.android.calendar.Event)> (1)
<com.android.calendar.DayView: void handleOnResume()> (2)
<com.android.calendar.DayView: void updateEventDetails()> (1)
<com.android.calendar.event.EditEventView$TimeClickListener: void onClick(android.view.View)> (1)
<com.android.calendar.event.EditEventView: void setTime(android.widget.TextView,long)> (3)
<com.android.calendar.event.EditEventView: void setWhenString()> (1)
<com.android.calendar.event.EditEventView: void updateHomeTime()> (4)
<com.android.calendar.month.MonthWeekEventsView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.OtherPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.calendar.Utils: java.lang.String getDisplayedDatetime(long,long,long,java.lang.String,boolean,android.content.Context)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$EventInfo populateEventInfo(long,boolean,long,long,int,int,java.lang.String,java.lang.String,int,int)> (1)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$4: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmClockFragment: void startCreatingAlarm()> (2)
<com.android.deskclock.AlarmTimelineView: void init(android.content.Context)> (2)
<com.android.deskclock.AlarmUtils: java.lang.String getFormattedTime(android.content.Context,java.util.Calendar)> (8)
<com.android.deskclock.widget.TextTime: void chooseFormat()> (4)
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void set24HoursMode(android.content.Context)> (2)
<com.android.timezonepicker.TimeZoneData: void <init>(android.content.Context,java.lang.String,long)> (1)
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)> ()
<android.net.http.SslCertificate: java.lang.String formatCertificateDate(android.content.Context,java.util.Date)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<android.widget.DateTimeView: void update()> (3)
<com.android.alarmclock.DigitalAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.alarmclock.DigitalAppWidgetProvider: void updateClock(android.content.Context,android.appwidget.AppWidgetManager,int,float)> (2)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.ClockFragment$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.ClockFragment$2: void onChange(boolean)> (1)
<com.android.deskclock.ClockFragment: void onResume()> (1)
<com.android.deskclock.Screensaver$1: void onChange(boolean)> (1)
<com.android.deskclock.Screensaver$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.ScreensaverActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.ScreensaverActivity$2: void onChange(boolean)> (1)
<com.android.deskclock.ScreensaverActivity: void layoutClockSaver()> (2)
<com.android.deskclock.Screensaver: void layoutClockSaver()> (2)
<com.android.internal.app.PlatLogoActivity$3: boolean onLongClick(android.view.View)> (1)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: android.util.Pair getLastInputMethodAndSubtypeLocked()> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getLastSubtypeForInputMethodLocked(java.lang.String)> (1)
<com.android.server.InputMethodManagerService: android.util.Pair findLastResortApplicableShortcutInputMethodAndSubtypeLocked(java.lang.String)> (1)
<com.android.server.InputMethodManagerService: boolean chooseNewDefaultIMELocked()> (4)
<com.android.server.InputMethodManagerService: boolean needsToShowImeSwitchOngoingNotification()> (1)
<com.android.server.InputMethodManagerService: boolean switchToLastInputMethod(android.os.IBinder)> (2)
<com.android.server.InputMethodManagerService: java.util.HashMap getExplicitlyOrImplicitlyEnabledInputMethodsAndSubtypeListLocked()> (2)
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()> (2)
<com.android.server.InputMethodManagerService: void resetDefaultImeLocked(android.content.Context)> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.util.List getEnabledInputMethodSubtypeListLocked(android.content.Context,android.view.inputmethod.InputMethodInfo,boolean)> (5)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.app.ResolverActivity$1: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (16)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.am.UsageStatsService$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.LocationManagerService$4: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.pm.UserManagerService$5: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.ServiceWatcher$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.am.UsageStatsService$2: void onSomePackagesChanged()> (1)
<com.android.server.LocationManagerService$4: void onSomePackagesChanged()> (1)
<com.android.server.pm.UserManagerService$5: void onSomePackagesChanged()> (1)
<com.android.server.print.PrintManagerService$3: void onSomePackagesChanged()> (1)
<com.android.server.ServiceWatcher$2: void onSomePackagesChanged()> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService: void access$1100(com.android.server.InputMethodManagerService)> (1)
<com.android.server.InputMethodManagerService$3: void onUserSwitching(int,android.os.IRemoteCallback)> (2)
<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: void saveCurrentInputMethodAndSubtypeToHistory(java.lang.String,android.view.inputmethod.InputMethodSubtype)> (1)
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.LockSettingsService$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.location.LocationBlacklist: void init()> (1)
<com.android.server.location.LocationBlacklist: void onChange(boolean)> (1)
<com.android.server.NotificationManagerService: void <init>(android.content.Context,com.android.server.StatusBarManagerService,com.android.server.LightsService)> (1)
<com.android.server.print.PrintManagerService: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)> (2)
<com.android.server.print.PrintManagerService: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> (2)
<com.android.server.print.PrintManagerService: com.android.server.print.UserState access$200(com.android.server.print.PrintManagerService,int)> (3)
<com.android.server.print.PrintManagerService: com.android.server.print.UserState getCurrentUserStateLocked()> (2)
<com.android.server.print.PrintManagerService: java.util.List getEnabledPrintServices(int)> (2)
<com.android.server.print.PrintManagerService: java.util.List getInstalledPrintServices(int)> (2)
<com.android.server.print.PrintManagerService: java.util.List getPrintJobInfos(int,int)> (2)
<com.android.server.print.PrintManagerService: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)> (2)
<com.android.server.print.PrintManagerService: void cancelPrintJob(android.print.PrintJobId,int,int)> (2)
<com.android.server.print.PrintManagerService: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> (2)
<com.android.server.print.PrintManagerService: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> (2)
<com.android.server.print.PrintManagerService: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)> (2)
<com.android.server.print.PrintManagerService: void restartPrintJob(android.print.PrintJobId,int,int)> (2)
<com.android.server.print.PrintManagerService: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)> (2)
<com.android.server.print.PrintManagerService: void startPrinterStateTracking(android.print.PrinterId,int)> (2)
<com.android.server.print.PrintManagerService: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)> (2)
<com.android.server.print.PrintManagerService: void stopPrinterStateTracking(android.print.PrinterId,int)> (2)
<com.android.server.print.PrintManagerService: void validatePrinters(java.util.List,int)> (2)
<com.android.server.print.UserState: void updateIfNeededLocked()> (6)
<com.android.server.RecognitionManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(java.lang.String,boolean)> (1)
<com.android.internal.textservice.ITextServicesManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.textservice.ITextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(java.lang.String)> (2)
<com.android.server.TextServicesManagerService: void access$800(com.android.server.TextServicesManagerService,java.lang.String)> (1)
<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)> (2)
<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)> (2)
<com.android.server.TextServicesManagerService: void access$100(com.android.server.TextServicesManagerService,int)> (1)
<com.android.server.TextServicesManagerService: void <init>(android.content.Context)> (1)
<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)> (1)
<com.android.internal.widget.ILockSettings$Stub$Proxy: boolean checkPassword(java.lang.String,int)> ()
<com.android.internal.widget.ILockSettings$Stub: boolean checkPassword(java.lang.String,int)> (2)
<com.android.internal.widget.ILockSettings$Stub$Proxy: void setLockPassword(java.lang.String,int)> ()
<com.android.internal.widget.ILockSettings$Stub: void setLockPassword(java.lang.String,int)> (2)
<com.android.server.LocationManagerService$1: void onOpChanged(int,java.lang.String)> (1)
<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService$4: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.LocationManagerService$Receiver: void binderDied()> (1)
<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)> (3)
<com.android.server.LocationManagerService$2: void onChange(boolean)> (1)
<com.android.server.LocationManagerService: void access$400(com.android.server.LocationManagerService,int)> (1)
<android.media.WebVttRenderingWidget: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<android.media.WebVttRenderingWidget: void onAttachedToWindow()> (3)
<android.media.WebVttRenderingWidget: void onDetachedFromWindow()> (3)
<android.media.WebVttRenderingWidget: void setVisible(boolean)> (1)
<android.view.accessibility.CaptioningManager: void access$200(android.view.accessibility.CaptioningManager)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onActionTapAndHold(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onActionTap(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$MagnifiedContentInteractonStateHandler: void onMotionEvent(android.view.MotionEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (2)
<android.inputmethodservice.KeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (2)
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (5)
<com.android.internal.widget.PasswordEntryKeyboardView: void showPreview(int)> (1)
<android.speech.tts.TextToSpeechService: int access$600(android.speech.tts.TextToSpeechService)> (3)
<com.android.tts.compat.CompatTtsService: int getDefaultSpeechRate()> (1)
<com.svox.pico.PicoService: int getDefaultSpeechRate()> (1)
<android.media.SubtitleController: void access$300(android.media.SubtitleController)> (1)
<android.view.accessibility.CaptioningManager: void access$000(android.view.accessibility.CaptioningManager)> (1)
<android.inputmethodservice.ExtractButton: boolean access$800(android.widget.TextView)> (1)
<android.inputmethodservice.ExtractEditText: boolean access$800(android.widget.TextView)> (1)
<android.widget.AutoCompleteTextView: boolean access$800(android.widget.TextView)> (1)
<android.widget.Button: boolean access$800(android.widget.TextView)> (1)
<android.widget.CheckBox: boolean access$800(android.widget.TextView)> (1)
<android.widget.CheckedTextView: boolean access$800(android.widget.TextView)> (1)
<android.widget.Chronometer: boolean access$800(android.widget.TextView)> (1)
<android.widget.CompoundButton: boolean access$800(android.widget.TextView)> (1)
<android.widget.DateTimeView: boolean access$800(android.widget.TextView)> (1)
<android.widget.DigitalClock: boolean access$800(android.widget.TextView)> (1)
<android.widget.EditText: boolean access$800(android.widget.TextView)> (1)
<android.widget.MultiAutoCompleteTextView: boolean access$800(android.widget.TextView)> (1)
<android.widget.NumberPicker$CustomEditText: boolean access$800(android.widget.TextView)> (1)
<android.widget.RadioButton: boolean access$800(android.widget.TextView)> (1)
<android.widget.SearchView$SearchAutoComplete: boolean access$800(android.widget.TextView)> (1)
<android.widget.Switch: boolean access$800(android.widget.TextView)> (1)
<android.widget.TextClock: boolean access$800(android.widget.TextView)> (1)
<android.widget.TextView$ChangeWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.ToggleButton: boolean access$800(android.widget.TextView)> (1)
<com.android.browser.UrlInputView: boolean access$800(android.widget.TextView)> (1)
<com.android.calculator2.CalculatorEditText: boolean access$800(android.widget.TextView)> (1)
<com.android.calculator2.ColorButton: boolean access$800(android.widget.TextView)> (1)
<com.android.calendar.MultiStateButton: boolean access$800(android.widget.TextView)> (1)
<com.android.calendar.recurrencepicker.WeekButton: boolean access$800(android.widget.TextView)> (2)
<com.android.camera.ui.Switch: boolean access$800(android.widget.TextView)> (1)
<com.android.datetimepicker.AccessibleTextView: boolean access$800(android.widget.TextView)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: boolean access$800(android.widget.TextView)> (1)
<com.android.deskclock.AndroidClockTextView: boolean access$800(android.widget.TextView)> (1)
<com.android.deskclock.widget.TextTime: boolean access$800(android.widget.TextView)> (1)
<com.android.development.LogTextBox: boolean access$800(android.widget.TextView)> (1)
<com.android.dreams.phototable.BummerView: boolean access$800(android.widget.TextView)> (1)
<com.android.ex.chips.RecipientEditTextView: boolean access$800(android.widget.TextView)> (1)
<com.android.ex.editstyledtext.EditStyledText: boolean access$800(android.widget.TextView)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: boolean access$800(android.widget.TextView)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: boolean access$800(android.widget.TextView)> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean access$800(android.widget.TextView)> (1)
<com.android.internal.view.menu.IconMenuItemView: boolean access$800(android.widget.TextView)> (1)
<com.android.internal.widget.DialogTitle: boolean access$800(android.widget.TextView)> (1)
<com.android.mail.browse.FolderSpanTextView: boolean access$800(android.widget.TextView)> (1)
<com.android.mail.compose.EnterSubject: boolean access$800(android.widget.TextView)> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: boolean access$800(android.widget.TextView)> (1)
<com.android.mail.ui.EmptyConversationListView: boolean access$800(android.widget.TextView)> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: boolean access$800(android.widget.TextView)> (1)
<com.android.quicksearchbox.ui.QueryTextView: boolean access$800(android.widget.TextView)> (1)
<android.inputmethodservice.ExtractButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.inputmethodservice.ExtractEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.AutoCompleteTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.Button: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.CheckBox: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.CheckedTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.Chronometer: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.CompoundButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (4)
<android.widget.DateTimeView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.DigitalClock: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.EditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.MultiAutoCompleteTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<android.widget.NumberPicker$CustomEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.RadioButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.SearchView$SearchAutoComplete: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.TextClock: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.ToggleButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.browser.UrlInputView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.calculator2.ColorButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.calendar.MultiStateButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.calendar.recurrencepicker.WeekButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.datetimepicker.AccessibleTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.deskclock.AndroidClockTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.deskclock.widget.TextTime: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.development.LogTextBox: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.dreams.phototable.BummerView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.ex.chips.RecipientEditTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.ex.editstyledtext.EditStyledText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.gallery3d.filtershow.editors.SwapButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.internal.view.menu.ActionMenuItemView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (3)
<com.android.internal.view.menu.IconMenuItemView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.internal.widget.DialogTitle: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.mail.browse.FolderSpanTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.mail.compose.EnterSubject: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.mail.ui.EllipsizedMultilineTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.mail.ui.EmptyConversationListView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.quicksearchbox.ui.QueryTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.view.accessibility.AccessibilityEvent createAccessibilityEvent(com.android.inputmethod.keyboard.Key,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: int getCellLocationId()> (1)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: android.telephony.SmsCbMessage handleGsmBroadcastSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.Phone: android.telephony.CellLocation getCellLocation()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.Phone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyCellInfo(java.util.List)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyCellInfo(java.util.List)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void notifyCellInfo(java.util.List)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void notifyCellInfo(java.util.List)> (1)
<com.android.internal.telephony.sip.SipPhone: void notifyCellInfo(java.util.List)> (2)
<com.android.packageinstaller.InstallFlowAnalytics: void setFlowFinished(byte)> (5)
<com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver: void handleOnScreenStateChange(java.lang.String)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnRotationChanged(int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnUserContextChanged()> (1)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> ()
<android.location.ILocationManager$Stub: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderStatus(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeTestProvider(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.ILocationManager$Stub: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.ILocationManager$Stub: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<android.location.ILocationManager$Stub: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<com.android.server.net.NetworkPolicyManagerService: void systemReady()> (1)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener$NativeCrashReporter: void run()> (2)
<com.android.server.UiModeManagerService: void updateAfterBroadcastLocked(java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService: void updateLocked(int,int)> (7)
<com.android.server.accessibility.AccessibilityManagerService$1: void onSomePackagesChanged()> (1)
<com.android.server.accessibility.AccessibilityManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void access$800(com.android.server.accessibility.AccessibilityManagerService,int)> (1)
<com.android.server.power.PowerManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService: void setInputMethodLocked(java.lang.String,int)> (4)
<com.android.server.InputMethodManagerService: void setSelectedInputMethodAndSubtypeLocked(android.view.inputmethod.InputMethodInfo,int,boolean)> (3)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: void enter()> (1)
<android.speech.tts.TextToSpeech: int access$1700(android.speech.tts.TextToSpeech)> (1)
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)> ()
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String,java.lang.String,boolean)> (1)
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getClientDefaultLanguage()> (2)
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.Object,int,int,android.os.Bundle,java.lang.String)> (3)
<com.android.tts.compat.CompatTtsService: java.lang.String[] access$400(android.speech.tts.TextToSpeechService)> (1)
<com.svox.pico.PicoService: java.lang.String[] access$400(android.speech.tts.TextToSpeechService)> (1)
<com.android.tts.compat.CompatTtsService: void onCreate()> (3)
<android.view.accessibility.CaptioningManager: void access$500(android.view.accessibility.CaptioningManager)> (1)
<android.view.accessibility.CaptioningManager: void access$100(android.view.accessibility.CaptioningManager)> (1)
<com.android.browser.BrowserSettings: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.browser.NetworkStateHandler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.browser.NetworkStateHandler: void onResume()> (1)
<com.android.browser.PreloadRequestReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onCreate(android.os.Bundle)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onBackPressed()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onResume()> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> ()
<com.android.internal.telephony.SMSDispatcher: void handleSendComplete(android.os.AsyncResult)> (4)
<com.android.server.am.ActivityManagerService: void installSystemProviders()> (1)
<com.android.server.CertBlacklister$BlacklistObserver: void onChange(boolean)> (1)
<com.android.server.updates.ConfigUpdateInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (7)
<android.media.AudioService: void access$8400(android.media.AudioService,boolean)> (1)
<android.media.AudioService: void reloadAudioSettings()> (2)
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<android.media.AudioService$VolumeStreamState: void <init>(android.media.AudioService,java.lang.String,int,android.media.AudioService$1)> (1)
<android.media.AudioManager: void playSoundEffect(int)> (2)
<android.text.method.TextKeyListener: void access$200(android.text.method.TextKeyListener,android.content.ContentResolver)> (1)
<android.text.method.TextKeyListener: void initPrefs(android.content.Context)> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.datetimepicker.HapticFeedbackController: boolean access$200(android.content.Context)> (1)
<com.android.datetimepicker.HapticFeedbackController: void start()> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (5)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataStallAlarm(int)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void restartDataStallAlarm()> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void startDataStallAlarm(boolean)> (6)
<com.android.internal.telephony.dataconnection.DcTracker: int getRecoveryAction()> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: void setSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: boolean isRotationFrozen()> (2)
<com.android.server.wm.InputMonitor: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.multiwaveview.MultiWaveView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: void waveUpdateFrame(float,float,boolean)> (2)
<com.android.server.input.InputManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.input.InputManagerService$7: void onChange(boolean)> (1)
<com.android.server.input.InputManagerService: void start()> (1)
<com.android.server.input.InputManagerService$8: void onChange(boolean)> (1)
<com.android.server.VibratorService$1: void onChange(boolean)> (1)
<com.android.server.VibratorService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.MediaScanner$MyMediaScannerClient: android.net.Uri doScanFile(java.lang.String,java.lang.String,long,long,boolean,boolean,boolean)> (3)
<android.media.Ringtone: void play()> (6)
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)> (3)
<android.view.VolumePanel: void onRemoteVolumeChanged(int,int)> (1)
<android.view.VolumePanel: void onRemoteVolumeUpdateIfShown()> (1)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (2)
<com.android.datetimepicker.time.TimePickerDialog$OnTimeSetListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (2)
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)> (2)
<android.widget.DigitalClock: void setFormat()> (2)
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int)> (3)
<com.android.calendar.agenda.AgendaByDayAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: java.lang.String formatDateString(int)> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (2)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildDayOfWeek()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildFullDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildMonthDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildMonthDayDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildMonthYearDate()> (1)
<com.android.calendar.CalendarViewAdapter: java.lang.String buildWeekDate()> (1)
<com.android.calendar.month.MonthWeekEventsView: int drawEvent(android.graphics.Canvas,com.android.calendar.Event,int,int,int,boolean,boolean,boolean)> (1)
<com.android.datetimepicker.date.SimpleMonthView: java.lang.String getMonthAndYearString()> (1)
<com.android.timezonepicker.TimeZoneInfo: java.lang.CharSequence getGmtDisplayName(android.content.Context)> (1)
<android.widget.TextClock: void chooseFormat(boolean)> (2)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.calendar.alerts.AlertAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.calendar.alerts.AlertReceiver: com.android.calendar.alerts.AlertService$NotificationWrapper makeDigestNotification(android.content.Context,java.util.ArrayList,java.lang.String,boolean)> (1)
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> (1)
<com.android.calendar.AllInOneActivity: void access$700(com.android.calendar.AllInOneActivity,long)> (1)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void setTitleInActionBar(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: void sendAccessibilityEventAsNeeded(boolean)> (2)
<com.android.calendar.DayFragment: void onResume()> (1)
<com.android.calendar.DayView: void init(android.content.Context)> (1)
<com.android.calendar.DayView: void onDraw(android.graphics.Canvas)> (2)
<com.android.calendar.event.EditEventView: void access$400(com.android.calendar.event.EditEventView,android.widget.TextView,long)> (2)
<com.android.calendar.event.EditEventView: void populateWhen()> (1)
<com.android.calendar.event.EditEventView: void setAllDayViewsVisibility(boolean)> (3)
<com.android.calendar.event.EditEventView: void setViewStates(int)> (1)
<com.android.calendar.event.EditEventView: void access$500(com.android.calendar.event.EditEventView)> (2)
<com.android.calendar.event.EditEventView: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventView: void setModification(int)> (3)
<com.android.calendar.month.SimpleWeekView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.calendar.EventInfoFragment: void updateEvent(android.view.View)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: void buildFromCursor(android.database.Cursor,java.lang.String)> (1)
<com.android.deskclock.AlarmClockFragment: void access$100(com.android.deskclock.AlarmClockFragment)> (2)
<com.android.deskclock.AlarmClockFragment: void onResume()> (1)
<com.android.deskclock.AlarmTimelineView: void <init>(android.content.Context,android.util.AttributeSet)> (1)
<com.android.deskclock.AlarmTimelineView: void <init>(android.content.Context)> (1)
<com.android.deskclock.alarms.AlarmNotifications: void broadcastNextAlarm(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmNotifications: void showAlarmNotification(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmNotifications: void showMissedNotification(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmNotifications: void showSnoozeNotification(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmStateManager: void scheduleInstanceStateChange(android.content.Context,java.util.Calendar,com.android.deskclock.provider.AlarmInstance,int)> (8)
<com.android.deskclock.alarms.AlarmStateManager: void setSnoozeState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmStateManager: void updateParentAlarm(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.AlarmUtils: java.lang.String getAlarmText(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.widget.TextTime: void access$000(com.android.deskclock.widget.TextTime)> (2)
<com.android.deskclock.widget.TextTime: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<com.android.deskclock.widget.TextTime: void setFormat12Hour(java.lang.CharSequence)> (1)
<com.android.deskclock.widget.TextTime: void setFormat24Hour(java.lang.CharSequence)> (1)
<com.android.deskclock.worldclock.CitiesActivity$CityAdapter: void <init>(com.android.deskclock.worldclock.CitiesActivity,android.content.Context,android.view.LayoutInflater)> (1)
<com.android.deskclock.worldclock.CitiesActivity: void onResume()> (1)
<com.android.timezonepicker.TimeZonePickerView: void <init>(android.content.Context,android.util.AttributeSet,java.lang.String,long,com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener,boolean)> (1)
<android.net.http.SslCertificate: android.view.View inflateCertificateView(android.content.Context)> (1)
<android.widget.DateTimeView$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.widget.DateTimeView$2: void onChange(boolean)> (1)
<android.widget.DateTimeView: void setTime(long)> ()
<com.android.alarmclock.DigitalAppWidgetProvider: void onAppWidgetOptionsChanged(android.content.Context,android.appwidget.AppWidgetManager,int,android.os.Bundle)> (1)
<com.android.alarmclock.DigitalAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.deskclock.ScreensaverActivity: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.deskclock.ScreensaverActivity: void onResume()> (1)
<com.android.deskclock.Screensaver: void onAttachedToWindow()> (1)
<com.android.deskclock.Screensaver: void onConfigurationChanged(android.content.res.Configuration)> (2)
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService: void resetSelectedInputMethodAndSubtypeLocked(java.lang.String)> (3)
<com.android.server.InputMethodManagerService: java.util.List getShortcutInputMethodsAndSubtypes()> (2)
<com.android.server.InputMethodManagerService: boolean access$300(com.android.server.InputMethodManagerService)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToLastInputMethod(android.os.IBinder)> ()
<com.android.internal.view.IInputMethodManager$Stub: boolean switchToLastInputMethod(android.os.IBinder)> (2)
<com.android.server.InputMethodManagerService: java.util.HashMap access$1700(com.android.server.InputMethodManagerService)> (1)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodList()> ()
<com.android.internal.view.IInputMethodManager$Stub: java.util.List getEnabledInputMethodList()> (2)
<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> (2)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.app.ResolverActivity$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.accessibility.AccessibilityManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.am.UsageStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.LocationManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.pm.UserManagerService$5: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.print.PrintManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.ServiceWatcher$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.app.IUserSwitchObserver$Stub$Proxy: void onUserSwitching(int,android.os.IRemoteCallback)> ()
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<com.android.server.power.PowerManagerService: void access$1900(com.android.server.power.PowerManagerService)> (2)
<android.print.IPrintManager$Stub$Proxy: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)> ()
<android.print.IPrintManager$Stub: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)> (2)
<android.print.IPrintManager$Stub$Proxy: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> ()
<android.print.IPrintManager$Stub: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> (2)
<com.android.server.print.PrintManagerService$3: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.print.PrintManagerService$3: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.print.PrintManagerService$3: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.print.PrintManagerService: com.android.server.print.UserState access$100(com.android.server.print.PrintManagerService)> (2)
<com.android.server.print.PrintManagerService: void switchUser(int)> (1)
<android.print.IPrintManager$Stub$Proxy: java.util.List getEnabledPrintServices(int)> ()
<android.print.IPrintManager$Stub: java.util.List getEnabledPrintServices(int)> (2)
<android.print.IPrintManager$Stub$Proxy: java.util.List getInstalledPrintServices(int)> ()
<android.print.IPrintManager$Stub: java.util.List getInstalledPrintServices(int)> (2)
<android.print.IPrintManager$Stub$Proxy: java.util.List getPrintJobInfos(int,int)> ()
<android.print.IPrintManager$Stub: java.util.List getPrintJobInfos(int,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)> ()
<android.print.IPrintManager$Stub: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void cancelPrintJob(android.print.PrintJobId,int,int)> ()
<android.print.IPrintManager$Stub: void cancelPrintJob(android.print.PrintJobId,int,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> ()
<android.print.IPrintManager$Stub: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> ()
<android.print.IPrintManager$Stub: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)> ()
<android.print.IPrintManager$Stub: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void restartPrintJob(android.print.PrintJobId,int,int)> ()
<android.print.IPrintManager$Stub: void restartPrintJob(android.print.PrintJobId,int,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)> ()
<android.print.IPrintManager$Stub: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void startPrinterStateTracking(android.print.PrinterId,int)> ()
<android.print.IPrintManager$Stub: void startPrinterStateTracking(android.print.PrinterId,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)> ()
<android.print.IPrintManager$Stub: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void stopPrinterStateTracking(android.print.PrinterId,int)> ()
<android.print.IPrintManager$Stub: void stopPrinterStateTracking(android.print.PrinterId,int)> (2)
<android.print.IPrintManager$Stub$Proxy: void validatePrinters(java.util.List,int)> ()
<android.print.IPrintManager$Stub: void validatePrinters(java.util.List,int)> (2)
<com.android.server.print.PrintManagerService$1: void run()> (1)
<com.android.server.print.PrintManagerService$2: void onChange(boolean,android.net.Uri)> (1)
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean)> (3)
<com.android.server.TextServicesManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellChecker()> (1)
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)> (1)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellChecker(java.lang.String,java.lang.String)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: void setCurrentSpellChecker(java.lang.String,java.lang.String)> (2)
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void setCurrentSpellCheckerSubtype(java.lang.String,int)> ()
<com.android.internal.textservice.ITextServicesManager$Stub: void setCurrentSpellCheckerSubtype(java.lang.String,int)> (2)
<com.android.server.TextServicesManagerService$1: void onUserSwitching(int,android.os.IRemoteCallback)> (2)
<com.android.internal.widget.ILockSettings: boolean checkPassword(java.lang.String,int)> (1)
<com.android.internal.widget.ILockSettings: void setLockPassword(java.lang.String,int)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<android.location.ILocationManager$Stub$Proxy: void reportLocation(android.location.Location,boolean)> ()
<android.location.ILocationManager$Stub: void reportLocation(android.location.Location,boolean)> (2)
<com.android.internal.content.PackageMonitor: void onPackageDisappeared(java.lang.String,int)> (14)
<com.android.server.LocationManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.WebVttRenderingWidget: void <init>(android.content.Context)> (3)
<android.media.SubtitleTrack$RenderingWidget: void setVisible(boolean)> (2)
<android.view.accessibility.CaptioningManager$1: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void access$1700(com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler,android.view.MotionEvent,int)> (2)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (2)
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (2)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleModeChange()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleShift()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (1)
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: int getSpeechRate()> (2)
<com.android.tts.compat.CompatTtsService: int access$600(android.speech.tts.TextToSpeechService)> (1)
<com.svox.pico.PicoService: int access$600(android.speech.tts.TextToSpeechService)> (1)
<android.widget.Switch: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.camera.ui.Switch: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: void sendAccessibilityEventForVirtualText(int)> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (2)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void sendAccessibilityEventForKey(com.android.inputmethod.keyboard.Key,int)> (2)
<com.android.inputmethod.latin.LatinIME: void access$1000(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: boolean handleSmsMessage(android.os.Message)> (2)
<com.android.internal.telephony.DefaultPhoneNotifier: void notifyCellLocation(com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()> (1)
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (3)
<com.android.internal.telephony.ServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (5)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.packageinstaller.InstallAppProgress: void onCreate(android.os.Bundle)> (1)
<com.android.packageinstaller.InstallFlowAnalytics: void setFlowFinishedWithPackageManagerResult(int)> (1)
<com.android.packageinstaller.PackageInstallerActivity: void onBackPressed()> (1)
<com.android.packageinstaller.PackageInstallerActivity: void onClick(android.view.View)> (1)
<com.android.packageinstaller.PackageInstallerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver: void access$2900(com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver,java.lang.String)> (1)
<com.android.server.accessibility.ScreenMagnifier: void access$300(com.android.server.accessibility.ScreenMagnifier,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void access$200(com.android.server.accessibility.ScreenMagnifier)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)> (1)
<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)> (1)
<android.location.ILocationManager: void removeTestProvider(java.lang.String)> (1)
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (1)
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (1)
<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (1)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.NativeCrashListener: void consumeNativeCrashData(java.io.FileDescriptor)> (1)
<com.android.server.UiModeManagerService: void access$000(com.android.server.UiModeManagerService,java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService: void access$400(com.android.server.UiModeManagerService,int,int)> (1)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<com.android.server.UiModeManagerService: void updateDockState(int)> (1)
<com.android.server.UiModeManagerService: void updateTwilight()> (1)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> ()
<com.android.internal.view.IInputMethodManager$Stub: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService$7: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.internal.util.State: void enter()> (36)
<android.speech.tts.TextToSpeech$Connection: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String,boolean,boolean)> (1)
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String)> (1)
<android.speech.tts.ITextToSpeechService$Stub$Proxy: java.lang.String[] getClientDefaultLanguage()> ()
<android.speech.tts.ITextToSpeechService$Stub: java.lang.String[] getClientDefaultLanguage()> (2)
<android.speech.tts.TextToSpeechService$1: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> (2)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.Object,int,int,android.os.Bundle,java.lang.String,java.io.FileOutputStream)> (1)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.Object,int,int,android.os.Bundle,java.lang.String)> (1)
<com.svox.pico.PicoService: void onCreate()> (3)
<android.view.accessibility.CaptioningManager$2: void run()> (1)
<com.android.browser.Controller: void onResume()> (1)
<com.android.internal.content.PackageMonitor: void onPackageAppeared(java.lang.String,int)> (15)
<com.android.internal.content.PackageMonitor: void onPackageModified(java.lang.String)> (13)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void handleSendComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleSendComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void handleSendComplete(android.os.AsyncResult)> (1)
<com.android.server.updates.CarrierProvisioningUrlsInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.CertPinInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.IntentFirewallInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.SELinuxPolicyInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.SmsShortCodesInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.updates.TZInfoInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> (2)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.IAudioService$Stub$Proxy: void reloadAudioSettings()> ()
<android.media.IAudioService$Stub: void reloadAudioSettings()> (2)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<android.media.AudioService: void createStreamStates()> (1)
<android.view.ViewRootImpl: void playSoundEffect(int)> (2)
<com.android.internal.policy.impl.PhoneWindow: void onKeyUpPanel(int,android.view.KeyEvent)> (1)
<android.text.method.TextKeyListener$SettingsObserver: void onChange(boolean)> (1)
<android.text.method.TextKeyListener: int getPrefs(android.content.Context)> (3)
<com.android.camera.CameraModule: void onResumeAfterSuper()> ()
<com.android.datetimepicker.HapticFeedbackController$1: void onChange(boolean)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onResume()> (2)
<com.android.datetimepicker.time.TimePickerDialog: void onResume()> (2)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (2)
<com.android.gallery3d.app.DialogPicker: void onResume()> (2)
<com.android.gallery3d.app.GalleryActivity: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onPollPdp()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataStallAlarm(int)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void restartDataStallAlarm()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void startDataStallAlarm(boolean)> (5)
<com.android.internal.telephony.dataconnection.DcTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.server.wm.WindowManagerService: boolean detectSafeMode()> (1)
<android.view.IWindowManager$Stub$Proxy: boolean isRotationFrozen()> ()
<android.view.IWindowManager$Stub: boolean isRotationFrozen()> (2)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void access$300(com.android.internal.widget.multiwaveview.MultiWaveView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void onDraw(android.graphics.Canvas)> (1)
<android.media.MediaScanner: android.net.Uri scanSingleFile(java.lang.String,java.lang.String,java.lang.String)> ()
<android.media.MediaScanner$MyMediaScannerClient: void scanFile(java.lang.String,long,long,boolean,boolean)> (1)
<android.media.MediaScanner: void scanMtpFile(java.lang.String,java.lang.String,int,int)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void onStartSample()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void performAuditoryFeedbackForAccessibilityIfNeed()> (1)
<com.android.server.DockObserver: void handleDockStateChange()> (1)
<com.android.server.power.Notifier: void playWirelessChargingStartedSound()> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: java.lang.String getRingToneTitle(android.net.Uri)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void setRingtoneSummary()> (2)
<android.view.VolumePanel: void onMuteChanged(int,int)> (1)
<com.android.datetimepicker.time.TimePickerDialog$3: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean processKeyUp(int)> (1)
<android.widget.DateTimeView: java.text.DateFormat getTimeFormat()> (1)
<android.widget.DigitalClock: void access$300(android.widget.DigitalClock)> (1)
<android.widget.DigitalClock: void initClock()> (2)
<android.text.format.DateUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (6)
<com.android.mail.FormattedDateBuilder: java.lang.CharSequence formatLongDayAndDate(long)> (1)
<com.android.mail.FormattedDateBuilder: java.lang.CharSequence formatLongTime(long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void updateHeaderFooter(int,int)> (1)
<com.android.calendar.Utils: java.lang.String formatDateRange(android.content.Context,long,long,int)> (15)
<com.android.calendar.Utils: java.lang.String getDayOfWeekString(int,int,long,android.content.Context)> (2)
<com.android.calendar.CalendarViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.CalendarViewAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.month.MonthWeekEventsView: void drawEvents(android.graphics.Canvas)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void drawMonthTitle(android.graphics.Canvas)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<android.widget.TextClock: void chooseFormat()> (3)
<android.widget.TextClock: void init()> (2)
<com.android.alarmclock.DigitalWidgetViewsFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (6)
<com.android.calendar.AllInOneActivity$2: void run()> (1)
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean setSelectionFromPosition(int,int,boolean)> (4)
<com.android.calendar.DayView: void setSelected(android.text.format.Time,boolean,boolean)> (3)
<com.android.calendar.DayView: void <init>(android.content.Context,com.android.calendar.CalendarController,android.widget.ViewSwitcher,com.android.calendar.EventLoader,int)> (1)
<com.android.calendar.event.EditEventView$DateListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.calendar.event.EditEventView$TimeListener: void onTimeSet(com.android.datetimepicker.time.RadialPickerLayout,int,int)> (1)
<com.android.calendar.event.EditEventView: void setModel(com.android.calendar.CalendarEventModel)> (3)
<com.android.calendar.event.EditEventView$4: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.calendar.event.EditEventView: void updateView()> (2)
<com.android.timezonepicker.TimeZonePickerDialog$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventFragment$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventFragment: void setModelIfDone(int)> (1)
<com.android.calendar.event.EditEventFragment: void startQuery()> (1)
<com.android.calendar.EventInfoFragment: void access$100(com.android.calendar.EventInfoFragment,android.view.View)> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: com.android.calendar.widget.CalendarAppWidgetModel buildAppWidgetModel(android.content.Context,android.database.Cursor,java.lang.String)> (1)
<com.android.deskclock.AlarmClockFragment$1: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmClockFragment$2: void onClick(android.view.View)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void updateNextAlarm(android.content.Context)> (8)
<com.android.deskclock.alarms.AlarmService: void startAlarm(com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void setMissedState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (3)
<com.android.deskclock.alarms.AlarmStateManager: void registerInstance(android.content.Context,com.android.deskclock.provider.AlarmInstance,boolean)> (5)
<com.android.deskclock.alarms.AlarmStateManager: void setFiredState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmStateManager: void setHideNotificationState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmStateManager: void setHighNotificationState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmStateManager: void setLowNotificationState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmStateManager: void setSilentState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmActivity: void snooze()> (2)
<com.android.deskclock.alarms.AlarmStateManager: void setAlarmState(android.content.Context,com.android.deskclock.provider.AlarmInstance,int)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void setDismissState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (4)
<com.android.deskclock.alarms.AlarmNotifications: void showHighPriorityNotification(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmNotifications: void showLowPriorityNotification(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.widget.TextTime$1: void onChange(boolean,android.net.Uri)> (1)
<com.android.deskclock.widget.TextTime$1: void onChange(boolean)> (1)
<com.android.deskclock.widget.TextTime: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.deskclock.widget.TextTime: void setFormat(int)> (1)
<com.android.deskclock.worldclock.CitiesActivity: void updateLayout()> (1)
<com.android.timezonepicker.TimeZonePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (2)
<com.android.browser.PageDialogsHandler: android.app.AlertDialog$Builder createSslCertificateDialog(android.net.http.SslCertificate,android.net.http.SslError)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> ()
<com.android.internal.view.IInputMethodManager$Stub: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> (2)
<com.android.server.InputMethodManagerService: void access$200(com.android.server.InputMethodManagerService,java.lang.String)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getShortcutInputMethodsAndSubtypes()> ()
<com.android.internal.view.IInputMethodManager$Stub: java.util.List getShortcutInputMethodsAndSubtypes()> (2)
<com.android.internal.view.IInputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)> (1)
<com.android.internal.view.IInputMethodManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList(boolean,boolean,boolean)> (2)
<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodList()> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> ()
<com.android.internal.view.IInputMethodManager$Stub: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> (2)
<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()> (2)
<android.print.IPrintManager: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)> (1)
<android.print.IPrintManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.print.IPrintManager: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)> (2)
<com.android.internal.content.PackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (14)
<com.android.internal.content.PackageMonitor: void onPackageRemoved(java.lang.String,int)> (11)
<com.android.server.print.PrintManagerService: void access$500(com.android.server.print.PrintManagerService,int)> (1)
<android.print.IPrintManager: java.util.List getEnabledPrintServices(int)> (1)
<android.print.IPrintManager: java.util.List getInstalledPrintServices(int)> (1)
<android.print.IPrintManager: java.util.List getPrintJobInfos(int,int)> (1)
<android.print.IPrintManager: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)> (1)
<android.print.IPrintManager: void cancelPrintJob(android.print.PrintJobId,int,int)> (2)
<android.print.IPrintManager: void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> (1)
<android.print.IPrintManager: void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver,int)> (1)
<android.print.IPrintManager: void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int)> (1)
<android.print.IPrintManager: void restartPrintJob(android.print.PrintJobId,int,int)> (2)
<android.print.IPrintManager: void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver,java.util.List,int)> (1)
<android.print.IPrintManager: void startPrinterStateTracking(android.print.PrinterId,int)> (1)
<android.print.IPrintManager: void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver,int)> (1)
<android.print.IPrintManager: void stopPrinterStateTracking(android.print.PrinterId,int)> (1)
<android.print.IPrintManager: void validatePrinters(java.util.List,int)> (1)
<android.widget.SpellChecker: void resetSession()> (2)
<android.widget.TextView: void updateTextServicesLocaleLocked()> (44)
<com.android.internal.inputmethod.InputMethodUtils: void setNonSelectedSystemImesDisabledUntilUsed(android.content.pm.PackageManager,java.util.List)> (2)
<com.android.internal.textservice.ITextServicesManager: void setCurrentSpellChecker(java.lang.String,java.lang.String)> (1)
<com.android.internal.textservice.ITextServicesManager: void setCurrentSpellCheckerSubtype(java.lang.String,int)> (1)
<com.android.internal.widget.LockPatternUtils: boolean checkPassword(java.lang.String)> ()
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<android.location.ILocationManager: void reportLocation(android.location.Location,boolean)> (4)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.am.UsageStatsService$2: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.pm.UserManagerService$5: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.print.PrintManagerService$3: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.ServiceWatcher$2: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<android.media.WebVttRenderer: android.media.SubtitleTrack createTrack(android.media.MediaFormat)> (1)
<android.media.SubtitleTrack: void hide()> (3)
<android.media.SubtitleTrack: void show()> (3)
<com.android.server.accessibility.EventStreamTransformation: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (3)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void sendDelayedMotionEvents()> (2)
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void onKey(int,int[])> (1)
<android.speech.tts.TextToSpeechService$SynthesisSpeechItem: void setRequestParams(android.speech.tts.SynthesisRequest)> (2)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: int getSpeechRate()> (1)
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: void sendAccessibilityEventForVirtualView(int,int)> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performActionForKey(com.android.inputmethod.keyboard.Key,int,android.os.Bundle)> (2)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onHoverKey(com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDataSetupComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.CellBroadcastHandler: boolean handleSmsMessage(android.os.Message)> (2)
<com.android.internal.telephony.WakeLockStateMachine: boolean handleSmsMessage(android.os.Message)> (1)
<com.android.internal.telephony.PhoneNotifier: void notifyCellLocation(com.android.internal.telephony.Phone)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean onSignalStrengthResult(android.os.AsyncResult,boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (4)
<com.android.server.accessibility.ScreenMagnifier: void onUserContextChanged()> (2)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> ()
<android.location.LocationManager: void removeTestProvider(java.lang.String)> ()
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener: void run()> (2)
<com.android.server.UiModeManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService: void access$100(com.android.server.UiModeManagerService,int)> (1)
<com.android.server.UiModeManagerService: void access$500(com.android.server.UiModeManagerService)> (1)
<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (1)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> ()
<com.android.internal.view.IInputMethodManager$Stub: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (2)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<android.speech.tts.TextToSpeech: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String,boolean,boolean)> (2)
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)> (1)
<android.speech.tts.ITextToSpeechService: java.lang.String[] getClientDefaultLanguage()> (2)
<android.speech.tts.ITextToSpeechService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> ()
<android.speech.tts.ITextToSpeechService$Stub: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> (2)
<android.speech.tts.TextToSpeechService$1: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> (2)
<com.android.browser.ActivityController: void onResume()> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.am.UsageStatsService$2: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.LocationManagerService$4: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.pm.UserManagerService$5: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.print.PrintManagerService$3: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.ServiceWatcher$2: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageAppeared(java.lang.String,int)> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageModified(java.lang.String)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageModified(java.lang.String)> (1)
<com.android.server.am.UsageStatsService$2: void onPackageModified(java.lang.String)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.server.LocationManagerService$4: void onPackageModified(java.lang.String)> (1)
<com.android.server.pm.UserManagerService$5: void onPackageModified(java.lang.String)> (1)
<com.android.server.print.PrintManagerService$3: void onPackageModified(java.lang.String)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.server.ServiceWatcher$2: void onPackageModified(java.lang.String)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onPackageModified(java.lang.String)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void reloadAudioSettings()> (1)
<com.android.server.am.ActivityManagerService$13$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.view.View$AttachInfo$Callbacks: void playSoundEffect(int)> (1)
<android.view.ViewRootImpl$ViewPostImeInputStage: int processKeyEvent(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow: boolean onKeyUp(int,int,android.view.KeyEvent)> (1)
<android.text.method.MultiTapKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> (2)
<android.text.method.PasswordTransformationMethod: void onTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.text.method.QwertyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onDataConnectionAttached()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onVoiceCallEnded()> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.IWindowManager: boolean isRotationFrozen()> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.input.InputManagerService: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<android.media.MediaScannerClient: void scanFile(java.lang.String,long,long,boolean,boolean)> ()
<android.mtp.MtpDatabase: void endSendObject(java.lang.String,int,int,boolean)> ()
<com.android.internal.policy.impl.PhoneWindowManager: void access$200(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.server.DockObserver: void access$000(com.android.server.DockObserver)> (2)
<com.android.server.power.Notifier: void access$700(com.android.server.power.Notifier)> (2)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.GeneralPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void bindExpandArea(com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$ItemHolder,com.android.deskclock.provider.Alarm)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void access$1300(com.android.email.activity.setup.AccountSettingsFragment)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void setRingtone(android.net.Uri)> (1)
<com.android.datetimepicker.time.TimePickerDialog: boolean access$800(com.android.datetimepicker.time.TimePickerDialog,int)> (1)
<android.widget.DigitalClock$FormatChangeObserver: void onChange(boolean)> (1)
<android.widget.DigitalClock: void <init>(android.content.Context,android.util.AttributeSet)> (2)
<android.widget.DigitalClock: void <init>(android.content.Context)> (2)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)> ()
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)> (2)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)> (2)
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)> (18)
<android.widget.CalendarView: void setMonthDisplayed(java.util.Calendar)> (3)
<com.android.gallery3d.data.Cluster: java.lang.String generateCaption(android.content.Context)> (1)
<com.android.mail.FormattedDateBuilder: java.lang.CharSequence formatLongDateTime(long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$2400(com.android.calendar.agenda.AgendaWindowAdapter,int,int)> (1)
<com.android.calendar.DayView: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> (1)
<com.android.calendar.Utils: java.lang.String formatMonthYear(android.content.Context,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetModel: com.android.calendar.widget.CalendarAppWidgetModel$DayInfo populateDayInfo(int,android.text.format.Time)> (1)
<com.android.calendar.widget.CalendarAppWidgetProvider: void performUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[],long[])> (2)
<com.android.calendar.month.MonthWeekEventsView: void onDraw(android.graphics.Canvas)> (2)
<com.android.datetimepicker.date.SimpleMonthView: void onDraw(android.graphics.Canvas)> (1)
<android.widget.TextClock: void access$000(android.widget.TextClock)> (2)
<android.widget.TextClock: void setFormat12Hour(java.lang.CharSequence)> (1)
<android.widget.TextClock: void setFormat24Hour(java.lang.CharSequence)> (1)
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet,int)> (3)
<android.widget.TextClock: void <init>(android.content.Context)> (2)
<com.android.calendar.alerts.AlertActivity$3: java.lang.Void doInBackground(android.content.Context[])> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Void doInBackground(android.util.Pair[])> (1)
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.DayView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doLongPress(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View makeView()> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.datetimepicker.date.DatePickerDialog$OnDateSetListener: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.calendar.event.EditEventFragment: void onDestroy()> (1)
<com.android.calendar.event.EditEventView: void <init>(android.app.Activity,android.view.View,com.android.calendar.event.EditEventHelper$EditDoneRunnable,boolean,boolean)> (1)
<com.android.timezonepicker.TimeZonePickerDialog: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventFragment: void access$800(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.EventInfoFragment$1: void run()> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,android.database.Cursor)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void deleteAllInstances(android.content.Context,long)> (3)
<com.android.deskclock.alarms.AlarmStateManager: void fixAlarmInstances(android.content.Context)> (1)
<com.android.deskclock.DeskClock: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.alarms.AlarmService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.deskclock.AlarmClockFragment: com.android.deskclock.provider.AlarmInstance setupAlarmInstance(android.content.Context,com.android.deskclock.provider.Alarm)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void handleIntent(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.HandleApiCalls: void setupInstance(com.android.deskclock.provider.AlarmInstance,boolean)> (1)
<com.android.deskclock.alarms.AlarmActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.deskclock.alarms.AlarmActivity: void access$200(com.android.deskclock.alarms.AlarmActivity)> (2)
<com.android.deskclock.alarms.AlarmActivity: void dismiss()> (2)
<com.android.deskclock.widget.TextTime: void <init>(android.content.Context)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (3)
<com.android.deskclock.worldclock.CitiesActivity: void onCreate(android.os.Bundle)> (1)
<com.android.browser.PageDialogsHandler: void showSSLCertificate(com.android.browser.Tab)> (2)
<com.android.browser.PageDialogsHandler: void showSSLCertificateOnError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (5)
<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> (1)
<com.android.internal.view.IInputMethodManager: java.util.List getShortcutInputMethodsAndSubtypes()> (1)
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)> ()
<com.android.server.InputMethodManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: java.util.List getSortedInputMethodAndSubtypeList()> (1)
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()> (4)
<com.android.commands.ime.Ime: void runList()> (1)
<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)> (1)
<com.android.server.power.PowerManagerService: void access$1500(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void updateDreamLocked(int)> (1)
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)> (2)
<com.android.server.print.PrintManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.print.PrintManager: android.print.PrintJob getPrintJob(android.print.PrintJobId)> ()
<android.print.PrintManager: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId)> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.internal.app.ResolverActivity$1: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.am.UsageStatsService$2: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.LocationManagerService$4: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.pm.UserManagerService$5: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.ServiceWatcher$2: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.WallpaperManagerService$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.am.UsageStatsService$2: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.LocationManagerService$4: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.print.PrintManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.print.PrintManager: java.util.List getEnabledPrintServices()> (3)
<android.print.PrintManager: java.util.List getInstalledPrintServices()> ()
<android.print.PrintManager: java.util.List getPrintJobs()> ()
<android.print.PrintManager: void addPrintJobStateChangeListener(android.print.PrintManager$PrintJobStateChangeListener)> ()
<android.print.PrintManager: void cancelPrintJob(android.print.PrintJobId)> (1)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<android.print.PrinterDiscoverySession: void <init>(android.print.IPrintManager,android.content.Context,int)> (1)
<android.print.PrinterDiscoverySession: void destroyNoCheck()> (2)
<android.print.PrintManager: void removePrintJobStateChangeListener(android.print.PrintManager$PrintJobStateChangeListener)> ()
<android.print.PrintManager: void restartPrintJob(android.print.PrintJobId)> (1)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$2: java.lang.Void doInBackground(java.lang.Void[])> (1)
<android.print.PrinterDiscoverySession: void startPrinterDisovery(java.util.List)> (1)
<android.print.PrinterDiscoverySession: void startPrinterStateTracking(android.print.PrinterId)> (1)
<android.print.PrinterDiscoverySession: void stopPrinterDiscovery()> (2)
<android.print.PrinterDiscoverySession: void stopPrinterStateTracking(android.print.PrinterId)> (2)
<android.print.PrinterDiscoverySession: void validatePrinters(java.util.List)> ()
<android.widget.SpellChecker: void setLocale(java.util.Locale)> (2)
<android.widget.SpellChecker: void spellCheck(int,int)> (1)
<android.inputmethodservice.ExtractButton: void updateTextServicesLocaleLocked()> (1)
<android.inputmethodservice.ExtractEditText: void updateTextServicesLocaleLocked()> (1)
<android.widget.AutoCompleteTextView: void updateTextServicesLocaleLocked()> (1)
<android.widget.Button: void updateTextServicesLocaleLocked()> (1)
<android.widget.CheckBox: void updateTextServicesLocaleLocked()> (1)
<android.widget.CheckedTextView: void updateTextServicesLocaleLocked()> (1)
<android.widget.Chronometer: void updateTextServicesLocaleLocked()> (1)
<android.widget.CompoundButton: void updateTextServicesLocaleLocked()> (1)
<android.widget.DateTimeView: void updateTextServicesLocaleLocked()> (1)
<android.widget.DigitalClock: void updateTextServicesLocaleLocked()> (1)
<android.widget.EditText: void updateTextServicesLocaleLocked()> (1)
<android.widget.MultiAutoCompleteTextView: void updateTextServicesLocaleLocked()> (1)
<android.widget.NumberPicker$CustomEditText: void updateTextServicesLocaleLocked()> (1)
<android.widget.RadioButton: void updateTextServicesLocaleLocked()> (1)
<android.widget.SearchView$SearchAutoComplete: void updateTextServicesLocaleLocked()> (1)
<android.widget.Switch: void updateTextServicesLocaleLocked()> (1)
<android.widget.TextClock: void updateTextServicesLocaleLocked()> (1)
<android.widget.TextView: void access$200(android.widget.TextView)> (44)
<android.widget.ToggleButton: void updateTextServicesLocaleLocked()> (1)
<com.android.browser.UrlInputView: void updateTextServicesLocaleLocked()> (1)
<com.android.calculator2.CalculatorEditText: void updateTextServicesLocaleLocked()> (1)
<com.android.calculator2.ColorButton: void updateTextServicesLocaleLocked()> (1)
<com.android.calendar.MultiStateButton: void updateTextServicesLocaleLocked()> (1)
<com.android.calendar.recurrencepicker.WeekButton: void updateTextServicesLocaleLocked()> (2)
<com.android.camera.ui.Switch: void updateTextServicesLocaleLocked()> (1)
<com.android.datetimepicker.AccessibleTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void updateTextServicesLocaleLocked()> (1)
<com.android.deskclock.AndroidClockTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.deskclock.widget.TextTime: void updateTextServicesLocaleLocked()> (1)
<com.android.development.LogTextBox: void updateTextServicesLocaleLocked()> (1)
<com.android.dreams.phototable.BummerView: void updateTextServicesLocaleLocked()> (1)
<com.android.ex.chips.RecipientEditTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.ex.editstyledtext.EditStyledText: void updateTextServicesLocaleLocked()> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: void updateTextServicesLocaleLocked()> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.view.menu.ActionMenuItemView: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.view.menu.IconMenuItemView: void updateTextServicesLocaleLocked()> (1)
<com.android.internal.widget.DialogTitle: void updateTextServicesLocaleLocked()> (1)
<com.android.mail.browse.FolderSpanTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.mail.compose.EnterSubject: void updateTextServicesLocaleLocked()> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: void updateTextServicesLocaleLocked()> (1)
<com.android.mail.ui.EmptyConversationListView: void updateTextServicesLocaleLocked()> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: void updateTextServicesLocaleLocked()> (1)
<com.android.quicksearchbox.ui.QueryTextView: void updateTextServicesLocaleLocked()> (1)
<android.view.textservice.TextServicesManager: void setCurrentSpellChecker(android.view.textservice.SpellCheckerInfo)> ()
<android.view.textservice.TextServicesManager: void setSpellCheckerSubtype(android.view.textservice.SpellCheckerSubtype)> ()
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<com.android.location.provider.LocationProviderBase: void reportLocation(android.location.Location)> ()
<com.android.server.location.GpsLocationProvider: void reportLocation(int,double,double,double,float,float,float,long)> ()
<com.android.server.location.MockProvider: void setLocation(android.location.Location)> (1)
<com.android.server.location.PassiveProvider: void updateLocation(android.location.Location)> (1)
<android.media.SubtitleController$Renderer: android.media.SubtitleTrack createTrack(android.media.MediaFormat)> (1)
<android.media.SubtitleController: void doHide()> (1)
<android.media.SubtitleController: void doSelectTrack(android.media.SubtitleTrack)> (1)
<android.media.WebVttTrack: void hide()> (1)
<android.media.SubtitleController: void doShow()> (1)
<android.media.WebVttTrack: void show()> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void handleMotionEvent(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleMotionEventStateDelegating(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendMotionEvent(android.view.MotionEvent,int,int,int)> (9)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void access$1800(com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler)> (2)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void transitionToDelegatingStateAndClear()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<android.speech.tts.TextToSpeechService$SynthesisToFileOutputStreamSpeechItem: void setRequestParams(android.speech.tts.SynthesisRequest)> (1)
<android.widget.NumberPicker$AccessibilityNodeProviderImpl: boolean performAction(int,int,android.os.Bundle)> (2)
<android.widget.NumberPicker: boolean dispatchHoverEvent(android.view.MotionEvent)> (2)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onTransitionKey(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.telephony.WakeLockStateMachine$IdleState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void notifyLocationChanged()> (5)
<com.android.internal.telephony.gsm.GSMPhone: void notifyLocationChanged()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<android.view.IMagnificationCallbacks$Stub$Proxy: void onUserContextChanged()> ()
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> (1)
<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()> (1)
<com.android.server.UiModeManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$4: void onTwilightStateChanged()> (1)
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()> (4)
<com.android.internal.view.IInputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<android.speech.tts.TextToSpeech: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String)> (11)
<android.speech.tts.TextToSpeech: java.lang.Object runActionNoReconnect(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String,boolean)> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: void <init>(android.content.Context)> (1)
<android.speech.tts.TextToSpeech$8: java.util.Locale run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask: java.lang.Integer doInBackground(java.lang.Void[])> (1)
<android.speech.tts.TextToSpeechService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.speech.tts.ITextToSpeechService: int speak(android.os.IBinder,java.lang.String,int,android.os.Bundle)> (1)
<android.speech.tts.ITextToSpeechService$Stub$Proxy: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> ()
<android.speech.tts.ITextToSpeechService$Stub: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> (2)
<com.android.browser.BrowserActivity: void onResume()> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void reloadAudioSettings()> ()
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<android.view.View: void playSoundEffect(int)> (441)
<android.view.ViewRootImpl$ViewPostImeInputStage: int onProcess(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void completeConnection(com.android.internal.telephony.dataconnection.ApnContext)> ()
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onVoiceCallEnded()> (1)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<android.app.UiAutomationConnection: void storeRotationStateLocked()> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.DockObserver: void updateLocked()> (2)
<com.android.server.power.Notifier: void onWirelessChargingStarted()> (1)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void expandAlarm(com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$ItemHolder,boolean)> (2)
<com.android.email.activity.setup.AccountSettingsFragment$1$1: void run()> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<com.android.datetimepicker.time.TimePickerDialog$KeyboardListener: boolean onKey(android.view.View,int,android.view.KeyEvent)> (1)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)> (4)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long)> (1)
<android.app.DatePickerDialog: void updateTitle(int,int,int)> (2)
<android.telephony.CellBroadcastMessage: java.lang.String getDateString(android.content.Context)> ()
<android.telephony.CellBroadcastMessage: java.lang.String getSpokenDateString(android.content.Context)> ()
<android.widget.AnalogClock: void updateContentDescription(android.text.format.Time)> (1)
<android.widget.DatePicker: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<android.widget.TimePicker: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (2)
<com.android.calendar.event.EditEventView: void setDate(android.widget.TextView,long)> (3)
<com.android.calendar.EventRecurrenceFormatter: java.lang.String getRepeatString(android.content.Context,android.content.res.Resources,com.android.calendarcommon2.EventRecurrence,boolean)> (2)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void updateDialog()> (5)
<com.android.datetimepicker.date.AccessibleDateAnimator: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void setCurrentView(int)> (3)
<com.android.datetimepicker.date.DatePickerDialog: void updateDisplay(boolean)> (3)
<com.android.datetimepicker.time.RadialPickerLayout: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (1)
<com.android.deskclock.AnalogClock: void updateContentDescription(android.text.format.Time)> (1)
<com.android.documentsui.DirectoryFragment: java.lang.String formatTime(android.content.Context,long)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void refreshInterface()> (2)
<android.widget.CalendarView: void access$2200(android.widget.CalendarView,java.util.Calendar)> (1)
<android.widget.CalendarView: void goTo(java.util.Calendar,boolean,boolean,boolean)> (4)
<android.widget.CalendarView: void onScroll(android.widget.AbsListView,int,int,int)> (1)
<com.android.gallery3d.data.TimeClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem: void ensureTimestamps()> (2)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (4)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.calendar.widget.CalendarAppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> (1)
<com.android.calendar.month.SimpleWeekView: void onDraw(android.graphics.Canvas)> (1)
<android.widget.TextClock$1: void onChange(boolean,android.net.Uri)> (1)
<android.widget.TextClock$1: void onChange(boolean)> (1)
<com.android.deskclock.Utils: void setTimeFormat(android.widget.TextClock,int)> (6)
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet)> (2)
<com.android.calendar.alerts.AlertActivity$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (10)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtraWithTitleWithCalendarId(java.lang.Object,long,long,long,long,int,int,long,long,java.lang.String,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.DayView: void access$5100(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$4600(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$4500(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.datetimepicker.date.DatePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onLoadComplete(android.content.Loader,java.lang.Object)> (1)
<com.android.deskclock.AlarmClockFragment$7: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.deskclock.AlarmClockFragment$9: com.android.deskclock.provider.AlarmInstance doInBackground(java.lang.Void[])> (1)
<com.android.deskclock.HandleApiCalls: void handleSetAlarm(android.content.Intent)> (1)
<com.android.deskclock.AlarmInitReceiver$1: void run()> (1)
<com.android.deskclock.AlarmClockFragment: com.android.deskclock.provider.AlarmInstance access$4600(android.content.Context,com.android.deskclock.provider.Alarm)> (2)
<com.android.deskclock.alarms.AlarmStateManager: void access$000(com.android.deskclock.alarms.AlarmStateManager,android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.alarms.AlarmActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.alarms.AlarmActivity$GlowPadController: void onTrigger(android.view.View,int)> (1)
<com.android.deskclock.alarms.AlarmActivity: void access$300(com.android.deskclock.alarms.AlarmActivity)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.browser.PageDialogsHandler: void access$700(com.android.browser.PageDialogsHandler,com.android.browser.Tab)> (1)
<com.android.browser.PageDialogsHandler: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.browser.Controller: void showSslCertificateOnError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<com.android.browser.PageDialogsHandler$3: void onCancel(android.content.DialogInterface)> (1)
<com.android.browser.PageDialogsHandler$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.browser.PageDialogsHandler$5: void onClick(android.content.DialogInterface,int)> (1)
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()> ()
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()> (1)
<com.android.server.InputMethodManagerService$InputMethodAndSubtypeListManager: com.android.server.InputMethodManagerService$ImeSubtypeListItem getNextInputMethod(boolean,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.inputmethod.latin.RichInputMethodManager: boolean hasMultipleEnabledIMEsOrSubtypes(boolean)> (3)
<com.android.inputmethod.latin.RichInputMethodManager: boolean switchToNextInputMethodAndSubtype(android.os.IBinder)> (1)
<com.android.inputmethod.latin.setup.SetupActivity: boolean isThisImeEnabled(android.content.Context,android.view.inputmethod.InputMethodManager)> (3)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: java.util.TreeSet getUserDictionaryLocalesSet(android.app.Activity)> (3)
<com.android.commands.ime.Ime: void run(java.lang.String[])> (1)
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> (3)
<com.android.server.power.PowerManagerService$DreamReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (21)
<android.support.v4.print.PrintHelperKitkat: void printBitmap(java.lang.String,android.graphics.Bitmap)> (1)
<android.support.v4.print.PrintHelperKitkat: void printBitmap(java.lang.String,android.net.Uri)> (1)
<android.print.PrintJob: android.print.PrintJobInfo getInfo()> (7)
<com.android.printspooler.FusedPrintersProvider$PersistenceManager$ReadTask: void onPostExecute(java.util.List)> (1)
<com.android.printspooler.SelectPrinterFragment: void updateAddPrintersAdapter()> (1)
<android.print.PrintJob: void cancel()> ()
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.print.PrintManager: android.print.PrinterDiscoverySession createPrinterDiscoverySession()> (1)
<android.print.PrinterDiscoverySession: void destroy()> (1)
<android.print.PrinterDiscoverySession: void finalize()> ()
<android.print.PrintJob: void restart()> ()
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.printspooler.FusedPrintersProvider: void loadInternal()> (2)
<com.android.printspooler.FusedPrintersProvider: void setTrackedPrinter(android.print.PrinterId)> (1)
<com.android.printspooler.FusedPrintersProvider: boolean cancelInternal()> (1)
<android.widget.SpellChecker: void <init>(android.widget.TextView)> (1)
<android.widget.Editor: void updateSpellCheckSpans(int,int,boolean)> (3)
<android.inputmethodservice.ExtractButton: void access$200(android.widget.TextView)> (1)
<android.inputmethodservice.ExtractEditText: void access$200(android.widget.TextView)> (1)
<android.widget.AutoCompleteTextView: void access$200(android.widget.TextView)> (1)
<android.widget.Button: void access$200(android.widget.TextView)> (1)
<android.widget.CheckBox: void access$200(android.widget.TextView)> (1)
<android.widget.CheckedTextView: void access$200(android.widget.TextView)> (1)
<android.widget.Chronometer: void access$200(android.widget.TextView)> (1)
<android.widget.CompoundButton: void access$200(android.widget.TextView)> (1)
<android.widget.DateTimeView: void access$200(android.widget.TextView)> (1)
<android.widget.DigitalClock: void access$200(android.widget.TextView)> (1)
<android.widget.EditText: void access$200(android.widget.TextView)> (1)
<android.widget.MultiAutoCompleteTextView: void access$200(android.widget.TextView)> (1)
<android.widget.NumberPicker$CustomEditText: void access$200(android.widget.TextView)> (1)
<android.widget.RadioButton: void access$200(android.widget.TextView)> (1)
<android.widget.SearchView$SearchAutoComplete: void access$200(android.widget.TextView)> (1)
<android.widget.Switch: void access$200(android.widget.TextView)> (1)
<android.widget.TextClock: void access$200(android.widget.TextView)> (1)
<android.widget.TextView$3: void run()> (1)
<android.widget.ToggleButton: void access$200(android.widget.TextView)> (1)
<com.android.browser.UrlInputView: void access$200(android.widget.TextView)> (1)
<com.android.calculator2.CalculatorEditText: void access$200(android.widget.TextView)> (1)
<com.android.calculator2.ColorButton: void access$200(android.widget.TextView)> (1)
<com.android.calendar.MultiStateButton: void access$200(android.widget.TextView)> (1)
<com.android.calendar.recurrencepicker.WeekButton: void access$200(android.widget.TextView)> (2)
<com.android.camera.ui.Switch: void access$200(android.widget.TextView)> (1)
<com.android.datetimepicker.AccessibleTextView: void access$200(android.widget.TextView)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void access$200(android.widget.TextView)> (1)
<com.android.deskclock.AndroidClockTextView: void access$200(android.widget.TextView)> (1)
<com.android.deskclock.widget.TextTime: void access$200(android.widget.TextView)> (1)
<com.android.development.LogTextBox: void access$200(android.widget.TextView)> (1)
<com.android.dreams.phototable.BummerView: void access$200(android.widget.TextView)> (1)
<com.android.ex.chips.RecipientEditTextView: void access$200(android.widget.TextView)> (1)
<com.android.ex.editstyledtext.EditStyledText: void access$200(android.widget.TextView)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: void access$200(android.widget.TextView)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void access$200(android.widget.TextView)> (1)
<com.android.internal.view.menu.ActionMenuItemView: void access$200(android.widget.TextView)> (1)
<com.android.internal.view.menu.IconMenuItemView: void access$200(android.widget.TextView)> (1)
<com.android.internal.widget.DialogTitle: void access$200(android.widget.TextView)> (1)
<com.android.mail.browse.FolderSpanTextView: void access$200(android.widget.TextView)> (1)
<com.android.mail.compose.EnterSubject: void access$200(android.widget.TextView)> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: void access$200(android.widget.TextView)> (1)
<com.android.mail.ui.EmptyConversationListView: void access$200(android.widget.TextView)> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: void access$200(android.widget.TextView)> (1)
<com.android.quicksearchbox.ui.QueryTextView: void access$200(android.widget.TextView)> (1)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)> (2)
<android.media.SubtitleController: void access$100(android.media.SubtitleController)> (1)
<android.media.SubtitleController: void access$200(android.media.SubtitleController,android.media.SubtitleTrack)> (1)
<android.media.SubtitleController: void access$000(android.media.SubtitleController)> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void processBatchedEvents(long)> (1)
<com.android.server.accessibility.TouchExplorer: void access$3000(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int,int,int)> (2)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateDelegating(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateDragging(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateTouchExploring(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendActionDownAndUp(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendDownForAllNotInjectedPointers(android.view.MotionEvent,int)> (3)
<com.android.server.accessibility.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)> (3)
<com.android.server.accessibility.TouchExplorer: void sendTouchExplorationGestureStartAndHoverEnterIfNeeded(int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendUpForInjectedDownPointers(android.view.MotionEvent,int)> (1)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: boolean performAction(int,int,android.os.Bundle)> (4)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void notifyLocationChanged()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<com.android.server.TwilightService$TwilightListener: void onTwilightStateChanged()> (1)
<com.android.inputmethod.latin.LatinIME$SubtypeState: void switchSubtype(android.os.IBinder,com.android.inputmethod.latin.RichInputMethodManager)> (1)
<com.android.inputmethod.latin.RichInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.RichInputMethodManager: boolean switchToNextInputSubtypeInThisIme(android.os.IBinder,boolean)> (1)
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> ()
<android.speech.tts.TextToSpeech: boolean isSpeaking()> ()
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)> ()
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)> ()
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)> ()
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)> (3)
<android.speech.tts.TextToSpeech: int stop()> ()
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)> ()
<android.speech.tts.TextToSpeech: java.util.Locale getDefaultLanguage()> ()
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()> ()
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)> ()
<android.speech.tts.TextToSpeech: void shutdown()> (1)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: void onStart()> (1)
<android.speech.tts.TextToSpeech$8: java.lang.Object run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.TextToSpeech$Connection$SetupConnectionAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.speech.tts.TextToSpeech$2: java.lang.Integer run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.ITextToSpeechService: int synthesizeToFileDescriptor(android.os.IBinder,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> (1)
<android.app.IActivityManager: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.app.FragmentBreadCrumbs: void playSoundEffect(int)> (1)
<android.app.MediaRouteButton: void playSoundEffect(int)> (2)
<android.app.NativeActivity$NativeContentView: void playSoundEffect(int)> (1)
<android.app.SearchDialog$SearchBar: void playSoundEffect(int)> (1)
<android.appwidget.AppWidgetHostView: void playSoundEffect(int)> (1)
<android.filterfw.core.FilterSurfaceView: void playSoundEffect(int)> (2)
<android.gesture.GestureOverlayView: void playSoundEffect(int)> (1)
<android.inputmethodservice.ExtractButton: void playSoundEffect(int)> (1)
<android.inputmethodservice.ExtractEditLayout: void playSoundEffect(int)> (1)
<android.inputmethodservice.ExtractEditText: void playSoundEffect(int)> (1)
<android.inputmethodservice.KeyboardView: void playSoundEffect(int)> (1)
<android.media.WebVttRenderingWidget$CueLayout: void playSoundEffect(int)> (1)
<android.media.WebVttRenderingWidget$RegionLayout: void playSoundEffect(int)> (1)
<android.media.WebVttRenderingWidget$SpanLayout: void playSoundEffect(int)> (1)
<android.media.WebVttRenderingWidget: void playSoundEffect(int)> (1)
<android.opengl.GLSurfaceView: void playSoundEffect(int)> (2)
<android.preference.PreferenceFrameLayout: void playSoundEffect(int)> (1)
<android.renderscript.RSSurfaceView: void playSoundEffect(int)> (2)
<android.renderscript.RSTextureView: void playSoundEffect(int)> (1)
<android.support.v13.app.FragmentTabHost: void playSoundEffect(int)> (1)
<android.support.v4.app.FragmentTabHost: void playSoundEffect(int)> (1)
<android.support.v4.app.NoSaveStateFrameLayout: void playSoundEffect(int)> (1)
<android.support.v4.view.PagerTabStrip: void playSoundEffect(int)> (1)
<android.support.v4.view.PagerTitleStrip: void playSoundEffect(int)> (1)
<android.support.v4.view.ViewPager: void playSoundEffect(int)> (2)
<android.support.v4.widget.ContentLoadingProgressBar: void playSoundEffect(int)> (1)
<android.support.v4.widget.DrawerLayout: void playSoundEffect(int)> (1)
<android.support.v4.widget.SearchViewCompatIcs$MySearchView: void playSoundEffect(int)> (1)
<android.support.v4.widget.SlidingPaneLayout: void playSoundEffect(int)> (1)
<android.support.v7.widget.GridLayout: void playSoundEffect(int)> (1)
<android.support.v7.widget.Space: void playSoundEffect(int)> (1)
<android.view.LayoutInflater$BlinkLayout: void playSoundEffect(int)> (1)
<android.view.SurfaceView: void playSoundEffect(int)> (1)
<android.view.TextureView: void playSoundEffect(int)> (1)
<android.view.View: boolean performClick()> (430)
<android.view.ViewGroup: void playSoundEffect(int)> (1)
<android.view.ViewOverlay$OverlayViewGroup: void playSoundEffect(int)> (1)
<android.view.ViewStub: void playSoundEffect(int)> (1)
<android.webkit.WebView: void playSoundEffect(int)> (1)
<android.widget.AbsListView: void playSoundEffect(int)> (2)
<android.widget.AbsoluteLayout: void playSoundEffect(int)> (1)
<android.widget.AbsSeekBar: void playSoundEffect(int)> (1)
<android.widget.AbsSpinner: void playSoundEffect(int)> (2)
<android.widget.ActivityChooserView: void playSoundEffect(int)> (1)
<android.widget.AdapterViewAnimator: void playSoundEffect(int)> (2)
<android.widget.AdapterViewFlipper: void playSoundEffect(int)> (1)
<android.widget.AdapterView: void playSoundEffect(int)> (2)
<android.widget.AnalogClock: void playSoundEffect(int)> (1)
<android.widget.AppSecurityPermissions$PermissionItemView: void playSoundEffect(int)> (1)
<android.widget.AutoCompleteTextView: void playSoundEffect(int)> (2)
<android.widget.Button: void playSoundEffect(int)> (2)
<android.widget.CalendarView: void playSoundEffect(int)> (1)
<android.widget.CalendarView$WeekView: void playSoundEffect(int)> (1)
<android.widget.CheckBox: void playSoundEffect(int)> (1)
<android.widget.CheckedTextView: void playSoundEffect(int)> (1)
<android.widget.Chronometer: void playSoundEffect(int)> (1)
<android.widget.CompoundButton: void playSoundEffect(int)> (2)
<android.widget.DatePicker: void playSoundEffect(int)> (1)
<android.widget.DateTimeView: void playSoundEffect(int)> (1)
<android.widget.DialerFilter: void playSoundEffect(int)> (1)
<android.widget.DigitalClock: void playSoundEffect(int)> (1)
<android.widget.Editor$HandleView: void playSoundEffect(int)> (1)
<android.widget.Editor$InsertionHandleView: void playSoundEffect(int)> (1)
<android.widget.Editor$SelectionEndHandleView: void playSoundEffect(int)> (1)
<android.widget.Editor$SelectionStartHandleView: void playSoundEffect(int)> (1)
<android.widget.EditText: void playSoundEffect(int)> (2)
<android.widget.ExpandableListView: void playSoundEffect(int)> (4)
<android.widget.FrameLayout: void playSoundEffect(int)> (1)
<android.widget.Gallery: void playSoundEffect(int)> (2)
<android.widget.GridLayout: void playSoundEffect(int)> (1)
<android.widget.GridView: void playSoundEffect(int)> (4)
<android.widget.HorizontalScrollView: void playSoundEffect(int)> (1)
<android.widget.ImageButton: void playSoundEffect(int)> (1)
<android.widget.ImageSwitcher: void playSoundEffect(int)> (1)
<android.widget.ImageView: void playSoundEffect(int)> (1)
<android.widget.LinearLayout: void playSoundEffect(int)> (1)
<android.widget.ListPopupWindow$DropDownListView: void playSoundEffect(int)> (1)
<android.widget.ListView: void playSoundEffect(int)> (3)
<android.widget.MediaController: void playSoundEffect(int)> (1)
<android.widget.MultiAutoCompleteTextView: void playSoundEffect(int)> (2)
<android.widget.NumberPicker$CustomEditText: void playSoundEffect(int)> (1)
<android.widget.NumberPicker: void playSoundEffect(int)> (1)
<android.widget.PopupWindow$PopupViewContainer: void playSoundEffect(int)> (1)
<android.widget.ProgressBar: void playSoundEffect(int)> (1)
<android.widget.QuickContactBadge: void playSoundEffect(int)> (1)
<android.widget.RadioButton: void playSoundEffect(int)> (1)
<android.widget.RadioGroup: void playSoundEffect(int)> (1)
<android.widget.RatingBar: void playSoundEffect(int)> (1)
<android.widget.RelativeLayout: void playSoundEffect(int)> (1)
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: void playSoundEffect(int)> (1)
<android.widget.ScrollView: void playSoundEffect(int)> (1)
<android.widget.SearchView$SearchAutoComplete: void playSoundEffect(int)> (1)
<android.widget.SearchView: void playSoundEffect(int)> (1)
<android.widget.SeekBar: void playSoundEffect(int)> (1)
<android.widget.SlidingDrawer: void playSoundEffect(int)> (2)
<android.widget.Space: void playSoundEffect(int)> (1)
<android.widget.Spinner: void playSoundEffect(int)> (2)
<android.widget.StackView$StackFrame: void playSoundEffect(int)> (1)
<android.widget.StackView: void playSoundEffect(int)> (1)
<android.widget.Switch: void playSoundEffect(int)> (1)
<android.widget.TabHost: void playSoundEffect(int)> (2)
<android.widget.TableLayout: void playSoundEffect(int)> (1)
<android.widget.TableRow: void playSoundEffect(int)> (1)
<android.widget.TabWidget: void playSoundEffect(int)> (1)
<android.widget.TextClock: void playSoundEffect(int)> (1)
<android.widget.TextSwitcher: void playSoundEffect(int)> (1)
<android.widget.TextView: void playSoundEffect(int)> (2)
<android.widget.TimePicker: void playSoundEffect(int)> (1)
<android.widget.ToggleButton: void playSoundEffect(int)> (2)
<android.widget.TwoLineListItem: void playSoundEffect(int)> (1)
<android.widget.VideoView: void playSoundEffect(int)> (2)
<android.widget.ViewAnimator: void playSoundEffect(int)> (1)
<android.widget.ViewFlipper: void playSoundEffect(int)> (1)
<android.widget.ViewSwitcher: void playSoundEffect(int)> (1)
<android.widget.ZoomButtonsController$Container: void playSoundEffect(int)> (1)
<android.widget.ZoomButton: void playSoundEffect(int)> (1)
<android.widget.ZoomControls: void playSoundEffect(int)> (1)
<com.android.browser.addbookmark.FolderSpinner: void playSoundEffect(int)> (1)
<com.android.browser.AddBookmarkPage$CustomListView: void playSoundEffect(int)> (1)
<com.android.browser.AddNewBookmark: void playSoundEffect(int)> (1)
<com.android.browser.AutologinBar: void playSoundEffect(int)> (1)
<com.android.browser.BaseUi$FullscreenHolder: void playSoundEffect(int)> (1)
<com.android.browser.BookmarkItem: void playSoundEffect(int)> (1)
<com.android.browser.BreadCrumbView: void playSoundEffect(int)> (1)
<com.android.browser.BrowserWebView: void playSoundEffect(int)> (1)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: void playSoundEffect(int)> (1)
<com.android.browser.ErrorConsoleView: void playSoundEffect(int)> (1)
<com.android.browser.GeolocationPermissionsPrompt: void playSoundEffect(int)> (1)
<com.android.browser.HistoryItem: void playSoundEffect(int)> (1)
<com.android.browser.NavigationBarBase: void playSoundEffect(int)> (1)
<com.android.browser.NavigationBarPhone: void playSoundEffect(int)> (1)
<com.android.browser.NavigationBarTablet: void playSoundEffect(int)> (1)
<com.android.browser.NavScreen: void playSoundEffect(int)> (1)
<com.android.browser.NavTabScroller$ContentLayout: void playSoundEffect(int)> (1)
<com.android.browser.NavTabScroller: void playSoundEffect(int)> (1)
<com.android.browser.NavTabView: void playSoundEffect(int)> (1)
<com.android.browser.PageProgressView: void playSoundEffect(int)> (1)
<com.android.browser.TabBar$TabView: void playSoundEffect(int)> (1)
<com.android.browser.TabBar: void playSoundEffect(int)> (1)
<com.android.browser.TabScrollView$TabLayout: void playSoundEffect(int)> (1)
<com.android.browser.TabScrollView: void playSoundEffect(int)> (1)
<com.android.browser.TitleBar: void playSoundEffect(int)> (1)
<com.android.browser.UrlInputView: void playSoundEffect(int)> (1)
<com.android.browser.view.BookmarkContainer: void playSoundEffect(int)> (1)
<com.android.browser.view.BookmarkExpandableView: void playSoundEffect(int)> (1)
<com.android.browser.view.CustomScreenLinearLayout: void playSoundEffect(int)> (1)
<com.android.browser.view.EventRedirectingFrameLayout: void playSoundEffect(int)> (1)
<com.android.browser.view.PieMenu: void playSoundEffect(int)> (2)
<com.android.browser.view.ScrollerView: void playSoundEffect(int)> (1)
<com.android.browser.view.SnapshotGridView: void playSoundEffect(int)> (1)
<com.android.browser.view.StopProgressView: void playSoundEffect(int)> (1)
<com.android.calculator2.CalculatorDisplay: void playSoundEffect(int)> (1)
<com.android.calculator2.CalculatorEditText: void playSoundEffect(int)> (1)
<com.android.calculator2.CalculatorViewPager: void playSoundEffect(int)> (1)
<com.android.calculator2.ColorButton: void playSoundEffect(int)> (1)
<com.android.calculator2.PanelSwitcher: void playSoundEffect(int)> (1)
<com.android.calendar.agenda.AgendaListView: void playSoundEffect(int)> (1)
<com.android.calendar.ColorChipView: void playSoundEffect(int)> (1)
<com.android.calendar.DayView: void playSoundEffect(int)> (1)
<com.android.calendar.event.AttendeesView: void playSoundEffect(int)> (1)
<com.android.calendar.ExpandableTextView: void playSoundEffect(int)> (1)
<com.android.calendar.month.MonthListView: void playSoundEffect(int)> (1)
<com.android.calendar.month.MonthWeekEventsView: void playSoundEffect(int)> (1)
<com.android.calendar.month.SimpleWeekView: void playSoundEffect(int)> (1)
<com.android.calendar.MultiStateButton: void playSoundEffect(int)> (1)
<com.android.calendar.recurrencepicker.LinearLayoutWithMaxWidth: void playSoundEffect(int)> (1)
<com.android.calendar.recurrencepicker.WeekButton: void playSoundEffect(int)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: void playSoundEffect(int)> (1)
<com.android.calendar.StickyHeaderListView: void playSoundEffect(int)> (1)
<com.android.camera.crop.CropView: void playSoundEffect(int)> (1)
<com.android.camera.PanoProgressBar: void playSoundEffect(int)> (1)
<com.android.camera.ShutterButton: void playSoundEffect(int)> (1)
<com.android.camera.tinyplanet.TinyPlanetPreview: void playSoundEffect(int)> (1)
<com.android.camera.ui.AbstractSettingPopup: void playSoundEffect(int)> (1)
<com.android.camera.ui.CameraControls: void playSoundEffect(int)> (1)
<com.android.camera.ui.CameraRootView: void playSoundEffect(int)> (1)
<com.android.camera.ui.CheckedLinearLayout: void playSoundEffect(int)> (1)
<com.android.camera.ui.CountdownTimerPopup: void playSoundEffect(int)> (1)
<com.android.camera.ui.CountDownView: void playSoundEffect(int)> (1)
<com.android.camera.ui.ExpandedGridView: void playSoundEffect(int)> (1)
<com.android.camera.ui.FaceView: void playSoundEffect(int)> (1)
<com.android.camera.ui.FilmstripBottomControls: void playSoundEffect(int)> (1)
<com.android.camera.ui.FilmStripView: void playSoundEffect(int)> (1)
<com.android.camera.ui.InLineSettingCheckBox: void playSoundEffect(int)> (1)
<com.android.camera.ui.InLineSettingItem: void playSoundEffect(int)> (1)
<com.android.camera.ui.InLineSettingMenu: void playSoundEffect(int)> (1)
<com.android.camera.ui.ListPrefSettingPopup: void playSoundEffect(int)> (1)
<com.android.camera.ui.ModuleSwitcher: void playSoundEffect(int)> (1)
<com.android.camera.ui.MoreSettingPopup: void playSoundEffect(int)> (1)
<com.android.camera.ui.PieMenuButton: void playSoundEffect(int)> (1)
<com.android.camera.ui.RenderOverlay$RenderView: void playSoundEffect(int)> (1)
<com.android.camera.ui.RenderOverlay: void playSoundEffect(int)> (1)
<com.android.camera.ui.RotatableLayout: void playSoundEffect(int)> (1)
<com.android.camera.ui.RotateImageView: void playSoundEffect(int)> (1)
<com.android.camera.ui.RotateLayout: void playSoundEffect(int)> (1)
<com.android.camera.ui.Switch: void playSoundEffect(int)> (1)
<com.android.camera.ui.TimeIntervalPopup: void playSoundEffect(int)> (1)
<com.android.camera.ui.TwoStateImageView: void playSoundEffect(int)> (1)
<com.android.camera.ui.ZoomView: void playSoundEffect(int)> (1)
<com.android.colorpicker.ColorPickerPalette: void playSoundEffect(int)> (1)
<com.android.colorpicker.ColorPickerSwatch: void playSoundEffect(int)> (1)
<com.android.datetimepicker.AccessibleLinearLayout: void playSoundEffect(int)> (1)
<com.android.datetimepicker.AccessibleTextView: void playSoundEffect(int)> (1)
<com.android.datetimepicker.date.AccessibleDateAnimator: void playSoundEffect(int)> (1)
<com.android.datetimepicker.date.DayPickerView: void playSoundEffect(int)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void playSoundEffect(int)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void playSoundEffect(int)> (1)
<com.android.datetimepicker.date.YearPickerView: void playSoundEffect(int)> (1)
<com.android.datetimepicker.time.AmPmCirclesView: void playSoundEffect(int)> (1)
<com.android.datetimepicker.time.CircleView: void playSoundEffect(int)> (1)
<com.android.datetimepicker.time.RadialPickerLayout: void playSoundEffect(int)> (1)
<com.android.datetimepicker.time.RadialSelectorView: void playSoundEffect(int)> (1)
<com.android.datetimepicker.time.RadialTextsView: void playSoundEffect(int)> (1)
<com.android.deskclock.AlarmTimelineView: void playSoundEffect(int)> (1)
<com.android.deskclock.AnalogClock: void playSoundEffect(int)> (1)
<com.android.deskclock.AndroidClockTextView: void playSoundEffect(int)> (1)
<com.android.deskclock.CircleButtonsLayout: void playSoundEffect(int)> (1)
<com.android.deskclock.CircleTimerView: void playSoundEffect(int)> (1)
<com.android.deskclock.DontPressWithParentLayout: void playSoundEffect(int)> (1)
<com.android.deskclock.timer.CountingTimerView: void playSoundEffect(int)> (1)
<com.android.deskclock.TimerSetupView: void playSoundEffect(int)> (1)
<com.android.deskclock.timer.TimerListItem: void playSoundEffect(int)> (1)
<com.android.deskclock.timer.TimerView: void playSoundEffect(int)> (1)
<com.android.deskclock.widget.ActionableToastBar: void playSoundEffect(int)> (1)
<com.android.deskclock.widget.EllipsizeLayout: void playSoundEffect(int)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void playSoundEffect(int)> (1)
<com.android.deskclock.widget.sgv.StaggeredGridView: void playSoundEffect(int)> (1)
<com.android.deskclock.widget.TextTime: void playSoundEffect(int)> (1)
<com.android.development.LogTextBox: void playSoundEffect(int)> (1)
<com.android.documentsui.DirectoryContainerView: void playSoundEffect(int)> (1)
<com.android.documentsui.DirectoryView: void playSoundEffect(int)> (1)
<com.android.dreams.phototable.BummerView: void playSoundEffect(int)> (1)
<com.android.dreams.phototable.PhotoCarousel: void playSoundEffect(int)> (1)
<com.android.dreams.phototable.PhotoTable: void playSoundEffect(int)> (1)
<com.android.email.view.CertificateSelector: void playSoundEffect(int)> (1)
<com.android.ex.chips.RecipientEditTextView: void playSoundEffect(int)> (1)
<com.android.ex.editstyledtext.EditStyledText: void playSoundEffect(int)> (1)
<com.android.ex.photo.PhotoViewPager: void playSoundEffect(int)> (1)
<com.android.ex.photo.views.PhotoView: void playSoundEffect(int)> (1)
<com.android.galaxy4.GalaxyView: void playSoundEffect(int)> (2)
<com.android.gallery3d.app.CommonControllerOverlay: void playSoundEffect(int)> (1)
<com.android.gallery3d.app.MovieControllerOverlay: void playSoundEffect(int)> (1)
<com.android.gallery3d.app.TimeBar: void playSoundEffect(int)> (1)
<com.android.gallery3d.app.TrimControllerOverlay: void playSoundEffect(int)> (1)
<com.android.gallery3d.app.TrimTimeBar: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.category.CategorySelected: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.category.CategoryTrack: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.category.CategoryView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.category.IconView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.CenteredLinearLayout: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorBrightnessView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorCompareView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorHueView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorOpacityView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorRectView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSaturationView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSVRectView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorValueView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.crop.CropView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCurves: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageDraw: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageGrad: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageMirror: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImagePoint: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRedEye: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRotate: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageShow: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageVignette: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.info.HistogramView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.state.StatePanelTrack: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.state.StateView: void playSoundEffect(int)> (1)
<com.android.gallery3d.filtershow.ui.FramedTextButton: void playSoundEffect(int)> (1)
<com.android.gallery3d.ingest.ui.DateTileView: void playSoundEffect(int)> (1)
<com.android.gallery3d.ingest.ui.IngestGridView: void playSoundEffect(int)> (1)
<com.android.gallery3d.ingest.ui.MtpFullscreenView: void playSoundEffect(int)> (1)
<com.android.gallery3d.ingest.ui.MtpImageView: void playSoundEffect(int)> (1)
<com.android.gallery3d.ingest.ui.MtpThumbnailTileView: void playSoundEffect(int)> (1)
<com.android.gallery3d.ui.GLRootView: void playSoundEffect(int)> (2)
<com.android.inputmethod.dictionarypack.ButtonSwitcher: void playSoundEffect(int)> (1)
<com.android.inputmethod.dictionarypack.DictionaryDownloadProgressBar: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.EmojiCategoryPageIndicatorView: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.internal.PreviewPlacerView: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.internal.ScrollViewWithNotifier: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.KeyboardView: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: void playSoundEffect(int)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void playSoundEffect(int)> (1)
<com.android.inputmethod.latin.InputView: void playSoundEffect(int)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$IndicatorView: void playSoundEffect(int)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void playSoundEffect(int)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView: void playSoundEffect(int)> (1)
<com.android.inputmethod.latin.setup.SetupStepIndicatorView: void playSoundEffect(int)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void playSoundEffect(int)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void playSoundEffect(int)> (1)
<com.android.inputmethod.pinyin.BalloonHint$BalloonView: void playSoundEffect(int)> (1)
<com.android.inputmethod.pinyin.CandidatesContainer: void playSoundEffect(int)> (1)
<com.android.inputmethod.pinyin.CandidateView: void playSoundEffect(int)> (1)
<com.android.inputmethod.pinyin.ComposingView: void playSoundEffect(int)> (1)
<com.android.inputmethod.pinyin.SkbContainer: void playSoundEffect(int)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: void playSoundEffect(int)> (1)
<com.android.inputmethod.research.FeedbackLayout: void playSoundEffect(int)> (1)
<com.android.internal.app.AlertController$RecycleListView: void playSoundEffect(int)> (1)
<com.android.internal.policy.impl.ImmersiveModeConfirmation$ClingWindowView: void playSoundEffect(int)> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: void playSoundEffect(int)> (1)
<com.android.internal.policy.impl.RecentApplicationsBackground: void playSoundEffect(int)> (1)
<com.android.internal.view.menu.ActionMenuItemView: void playSoundEffect(int)> (1)
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: void playSoundEffect(int)> (2)
<com.android.internal.view.menu.ActionMenuView: void playSoundEffect(int)> (1)
<com.android.internal.view.menu.ExpandedMenuView: void playSoundEffect(int)> (1)
<com.android.internal.view.menu.IconMenuItemView: void playSoundEffect(int)> (2)
<com.android.internal.view.menu.IconMenuView: void playSoundEffect(int)> (1)
<com.android.internal.view.menu.ListMenuItemView: void playSoundEffect(int)> (1)
<com.android.internal.widget.AbsActionBarView: void playSoundEffect(int)> (1)
<com.android.internal.widget.ActionBarContainer: void playSoundEffect(int)> (1)
<com.android.internal.widget.ActionBarContextView: void playSoundEffect(int)> (1)
<com.android.internal.widget.ActionBarOverlayLayout: void playSoundEffect(int)> (1)
<com.android.internal.widget.ActionBarView$HomeView: void playSoundEffect(int)> (1)
<com.android.internal.widget.ActionBarView: void playSoundEffect(int)> (1)
<com.android.internal.widget.DialogTitle: void playSoundEffect(int)> (1)
<com.android.internal.widget.FaceUnlockView: void playSoundEffect(int)> (1)
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: void playSoundEffect(int)> (1)
<com.android.internal.widget.LockPatternView: void playSoundEffect(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void playSoundEffect(int)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void playSoundEffect(int)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: void playSoundEffect(int)> (1)
<com.android.internal.widget.PointerLocationView: void playSoundEffect(int)> (1)
<com.android.internal.widget.RotarySelector: void playSoundEffect(int)> (1)
<com.android.internal.widget.ScrollingTabContainerView$TabView: void playSoundEffect(int)> (1)
<com.android.internal.widget.ScrollingTabContainerView: void playSoundEffect(int)> (1)
<com.android.internal.widget.SizeAdaptiveLayout: void playSoundEffect(int)> (1)
<com.android.internal.widget.SlidingTab: void playSoundEffect(int)> (1)
<com.android.internal.widget.SubtitleView: void playSoundEffect(int)> (1)
<com.android.internal.widget.TextProgressBar: void playSoundEffect(int)> (1)
<com.android.internal.widget.WaveView: void playSoundEffect(int)> (1)
<com.android.internal.widget.WeightedLinearLayout: void playSoundEffect(int)> (1)
<com.android.mail.browse.BorderView: void playSoundEffect(int)> (1)
<com.android.mail.browse.ConversationContainer: void playSoundEffect(int)> (1)
<com.android.mail.browse.ConversationItemView: void playSoundEffect(int)> (1)
<com.android.mail.browse.ConversationListFooterView: void playSoundEffect(int)> (1)
<com.android.mail.browse.ConversationPager: void playSoundEffect(int)> (1)
<com.android.mail.browse.ConversationViewHeader: void playSoundEffect(int)> (1)
<com.android.mail.browse.ConversationWebView: void playSoundEffect(int)> (1)
<com.android.mail.browse.FolderSpanTextView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MailWebView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageAttachmentBar: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageAttachmentTile: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageFooterView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageHeaderView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageInviteView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageScrollView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MessageWebView: void playSoundEffect(int)> (1)
<com.android.mail.browse.MultiAdapterSpinner: void playSoundEffect(int)> (1)
<com.android.mail.browse.ScrollIndicatorsView: void playSoundEffect(int)> (1)
<com.android.mail.browse.SpamWarningView: void playSoundEffect(int)> (1)
<com.android.mail.browse.SuperCollapsedBlock: void playSoundEffect(int)> (1)
<com.android.mail.browse.SwipeableConversationItemView: void playSoundEffect(int)> (1)
<com.android.mail.compose.AttachmentComposeView: void playSoundEffect(int)> (1)
<com.android.mail.compose.AttachmentsView: void playSoundEffect(int)> (1)
<com.android.mail.compose.CcBccView: void playSoundEffect(int)> (1)
<com.android.mail.compose.ComposeAttachmentTile: void playSoundEffect(int)> (1)
<com.android.mail.compose.EnterSubject: void playSoundEffect(int)> (1)
<com.android.mail.compose.FromAddressSpinner: void playSoundEffect(int)> (1)
<com.android.mail.compose.QuotedTextView: void playSoundEffect(int)> (1)
<com.android.mail.MinTimeProgressView: void playSoundEffect(int)> (1)
<com.android.mail.ui.AccountItemView: void playSoundEffect(int)> (1)
<com.android.mail.ui.ActionableToastBar: void playSoundEffect(int)> (1)
<com.android.mail.ui.AnimatedListView: void playSoundEffect(int)> (1)
<com.android.mail.ui.AttachmentTileGrid: void playSoundEffect(int)> (1)
<com.android.mail.ui.AttachmentTile: void playSoundEffect(int)> (1)
<com.android.mail.ui.ButteryProgressBar: void playSoundEffect(int)> (1)
<com.android.mail.ui.ConversationListCopy: void playSoundEffect(int)> (1)
<com.android.mail.ui.ConversationListView$HintText: void playSoundEffect(int)> (1)
<com.android.mail.ui.ConversationListView: void playSoundEffect(int)> (1)
<com.android.mail.ui.ConversationLongPressTipView: void playSoundEffect(int)> (1)
<com.android.mail.ui.ConversationPhotoTeaserView: void playSoundEffect(int)> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: void playSoundEffect(int)> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: void playSoundEffect(int)> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: void playSoundEffect(int)> (1)
<com.android.mail.ui.EmptyConversationListView: void playSoundEffect(int)> (1)
<com.android.mail.ui.FolderItemView: void playSoundEffect(int)> (1)
<com.android.mail.ui.FolderListLayout: void playSoundEffect(int)> (1)
<com.android.mail.ui.LeaveBehindItem: void playSoundEffect(int)> (1)
<com.android.mail.ui.MailActionBarView: void playSoundEffect(int)> (1)
<com.android.mail.ui.NestedFolderTeaserView: void playSoundEffect(int)> (1)
<com.android.mail.ui.SearchMailActionBarView: void playSoundEffect(int)> (1)
<com.android.mail.ui.SwipeableListView: void playSoundEffect(int)> (1)
<com.android.mail.ui.TwoPaneLayout: void playSoundEffect(int)> (1)
<com.android.music.CheckableRelativeLayout: void playSoundEffect(int)> (1)
<com.android.music.RepeatingImageButton: void playSoundEffect(int)> (1)
<com.android.music.TouchInterceptor: void playSoundEffect(int)> (1)
<com.android.music.VerticalTextSpinner: void playSoundEffect(int)> (1)
<com.android.noisefield.NoiseFieldView: void playSoundEffect(int)> (2)
<com.android.packageinstaller.CaffeinatedScrollView: void playSoundEffect(int)> (1)
<com.android.phasebeam.PhaseBeamView: void playSoundEffect(int)> (2)
<com.android.photos.views.BlockingGLTextureView: void playSoundEffect(int)> (1)
<com.android.photos.views.GalleryThumbnailView: void playSoundEffect(int)> (1)
<com.android.photos.views.HeaderGridView$FullWidthFixedViewLayout: void playSoundEffect(int)> (1)
<com.android.photos.views.HeaderGridView: void playSoundEffect(int)> (1)
<com.android.photos.views.SquareImageView: void playSoundEffect(int)> (1)
<com.android.photos.views.TiledImageView: void playSoundEffect(int)> (1)
<com.android.printspooler.PrintDialogFrame: void playSoundEffect(int)> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: void playSoundEffect(int)> (1)
<com.android.providers.downloads.ui.DownloadItem: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.BaseSuggestionView: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.ClusteredSuggestionsView: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.CorpusView: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.DefaultSuggestionView: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.QueryTextView: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.SearchActivityViewSinglePane: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.SearchActivityView: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.SuggestionsView: void playSoundEffect(int)> (1)
<com.android.quicksearchbox.ui.WebSearchSuggestionView: void playSoundEffect(int)> (1)
<com.android.soundrecorder.VUMeter: void playSoundEffect(int)> (1)
<com.android.timezonepicker.TimeZonePickerView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.AudioTrackLinearLayout: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.AudioTrackView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.EditorRelativeLayout: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.HandleView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.HorizontalScrollView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.ImageViewTouchBase: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.MediaItemView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.MediaLinearLayout: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.OverlayLinearLayout: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.OverlayView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.PlayheadView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.PreviewSurfaceView: void playSoundEffect(int)> (2)
<com.android.videoeditor.widgets.TimelineHorizontalScrollView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.TimelineRelativeLayout: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.TransitionView: void playSoundEffect(int)> (1)
<com.android.videoeditor.widgets.ZoomControl: void playSoundEffect(int)> (1)
<com.android.wallpaper.fall.FallView: void playSoundEffect(int)> (2)
<com.android.wallpaper.galaxy.GalaxyView: void playSoundEffect(int)> (2)
<com.android.wallpaper.grass.GrassView: void playSoundEffect(int)> (2)
<com.android.wallpaper.holospiral.HoloSpiralView: void playSoundEffect(int)> (2)
<android.app.UiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void access$2600(com.android.deskclock.AlarmClockFragment$AlarmItemAdapter,com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$ItemHolder,boolean)> (4)
<com.android.mail.browse.ConversationItemViewModel: java.lang.CharSequence getContentDescription(android.content.Context)> (1)
<com.android.mail.browse.ConversationItemView: void bind(com.android.mail.browse.ConversationItemViewModel,com.android.mail.ui.ControllableActivity,com.android.mail.ui.AnimatedAdapter$ConversationListListener,com.android.mail.browse.ConversationItemView$ConversationItemAreaClickListener,com.android.mail.ui.ConversationSelectionSet,com.android.mail.providers.Folder,int,boolean,boolean,boolean,boolean,boolean,com.android.mail.ui.AnimatedAdapter,int,android.graphics.Bitmap)> (2)
<com.android.mail.FormattedDateBuilder: java.lang.CharSequence formatShortDate(long)> (1)
<com.android.mail.widget.WidgetService$MailFactory: android.widget.RemoteViews getViewAt(int)> (1)
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)> ()
<android.app.DatePickerDialog: void <init>(android.content.Context,int,android.app.DatePickerDialog$OnDateSetListener,int,int,int)> (1)
<android.app.DatePickerDialog: void onDateChanged(android.widget.DatePicker,int,int,int)> (1)
<android.widget.AnalogClock: void onTimeChanged()> (2)
<android.widget.DatePicker: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (1)
<android.widget.TimePicker: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> (1)
<com.android.calendar.event.EditEventView: void access$300(com.android.calendar.event.EditEventView,android.widget.TextView,long)> (2)
<com.android.calendar.event.EditEventView: void populateRepeats()> (3)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (2)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onCheckedChanged(android.widget.RadioGroup,int)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onDateSet(com.android.datetimepicker.date.DatePickerDialog,int,int,int)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.datetimepicker.date.DatePickerDialog: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (2)
<com.android.datetimepicker.date.DatePickerDialog: void onClick(android.view.View)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onYearSelected(int)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onDayOfMonthSelected(int,int,int)> (1)
<com.android.deskclock.AnalogClock: void onTimeChanged()> (3)
<com.android.documentsui.DirectoryFragment: java.lang.String access$1700(android.content.Context,long)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void access$100(com.android.inputmethod.dictionarypack.DictionarySettingsFragment)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void onActivityCreated(android.os.Bundle)> (2)
<android.widget.CalendarView$WeeksAdapter: void onDateTapped(java.util.Calendar)> (1)
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<android.widget.CalendarView: void setDate(long,boolean,boolean)> (2)
<android.widget.CalendarView: void setMaxDate(long)> (1)
<android.widget.CalendarView: void setMinDate(long)> (1)
<android.widget.CalendarView: void access$900(android.widget.CalendarView,android.widget.AbsListView,int,int,int)> (1)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem: java.lang.CharSequence getTimestampLong()> (4)
<com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem: java.lang.CharSequence getTimestampShort()> (1)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: boolean goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void updateMonthHighlight(android.widget.AbsListView)> (2)
<com.android.deskclock.alarms.AlarmActivity: void updateLayout()> (2)
<com.android.deskclock.ClockFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.deskclock.worldclock.WorldClockAdapter: void updateView(android.view.View,com.android.deskclock.worldclock.CityObj)> (2)
<com.android.calendar.agenda.AgendaFragment$2: void run()> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void handleSelectSyncedCalendarsClicked(android.view.View)> ()
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (5)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (16)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> (7)
<com.android.calendar.event.CreateEventDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onDown(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: void onLongPress(android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void access$5000(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.deskclock.AlarmClockFragment$7: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.deskclock.AlarmClockFragment$9: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.deskclock.HandleApiCalls: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.AlarmClockFragment$8: com.android.deskclock.provider.AlarmInstance doInBackground(java.lang.Void[])> (1)
<com.android.deskclock.alarms.AlarmStateManager$1: void run()> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.browser.Controller: void onConfgurationChanged(android.content.res.Configuration)> (1)
<com.android.browser.WebViewController: void showSslCertificateOnError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void updateShortcutIME()> (2)
<com.android.server.InputMethodManagerService: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)> (2)
<com.android.server.InputMethodManagerService: boolean switchToNextInputMethod(android.os.IBinder,boolean)> (2)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setKeyboard(com.android.inputmethod.keyboard.Keyboard)> (7)
<com.android.inputmethod.latin.LatinIME: boolean onCustomRequest(int)> (1)
<com.android.inputmethod.latin.settings.SettingsValues: boolean isLanguageSwitchKeyEnabled()> (1)
<com.android.inputmethod.latin.RichInputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)> (2)
<com.android.inputmethod.latin.setup.SetupWizardActivity$SettingsPoolingHandler: void startPollingImeSettings()> (3)
<com.android.inputmethod.latin.settings.SettingsFragment: void overwriteUserDictionaryPreference(android.preference.Preference)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: java.util.ArrayList getLocalesList(android.app.Activity)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: void createUserDictSettings(android.preference.PreferenceGroup)> (1)
<com.android.commands.ime.Ime: void main(java.lang.String[])> ()
<com.android.inputmethodcommon.InputMethodSettingsImpl: java.lang.String getEnabledSubtypesLabel(android.content.Context,android.view.inputmethod.InputMethodManager,android.view.inputmethod.InputMethodInfo)> (1)
<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)> (4)
<com.android.server.power.PowerManagerService: void access$900(com.android.server.power.PowerManagerService)> (4)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,int,int)> (1)
<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)> (2)
<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleBootCompletedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleDreamFinishedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleScreenOnBlockerReleased()> (1)
<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()> (1)
<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void napInternal(long)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)> (1)
<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)> (2)
<com.android.server.power.PowerManagerService: void wakeUpInternal(long)> (2)
<android.support.v4.print.PrintHelper$PrintHelperKitkatImpl: void printBitmap(java.lang.String,android.graphics.Bitmap)> (1)
<android.support.v4.print.PrintHelper$PrintHelperKitkatImpl: void printBitmap(java.lang.String,android.net.Uri)> (1)
<android.print.PrintJob: boolean isBlocked()> ()
<android.print.PrintJob: boolean isCancelled()> ()
<android.print.PrintJob: boolean isCompleted()> ()
<android.print.PrintJob: boolean isFailed()> (1)
<android.print.PrintJob: boolean isQueued()> ()
<android.print.PrintJob: boolean isStarted()> ()
<com.android.printspooler.FusedPrintersProvider$PersistenceManager$ReadTask: void onPostExecute(java.lang.Object)> (1)
<com.android.printspooler.SelectPrinterFragment: void onResume()> (1)
<com.android.printspooler.FusedPrintersProvider: void onReset()> (1)
<com.android.printspooler.FusedPrintersProvider: void access$1000(com.android.printspooler.FusedPrintersProvider)> (1)
<com.android.printspooler.FusedPrintersProvider: void onForceLoad()> (2)
<com.android.printspooler.PrintJobConfigActivity$Editor: void refreshCurrentPrinter()> (4)
<com.android.printspooler.FusedPrintersProvider: boolean onCancelLoad()> (2)
<android.widget.Editor: void access$2300(android.widget.Editor,int,int,boolean)> (1)
<android.widget.Editor: void onAttachedToWindow()> (1)
<android.widget.Editor: void sendOnTextChanged(int,int)> (1)
<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.media.MediaPlayer$2: int addTrack()> (1)
<android.media.MediaPlayer: void scanInternalSubtitleTracks()> (3)
<com.android.server.accessibility.AccessibilityInputFilter: void access$100(com.android.server.accessibility.AccessibilityInputFilter,long)> (1)
<com.android.server.accessibility.TouchExplorer$SendHoverEnterAndMoveDelayed: void run()> (2)
<com.android.server.accessibility.TouchExplorer$SendHoverExitDelayed: void run()> (2)
<com.android.server.accessibility.TouchExplorer: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void access$1900(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void access$2800(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void access$2600(com.android.server.accessibility.TouchExplorer,int)> (1)
<com.android.server.accessibility.TouchExplorer: void clear(android.view.MotionEvent,int)> (5)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: boolean performAction(int,int,android.os.Bundle)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewTouchHelper: void clearFocusedVirtualView()> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewTouchHelper: void setFocusedVirtualView(int)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.server.TwilightService$TwilightListenerRecord: void run()> (1)
<com.android.inputmethod.latin.LatinIME: void handleLanguageSwitchKey()> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: android.view.inputmethod.InputMethodSubtype getCurrentSubtype()> (3)
<com.android.internal.policy.impl.EnableAccessibilityController: void cancel()> (1)
<com.android.internal.policy.impl.EnableAccessibilityController$2: void onInit(int)> (1)
<android.speech.tts.TextToSpeech$Action: java.lang.Object run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.TextToSpeech$2: java.lang.Object run(android.speech.tts.ITextToSpeechService)> (1)
<android.speech.tts.TextToSpeech$12: java.lang.Integer run(android.speech.tts.ITextToSpeechService)> (1)
<android.app.MediaRouteButton: boolean performClick()> (1)
<android.support.v4.view.ViewPager: boolean arrowScroll(int)> (4)
<android.app.FragmentBreadCrumbs: boolean performClick()> (1)
<android.app.NativeActivity$NativeContentView: boolean performClick()> (1)
<android.app.SearchDialog$SearchBar: boolean performClick()> (1)
<android.appwidget.AppWidgetHostView: boolean performClick()> (1)
<android.filterfw.core.FilterSurfaceView: boolean performClick()> (2)
<android.gesture.GestureOverlayView: boolean performClick()> (1)
<android.inputmethodservice.ExtractButton: boolean performClick()> (1)
<android.inputmethodservice.ExtractEditLayout: boolean performClick()> (1)
<android.inputmethodservice.KeyboardView: boolean performClick()> (1)
<android.media.WebVttRenderingWidget: boolean performClick()> (1)
<android.media.WebVttRenderingWidget$CueLayout: boolean performClick()> (1)
<android.media.WebVttRenderingWidget$RegionLayout: boolean performClick()> (1)
<android.media.WebVttRenderingWidget$SpanLayout: boolean performClick()> (1)
<android.opengl.GLSurfaceView: boolean performClick()> (2)
<android.preference.PreferenceFrameLayout: boolean performClick()> (1)
<android.renderscript.RSSurfaceView: boolean performClick()> (2)
<android.renderscript.RSTextureView: boolean performClick()> (1)
<android.support.v13.app.FragmentTabHost: boolean performClick()> (1)
<android.support.v4.app.FragmentTabHost: boolean performClick()> (1)
<android.support.v4.app.NoSaveStateFrameLayout: boolean performClick()> (1)
<android.support.v4.view.PagerTabStrip: boolean performClick()> (1)
<android.support.v4.view.PagerTitleStrip: boolean performClick()> (1)
<android.support.v4.view.ViewPager: boolean performClick()> (1)
<android.support.v4.widget.ContentLoadingProgressBar: boolean performClick()> (1)
<android.support.v4.widget.DrawerLayout: boolean performClick()> (1)
<android.support.v4.widget.SearchViewCompatIcs$MySearchView: boolean performClick()> (1)
<android.support.v4.widget.SlidingPaneLayout: boolean performClick()> (1)
<android.support.v7.widget.GridLayout: boolean performClick()> (1)
<android.support.v7.widget.Space: boolean performClick()> (1)
<android.view.LayoutInflater$BlinkLayout: boolean performClick()> (1)
<android.view.SurfaceView: boolean performClick()> (1)
<android.view.TextureView: boolean performClick()> (1)
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)> (364)
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)> (269)
<android.view.View: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (442)
<android.view.ViewGroup: boolean performClick()> (1)
<android.view.ViewOverlay$OverlayViewGroup: boolean performClick()> (1)
<android.view.View$PerformClick: void run()> (1)
<android.view.ViewStub: boolean performClick()> (1)
<android.webkit.WebView: boolean performClick()> (1)
<android.widget.AbsListView: boolean performClick()> (1)
<android.widget.AbsoluteLayout: boolean performClick()> (1)
<android.widget.AbsSeekBar: boolean performClick()> (1)
<android.widget.AbsSpinner: boolean performClick()> (2)
<android.widget.ActivityChooserView: boolean performClick()> (1)
<android.widget.AdapterViewAnimator: boolean performClick()> (1)
<android.widget.AdapterView: boolean performClick()> (1)
<android.widget.AdapterViewFlipper: boolean performClick()> (1)
<android.widget.AnalogClock: boolean performClick()> (1)
<android.widget.AppSecurityPermissions$PermissionItemView: boolean performClick()> (1)
<android.widget.AutoCompleteTextView: boolean performClick()> (1)
<android.widget.Button: boolean performClick()> (5)
<android.widget.CalendarView: boolean performClick()> (1)
<android.widget.CalendarView$WeekView: boolean performClick()> (1)
<android.widget.CheckedTextView: boolean performClick()> (1)
<android.widget.Chronometer: boolean performClick()> (1)
<android.widget.DatePicker: boolean performClick()> (1)
<android.widget.DateTimeView: boolean performClick()> (1)
<android.widget.DialerFilter: boolean performClick()> (1)
<android.widget.DigitalClock: boolean performClick()> (1)
<android.widget.Editor$HandleView: boolean performClick()> (1)
<android.widget.Editor$InsertionHandleView: boolean performClick()> (1)
<android.widget.Editor$SelectionEndHandleView: boolean performClick()> (1)
<android.widget.Editor$SelectionStartHandleView: boolean performClick()> (1)
<android.widget.EditText: boolean performClick()> (3)
<android.widget.ExpandableListView: boolean performClick()> (1)
<android.widget.FrameLayout: boolean performClick()> (1)
<android.widget.Gallery: boolean performClick()> (1)
<android.widget.GridLayout: boolean performClick()> (1)
<android.widget.GridView: boolean performClick()> (1)
<android.widget.HorizontalScrollView: boolean performClick()> (1)
<android.widget.ImageButton: boolean performClick()> (2)
<android.widget.ImageSwitcher: boolean performClick()> (1)
<android.widget.ImageView: boolean performClick()> (2)
<android.widget.LinearLayout: boolean performClick()> (1)
<android.widget.ListPopupWindow$DropDownListView: boolean performClick()> (1)
<android.widget.ListView: boolean performClick()> (1)
<android.widget.MediaController: boolean performClick()> (1)
<android.widget.MultiAutoCompleteTextView: boolean performClick()> (1)
<android.widget.NumberPicker: boolean performClick()> (1)
<android.widget.NumberPicker$CustomEditText: boolean performClick()> (1)
<android.widget.PopupWindow$PopupViewContainer: boolean performClick()> (1)
<android.widget.ProgressBar: boolean performClick()> (1)
<android.widget.QuickContactBadge: boolean performClick()> (1)
<android.widget.RadioGroup: boolean performClick()> (1)
<android.widget.RatingBar: boolean performClick()> (1)
<android.widget.RelativeLayout: boolean performClick()> (1)
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: boolean performClick()> (1)
<android.widget.ScrollView: boolean performClick()> (1)
<android.widget.SearchView: boolean performClick()> (1)
<android.widget.SearchView$SearchAutoComplete: boolean performClick()> (1)
<android.widget.SeekBar: boolean performClick()> (1)
<android.widget.SlidingDrawer: boolean performClick()> (1)
<android.widget.Space: boolean performClick()> (1)
<android.widget.StackView: boolean performClick()> (1)
<android.widget.StackView$StackFrame: boolean performClick()> (1)
<android.widget.TabHost: boolean performClick()> (1)
<android.widget.TableLayout: boolean performClick()> (1)
<android.widget.TableRow: boolean performClick()> (1)
<android.widget.TabWidget: boolean performClick()> (1)
<android.widget.TextClock: boolean performClick()> (1)
<android.widget.TextSwitcher: boolean performClick()> (1)
<android.widget.TextView: boolean performClick()> (2)
<android.widget.TimePicker: boolean performClick()> (1)
<android.widget.TwoLineListItem: boolean performClick()> (1)
<android.widget.VideoView: boolean performClick()> (2)
<android.widget.ViewAnimator: boolean performClick()> (1)
<android.widget.ViewFlipper: boolean performClick()> (1)
<android.widget.ViewSwitcher: boolean performClick()> (1)
<android.widget.ZoomButton: boolean performClick()> (1)
<android.widget.ZoomButtonsController$Container: boolean performClick()> (1)
<android.widget.ZoomControls: boolean performClick()> (1)
<com.android.browser.AddBookmarkPage$CustomListView: boolean performClick()> (1)
<com.android.browser.AddNewBookmark: boolean performClick()> (1)
<com.android.browser.AutologinBar: boolean performClick()> (1)
<com.android.browser.BaseUi$FullscreenHolder: boolean performClick()> (1)
<com.android.browser.BookmarkItem: boolean performClick()> (1)
<com.android.browser.BreadCrumbView: boolean performClick()> (1)
<com.android.browser.BrowserWebView: boolean performClick()> (1)
<com.android.browser.ErrorConsoleView: boolean performClick()> (1)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: boolean performClick()> (1)
<com.android.browser.GeolocationPermissionsPrompt: boolean performClick()> (1)
<com.android.browser.HistoryItem: boolean performClick()> (1)
<com.android.browser.NavigationBarBase: boolean performClick()> (1)
<com.android.browser.NavigationBarPhone: boolean performClick()> (1)
<com.android.browser.NavigationBarTablet: boolean performClick()> (1)
<com.android.browser.NavScreen: boolean performClick()> (1)
<com.android.browser.NavTabScroller: boolean performClick()> (1)
<com.android.browser.NavTabScroller$ContentLayout: boolean performClick()> (1)
<com.android.browser.NavTabView: boolean performClick()> (1)
<com.android.browser.PageProgressView: boolean performClick()> (1)
<com.android.browser.TabBar: boolean performClick()> (1)
<com.android.browser.TabBar$TabView: boolean performClick()> (1)
<com.android.browser.TabScrollView: boolean performClick()> (1)
<com.android.browser.TabScrollView$TabLayout: boolean performClick()> (1)
<com.android.browser.TitleBar: boolean performClick()> (1)
<com.android.browser.UrlInputView: boolean performClick()> (1)
<com.android.browser.view.BasePieView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.browser.view.BookmarkContainer: boolean performClick()> (1)
<com.android.browser.view.BookmarkExpandableView: boolean performClick()> (1)
<com.android.browser.view.CustomScreenLinearLayout: boolean performClick()> (1)
<com.android.browser.view.EventRedirectingFrameLayout: boolean performClick()> (1)
<com.android.browser.view.PieMenu: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.view.PieMenu: boolean performClick()> (1)
<com.android.browser.view.ScrollerView: boolean performClick()> (1)
<com.android.browser.view.SnapshotGridView: boolean performClick()> (1)
<com.android.browser.view.StopProgressView: boolean performClick()> (1)
<com.android.calculator2.CalculatorDisplay: boolean performClick()> (1)
<com.android.calculator2.CalculatorEditText: boolean performClick()> (1)
<com.android.calculator2.CalculatorViewPager: boolean performClick()> (1)
<com.android.calculator2.ColorButton: boolean performClick()> (1)
<com.android.calculator2.PanelSwitcher: boolean performClick()> (1)
<com.android.calendar.agenda.AgendaListView: boolean performClick()> (1)
<com.android.calendar.ColorChipView: boolean performClick()> (1)
<com.android.calendar.DayView: boolean performClick()> (1)
<com.android.calendar.event.AttendeesView: boolean performClick()> (1)
<com.android.calendar.ExpandableTextView: boolean performClick()> (1)
<com.android.calendar.month.MonthListView: boolean performClick()> (1)
<com.android.calendar.month.MonthWeekEventsView: boolean performClick()> (1)
<com.android.calendar.month.SimpleWeekView: boolean performClick()> (1)
<com.android.calendar.recurrencepicker.LinearLayoutWithMaxWidth: boolean performClick()> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: boolean performClick()> (1)
<com.android.calendar.StickyHeaderListView: boolean performClick()> (1)
<com.android.camera.crop.CropView: boolean performClick()> (1)
<com.android.camera.PanoProgressBar: boolean performClick()> (1)
<com.android.camera.tinyplanet.TinyPlanetPreview: boolean performClick()> (1)
<com.android.camera.ui.AbstractSettingPopup: boolean performClick()> (1)
<com.android.camera.ui.CameraControls: boolean performClick()> (1)
<com.android.camera.ui.CameraRootView: boolean performClick()> (1)
<com.android.camera.ui.CheckedLinearLayout: boolean performClick()> (1)
<com.android.camera.ui.CountdownTimerPopup: boolean performClick()> (1)
<com.android.camera.ui.CountDownView: boolean performClick()> (1)
<com.android.camera.ui.ExpandedGridView: boolean performClick()> (1)
<com.android.camera.ui.FaceView: boolean performClick()> (1)
<com.android.camera.ui.FilmstripBottomControls: boolean performClick()> (1)
<com.android.camera.ui.FilmStripView: boolean performClick()> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean performClick()> (1)
<com.android.camera.ui.InLineSettingItem: boolean performClick()> (1)
<com.android.camera.ui.InLineSettingMenu: boolean performClick()> (1)
<com.android.camera.ui.ListPrefSettingPopup: boolean performClick()> (1)
<com.android.camera.ui.ModuleSwitcher: boolean performClick()> (1)
<com.android.camera.ui.MoreSettingPopup: boolean performClick()> (1)
<com.android.camera.ui.PieMenuButton: boolean performClick()> (2)
<com.android.camera.ui.RenderOverlay: boolean performClick()> (1)
<com.android.camera.ui.RenderOverlay$RenderView: boolean performClick()> (1)
<com.android.camera.ui.RotatableLayout: boolean performClick()> (1)
<com.android.camera.ui.RotateImageView: boolean performClick()> (1)
<com.android.camera.ui.RotateLayout: boolean performClick()> (1)
<com.android.camera.ui.TimeIntervalPopup: boolean performClick()> (1)
<com.android.camera.ui.TwoStateImageView: boolean performClick()> (1)
<com.android.camera.ui.ZoomView: boolean performClick()> (1)
<com.android.colorpicker.ColorPickerPalette: boolean performClick()> (1)
<com.android.colorpicker.ColorPickerSwatch: boolean performClick()> (1)
<com.android.datetimepicker.AccessibleLinearLayout: boolean performClick()> (1)
<com.android.datetimepicker.AccessibleTextView: boolean performClick()> (1)
<com.android.datetimepicker.date.AccessibleDateAnimator: boolean performClick()> (1)
<com.android.datetimepicker.date.DayPickerView: boolean performClick()> (1)
<com.android.datetimepicker.date.SimpleMonthView: boolean performClick()> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: boolean performClick()> (1)
<com.android.datetimepicker.date.YearPickerView: boolean performClick()> (1)
<com.android.datetimepicker.time.AmPmCirclesView: boolean performClick()> (1)
<com.android.datetimepicker.time.CircleView: boolean performClick()> (1)
<com.android.datetimepicker.time.RadialPickerLayout: boolean performClick()> (1)
<com.android.datetimepicker.time.RadialSelectorView: boolean performClick()> (1)
<com.android.datetimepicker.time.RadialTextsView: boolean performClick()> (1)
<com.android.deskclock.AlarmTimelineView: boolean performClick()> (1)
<com.android.deskclock.AnalogClock: boolean performClick()> (1)
<com.android.deskclock.AndroidClockTextView: boolean performClick()> (1)
<com.android.deskclock.CircleButtonsLayout: boolean performClick()> (1)
<com.android.deskclock.CircleTimerView: boolean performClick()> (1)
<com.android.deskclock.DontPressWithParentLayout: boolean performClick()> (1)
<com.android.deskclock.timer.CountingTimerView: boolean performClick()> (1)
<com.android.deskclock.TimerSetupView: boolean performClick()> (1)
<com.android.deskclock.timer.TimerListItem: boolean performClick()> (1)
<com.android.deskclock.timer.TimerView: boolean performClick()> (1)
<com.android.deskclock.widget.ActionableToastBar: boolean performClick()> (1)
<com.android.deskclock.widget.EllipsizeLayout: boolean performClick()> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean performClick()> (1)
<com.android.deskclock.widget.sgv.StaggeredGridView: boolean performClick()> (1)
<com.android.deskclock.widget.TextTime: boolean performClick()> (1)
<com.android.development.LogTextBox: boolean performClick()> (1)
<com.android.documentsui.DirectoryContainerView: boolean performClick()> (1)
<com.android.documentsui.DirectoryView: boolean performClick()> (1)
<com.android.dreams.phototable.BummerView: boolean performClick()> (1)
<com.android.dreams.phototable.PhotoCarousel: boolean performClick()> (1)
<com.android.dreams.phototable.PhotoTable: boolean performClick()> (1)
<com.android.email.view.CertificateSelector: boolean performClick()> (1)
<com.android.ex.chips.RecipientEditTextView: boolean performClick()> (1)
<com.android.ex.editstyledtext.EditStyledText: boolean performClick()> (1)
<com.android.ex.photo.PhotoViewPager: boolean performClick()> (1)
<com.android.ex.photo.views.PhotoView: boolean performClick()> (1)
<com.android.galaxy4.GalaxyView: boolean performClick()> (2)
<com.android.gallery3d.app.CommonControllerOverlay: boolean performClick()> (1)
<com.android.gallery3d.app.MovieControllerOverlay: boolean performClick()> (1)
<com.android.gallery3d.app.TimeBar: boolean performClick()> (1)
<com.android.gallery3d.app.TrimControllerOverlay: boolean performClick()> (1)
<com.android.gallery3d.app.TrimTimeBar: boolean performClick()> (1)
<com.android.gallery3d.filtershow.category.CategorySelected: boolean performClick()> (1)
<com.android.gallery3d.filtershow.category.CategoryTrack: boolean performClick()> (1)
<com.android.gallery3d.filtershow.category.CategoryView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.category.IconView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.CenteredLinearLayout: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorBrightnessView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorCompareView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorHueView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorOpacityView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorRectView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSaturationView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSVRectView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorValueView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.crop.CropView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCurves: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageDraw: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageGrad: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageMirror: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImagePoint: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRedEye: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRotate: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: boolean performClick()> (1)
<com.android.gallery3d.filtershow.imageshow.ImageVignette: boolean performClick()> (1)
<com.android.gallery3d.filtershow.info.HistogramView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.state.StatePanelTrack: boolean performClick()> (1)
<com.android.gallery3d.filtershow.state.StateView: boolean performClick()> (1)
<com.android.gallery3d.filtershow.ui.FramedTextButton: boolean performClick()> (1)
<com.android.gallery3d.ingest.ui.DateTileView: boolean performClick()> (1)
<com.android.gallery3d.ingest.ui.IngestGridView: boolean performClick()> (1)
<com.android.gallery3d.ingest.ui.MtpFullscreenView: boolean performClick()> (1)
<com.android.gallery3d.ingest.ui.MtpImageView: boolean performClick()> (1)
<com.android.gallery3d.ingest.ui.MtpThumbnailTileView: boolean performClick()> (1)
<com.android.gallery3d.ui.GLRootView: boolean performClick()> (2)
<com.android.inputmethod.dictionarypack.ButtonSwitcher: boolean performClick()> (1)
<com.android.inputmethod.dictionarypack.DictionaryDownloadProgressBar: boolean performClick()> (1)
<com.android.inputmethod.keyboard.EmojiCategoryPageIndicatorView: boolean performClick()> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: boolean performClick()> (1)
<com.android.inputmethod.keyboard.internal.PreviewPlacerView: boolean performClick()> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView: boolean performClick()> (1)
<com.android.inputmethod.keyboard.internal.ScrollViewWithNotifier: boolean performClick()> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean performClick()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean performClick()> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean performClick()> (1)
<com.android.inputmethod.latin.InputView: boolean performClick()> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView: boolean performClick()> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$IndicatorView: boolean performClick()> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: boolean performClick()> (1)
<com.android.inputmethod.latin.setup.SetupStepIndicatorView: boolean performClick()> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean performClick()> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean performClick()> (1)
<com.android.inputmethod.pinyin.BalloonHint$BalloonView: boolean performClick()> (1)
<com.android.inputmethod.pinyin.CandidatesContainer: boolean performClick()> (1)
<com.android.inputmethod.pinyin.CandidateView: boolean performClick()> (1)
<com.android.inputmethod.pinyin.ComposingView: boolean performClick()> (1)
<com.android.inputmethod.pinyin.SkbContainer: boolean performClick()> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: boolean performClick()> (1)
<com.android.inputmethod.research.FeedbackLayout: boolean performClick()> (1)
<com.android.internal.app.AlertController$RecycleListView: boolean performClick()> (1)
<com.android.internal.policy.impl.ImmersiveModeConfirmation$ClingWindowView: boolean performClick()> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean performClick()> (1)
<com.android.internal.policy.impl.RecentApplicationsBackground: boolean performClick()> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean performClick()> (1)
<com.android.internal.view.menu.ActionMenuView: boolean performClick()> (1)
<com.android.internal.view.menu.ExpandedMenuView: boolean performClick()> (1)
<com.android.internal.view.menu.IconMenuView: boolean performClick()> (1)
<com.android.internal.view.menu.ListMenuItemView: boolean performClick()> (1)
<com.android.internal.widget.AbsActionBarView: boolean performClick()> (1)
<com.android.internal.widget.ActionBarContainer: boolean performClick()> (1)
<com.android.internal.widget.ActionBarContextView: boolean performClick()> (1)
<com.android.internal.widget.ActionBarOverlayLayout: boolean performClick()> (1)
<com.android.internal.widget.ActionBarView: boolean performClick()> (1)
<com.android.internal.widget.ActionBarView$HomeView: boolean performClick()> (1)
<com.android.internal.widget.DialogTitle: boolean performClick()> (1)
<com.android.internal.widget.FaceUnlockView: boolean performClick()> (1)
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: boolean performClick()> (1)
<com.android.internal.widget.LockPatternView: boolean performClick()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean performClick()> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean performClick()> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean performClick()> (1)
<com.android.internal.widget.PointerLocationView: boolean performClick()> (1)
<com.android.internal.widget.RotarySelector: boolean performClick()> (1)
<com.android.internal.widget.ScrollingTabContainerView: boolean performClick()> (1)
<com.android.internal.widget.ScrollingTabContainerView$TabView: boolean performClick()> (1)
<com.android.internal.widget.SizeAdaptiveLayout: boolean performClick()> (1)
<com.android.internal.widget.SlidingTab: boolean performClick()> (1)
<com.android.internal.widget.SubtitleView: boolean performClick()> (1)
<com.android.internal.widget.TextProgressBar: boolean performClick()> (1)
<com.android.internal.widget.WaveView: boolean performClick()> (1)
<com.android.internal.widget.WeightedLinearLayout: boolean performClick()> (1)
<com.android.mail.browse.BorderView: boolean performClick()> (1)
<com.android.mail.browse.ConversationContainer: boolean performClick()> (1)
<com.android.mail.browse.ConversationItemView: boolean performClick()> (1)
<com.android.mail.browse.ConversationListFooterView: boolean performClick()> (1)
<com.android.mail.browse.ConversationPager: boolean performClick()> (1)
<com.android.mail.browse.ConversationViewHeader: boolean performClick()> (1)
<com.android.mail.browse.ConversationWebView: boolean performClick()> (1)
<com.android.mail.browse.FolderSpanTextView: boolean performClick()> (1)
<com.android.mail.browse.MailWebView: boolean performClick()> (1)
<com.android.mail.browse.MessageAttachmentBar: boolean performClick()> (1)
<com.android.mail.browse.MessageAttachmentTile: boolean performClick()> (1)
<com.android.mail.browse.MessageFooterView: boolean performClick()> (1)
<com.android.mail.browse.MessageHeaderView: boolean performClick()> (1)
<com.android.mail.browse.MessageInviteView: boolean performClick()> (1)
<com.android.mail.browse.MessageScrollView: boolean performClick()> (1)
<com.android.mail.browse.MessageView: boolean performClick()> (1)
<com.android.mail.browse.MessageWebView: boolean performClick()> (1)
<com.android.mail.browse.MultiAdapterSpinner: boolean performClick()> (1)
<com.android.mail.browse.ScrollIndicatorsView: boolean performClick()> (1)
<com.android.mail.browse.SpamWarningView: boolean performClick()> (1)
<com.android.mail.browse.SuperCollapsedBlock: boolean performClick()> (1)
<com.android.mail.browse.SwipeableConversationItemView: boolean performClick()> (1)
<com.android.mail.compose.AttachmentComposeView: boolean performClick()> (1)
<com.android.mail.compose.AttachmentsView: boolean performClick()> (1)
<com.android.mail.compose.CcBccView: boolean performClick()> (1)
<com.android.mail.compose.ComposeAttachmentTile: boolean performClick()> (1)
<com.android.mail.compose.EnterSubject: boolean performClick()> (1)
<com.android.mail.compose.QuotedTextView: boolean performClick()> (1)
<com.android.mail.MinTimeProgressView: boolean performClick()> (1)
<com.android.mail.ui.AccountItemView: boolean performClick()> (1)
<com.android.mail.ui.ActionableToastBar: boolean performClick()> (1)
<com.android.mail.ui.AnimatedListView: boolean performClick()> (1)
<com.android.mail.ui.AttachmentTile: boolean performClick()> (1)
<com.android.mail.ui.AttachmentTileGrid: boolean performClick()> (1)
<com.android.mail.ui.ButteryProgressBar: boolean performClick()> (1)
<com.android.mail.ui.ConversationListCopy: boolean performClick()> (1)
<com.android.mail.ui.ConversationListView: boolean performClick()> (1)
<com.android.mail.ui.ConversationListView$HintText: boolean performClick()> (1)
<com.android.mail.ui.ConversationLongPressTipView: boolean performClick()> (1)
<com.android.mail.ui.ConversationPhotoTeaserView: boolean performClick()> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: boolean performClick()> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: boolean performClick()> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: boolean performClick()> (1)
<com.android.mail.ui.EmptyConversationListView: boolean performClick()> (1)
<com.android.mail.ui.FolderItemView: boolean performClick()> (1)
<com.android.mail.ui.FolderListLayout: boolean performClick()> (1)
<com.android.mail.ui.LeaveBehindItem: boolean performClick()> (1)
<com.android.mail.ui.MailActionBarView: boolean performClick()> (1)
<com.android.mail.ui.NestedFolderTeaserView: boolean performClick()> (1)
<com.android.mail.ui.SearchMailActionBarView: boolean performClick()> (1)
<com.android.mail.ui.SwipeableListView: boolean performClick()> (1)
<com.android.mail.ui.TwoPaneLayout: boolean performClick()> (1)
<com.android.music.CheckableRelativeLayout: boolean performClick()> (1)
<com.android.music.RepeatingImageButton: boolean performClick()> (1)
<com.android.music.TouchInterceptor: boolean performClick()> (1)
<com.android.music.VerticalTextSpinner: boolean performClick()> (1)
<com.android.noisefield.NoiseFieldView: boolean performClick()> (2)
<com.android.packageinstaller.CaffeinatedScrollView: boolean performClick()> (1)
<com.android.phasebeam.PhaseBeamView: boolean performClick()> (2)
<com.android.photos.views.BlockingGLTextureView: boolean performClick()> (1)
<com.android.photos.views.GalleryThumbnailView: boolean performClick()> (1)
<com.android.photos.views.HeaderGridView: boolean performClick()> (1)
<com.android.photos.views.HeaderGridView$FullWidthFixedViewLayout: boolean performClick()> (1)
<com.android.photos.views.SquareImageView: boolean performClick()> (1)
<com.android.photos.views.TiledImageView: boolean performClick()> (1)
<com.android.printspooler.PrintDialogFrame: boolean performClick()> (1)
<com.android.providers.downloads.ui.DownloadItem: boolean performClick()> (1)
<com.android.quicksearchbox.ui.BaseSuggestionView: boolean performClick()> (1)
<com.android.quicksearchbox.ui.ClusteredSuggestionsView: boolean performClick()> (1)
<com.android.quicksearchbox.ui.ContactBadge: boolean performClick()> (1)
<com.android.quicksearchbox.ui.CorpusView: boolean performClick()> (1)
<com.android.quicksearchbox.ui.DefaultSuggestionView: boolean performClick()> (1)
<com.android.quicksearchbox.ui.QueryTextView: boolean performClick()> (1)
<com.android.quicksearchbox.ui.SearchActivityView: boolean performClick()> (1)
<com.android.quicksearchbox.ui.SearchActivityViewSinglePane: boolean performClick()> (1)
<com.android.quicksearchbox.ui.SuggestionsView: boolean performClick()> (1)
<com.android.quicksearchbox.ui.WebSearchSuggestionView: boolean performClick()> (1)
<com.android.soundrecorder.VUMeter: boolean performClick()> (1)
<com.android.timezonepicker.TimeZonePickerView: boolean performClick()> (1)
<com.android.videoeditor.widgets.AudioTrackLinearLayout: boolean performClick()> (1)
<com.android.videoeditor.widgets.AudioTrackView: boolean performClick()> (1)
<com.android.videoeditor.widgets.EditorRelativeLayout: boolean performClick()> (1)
<com.android.videoeditor.widgets.HandleView: boolean performClick()> (1)
<com.android.videoeditor.widgets.HorizontalScrollView: boolean performClick()> (1)
<com.android.videoeditor.widgets.ImageViewTouchBase: boolean performClick()> (1)
<com.android.videoeditor.widgets.MediaItemView: boolean performClick()> (1)
<com.android.videoeditor.widgets.MediaLinearLayout: boolean performClick()> (1)
<com.android.videoeditor.widgets.OverlayLinearLayout: boolean performClick()> (1)
<com.android.videoeditor.widgets.OverlayView: boolean performClick()> (1)
<com.android.videoeditor.widgets.PlayheadView: boolean performClick()> (1)
<com.android.videoeditor.widgets.PreviewSurfaceView: boolean performClick()> (2)
<com.android.videoeditor.widgets.TimelineHorizontalScrollView: boolean performClick()> (1)
<com.android.videoeditor.widgets.TimelineRelativeLayout: boolean performClick()> (1)
<com.android.videoeditor.widgets.TransitionView: boolean performClick()> (1)
<com.android.videoeditor.widgets.ZoomControl: boolean performClick()> (1)
<com.android.wallpaper.fall.FallView: boolean performClick()> (2)
<com.android.wallpaper.galaxy.GalaxyView: boolean performClick()> (2)
<com.android.wallpaper.grass.GrassView: boolean performClick()> (2)
<com.android.wallpaper.holospiral.HoloSpiralView: boolean performClick()> (2)
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)> (9)
<android.widget.ExpandableListView: boolean handleItemClick(android.view.View,int,long)> (3)
<android.widget.Gallery: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<android.widget.GridView: boolean arrowScroll(int)> (5)
<android.widget.GridView: boolean sequenceScroll(int)> (4)
<android.widget.ListView: boolean arrowScroll(int)> (17)
<android.widget.SlidingDrawer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TabHost: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.internal.policy.impl.RecentApplicationsDialog: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.browser.view.PieMenu: void onEnter(com.android.browser.view.PieItem)> (1)
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean performClick()> (1)
<com.android.internal.view.menu.IconMenuItemView: boolean performClick()> (1)
<android.app.IUiAutomationConnection$Stub$Proxy: void connect(android.accessibilityservice.IAccessibilityServiceClient)> ()
<android.app.IUiAutomationConnection$Stub: void connect(android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$6: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$7: void onClick(android.view.View)> (1)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$9: void onClick(android.view.View)> (1)
<com.android.mail.browse.ConversationItemView: void setContentDescription()> (2)
<com.android.mail.browse.ConversationItemView: void bindAd(com.android.mail.browse.ConversationItemViewModel,com.android.mail.ui.ControllableActivity,com.android.mail.ui.AnimatedAdapter$ConversationListListener,com.android.mail.browse.ConversationItemView$ConversationItemAreaClickListener,com.android.mail.providers.Folder,int,com.android.mail.ui.AnimatedAdapter,int,android.graphics.Bitmap)> ()
<com.android.mail.browse.ConversationItemView: void bind(com.android.mail.providers.Conversation,com.android.mail.ui.ControllableActivity,com.android.mail.ui.AnimatedAdapter$ConversationListListener,com.android.mail.ui.ConversationSelectionSet,com.android.mail.providers.Folder,int,boolean,boolean,boolean,boolean,boolean,com.android.mail.ui.AnimatedAdapter)> (1)
<android.app.DatePickerDialog: void <init>(android.content.Context,android.app.DatePickerDialog$OnDateSetListener,int,int,int)> ()
<android.widget.AnalogClock: void access$100(android.widget.AnalogClock)> (1)
<android.widget.AnalogClock: void onAttachedToWindow()> (1)
<com.android.calendar.event.EditEventView: void access$900(com.android.calendar.event.EditEventView)> (1)
<com.android.calendar.event.EditEventView: void onRecurrenceSet(java.lang.String)> (1)
<com.android.datetimepicker.date.DatePickerController: void onYearSelected(int)> (1)
<com.android.datetimepicker.date.DatePickerController: void onDayOfMonthSelected(int,int,int)> (1)
<com.android.deskclock.AnalogClock: void access$100(com.android.deskclock.AnalogClock)> (2)
<com.android.deskclock.AnalogClock: void onAttachedToWindow()> (1)
<com.android.deskclock.AnalogClock: void setTimeZone(java.lang.String)> (1)
<com.android.documentsui.DirectoryFragment$DocumentsAdapter: android.view.View getDocumentView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$2: void run()> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment$3: void run()> (1)
<android.widget.CalendarView$WeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<android.widget.CalendarView: void setDate(long)> (2)
<android.widget.DatePicker: void updateCalendarView()> (6)
<android.widget.DatePicker: void setMaxDate(long)> (1)
<android.widget.DatePicker: void setMinDate(long)> (1)
<android.widget.CalendarView$2: void onScroll(android.widget.AbsListView,int,int,int)> (1)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.mail.browse.MessageHeaderView: boolean ensureExpandedDetailsView()> (1)
<com.android.mail.browse.MessageHeaderView: void render(boolean)> (3)
<com.android.mail.browse.MessageHeaderView: void showDetailsPopup()> (1)
<com.android.mail.browse.MessageHeaderView: void toggleExpanded()> (1)
<com.android.calendar.month.MonthByWeekFragment: boolean goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void updateMonthHighlight(android.widget.AbsListView)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.deskclock.alarms.AlarmActivity: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.deskclock.alarms.AlarmActivity: void onCreate(android.os.Bundle)> (1)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: void updateView(android.view.View,com.android.deskclock.worldclock.CityObj)> (1)
<com.android.deskclock.worldclock.WorldClockAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (2)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)> (2)
<com.android.calendar.AllInOneActivity: boolean onNavigationItemSelected(int,long)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (1)
<com.android.calendar.AllInOneActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity$1: void onChange(boolean)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void sendViewEvent(com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (2)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (4)
<com.android.calendar.DayView$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.deskclock.AlarmClockFragment$8: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.browser.ActivityController: void onConfgurationChanged(android.content.res.Configuration)> (1)
<com.android.browser.Tab$2$6: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.latin.SubtypeSwitcher: void onSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.inputmethod.latin.SubtypeSwitcher: void updateParametersOnStartInputView()> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)> ()
<com.android.internal.view.IInputMethodManager$Stub: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)> (2)
<com.android.internal.view.IInputMethodManager$Stub$Proxy: boolean switchToNextInputMethod(android.os.IBinder,boolean)> ()
<com.android.internal.view.IInputMethodManager$Stub: boolean switchToNextInputMethod(android.os.IBinder,boolean)> (2)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetAutomaticShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetManualShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetShiftLockedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetShiftLockShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setSymbolsKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setSymbolsShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: boolean onCustomRequest(int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void loadKeyboard(android.view.inputmethod.EditorInfo,com.android.inputmethod.latin.settings.SettingsValues)> (3)
<com.android.inputmethod.latin.setup.SetupWizardActivity$1: void run()> (1)
<com.android.inputmethod.latin.settings.SettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void updateSpinner()> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: void onResume()> (1)
<com.android.inputmethodcommon.InputMethodSettingsImpl: void updateSubtypeEnabler()> (9)
<com.android.inputmethod.latin.RichInputMethodManager: boolean checkIfSubtypeBelongsToImeAndEnabled(android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.inputmethod.latin.RichInputMethodManager: boolean hasMultipleEnabledSubtypes(boolean,java.util.List)> (2)
<com.android.inputmethod.latin.RichInputMethodManager: java.util.List getMyEnabledInputMethodSubtypeList(boolean)> (4)
<com.android.server.power.PowerManagerService$1: void onProximityNegative()> (1)
<com.android.server.power.PowerManagerService$1: void onProximityPositive()> (1)
<com.android.server.power.PowerManagerService$1: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$DockReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void goToSleepFromNative(long,int)> ()
<com.android.server.power.PowerManagerService: void access$1300(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void checkIfBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$2000(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1800(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2300(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void userActivityFromNative(long,int,int)> ()
<com.android.server.power.PowerManagerService: void wakeUpFromNative(long)> ()
<android.support.v4.print.PrintHelper$PrintHelperVersionImpl: void printBitmap(java.lang.String,android.graphics.Bitmap)> (1)
<android.support.v4.print.PrintHelper$PrintHelperVersionImpl: void printBitmap(java.lang.String,android.net.Uri)> (1)
<com.android.printspooler.FusedPrintersProvider: void onStartLoading()> (1)
<com.android.printspooler.PrintJobConfigActivity$Editor$12: void onClick(android.view.View)> (1)
<com.android.printspooler.PrintJobConfigActivity$Editor$2: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.printspooler.PrintJobConfigActivity$Editor$5: void onChanged()> (1)
<com.android.printspooler.PrintJobConfigActivity: void onResume()> (1)
<com.android.printspooler.FusedPrintersProvider: void onStopLoading()> (3)
<android.widget.Editor$SuggestionsPopupWindow: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.widget.TextView: void onAttachedToWindow()> (38)
<android.widget.TextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (45)
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> (6)
<android.media.MediaPlayer$2: void run()> (1)
<android.media.MediaPlayer: void access$600(android.media.MediaPlayer)> (4)
<com.android.music.AudioPreview$PreviewPlayer: void scanInternalSubtitleTracks()> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void scanInternalSubtitleTracks()> (1)
<com.android.server.accessibility.AccessibilityInputFilter$1: void run()> (1)
<com.android.server.accessibility.TouchExplorer$SendHoverEnterAndMoveDelayed: void forceSendAndRemove()> (1)
<com.android.server.accessibility.TouchExplorer$SendHoverExitDelayed: void forceSendAndRemove()> ()
<com.android.server.accessibility.TouchExplorer$DoubleTapDetector: void onDoubleTap(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: void run()> (1)
<com.android.server.accessibility.TouchExplorer: void clear()> (3)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventGestureDetecting(android.view.MotionEvent,int)> (2)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: boolean performAction(int,int,android.os.Bundle)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void clearAccessibilityFocus()> (2)
<com.android.datetimepicker.date.SimpleMonthView: boolean restoreAccessibilityFocus(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.latin.SubtypeSwitcher: java.util.Locale getCurrentSubtypeLocale()> (8)
<com.android.inputmethod.latin.SubtypeSwitcher: void initialize(android.content.Context)> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.speech.tts.TextToSpeech$12: java.lang.Object run(android.speech.tts.ITextToSpeechService)> (1)
<android.support.v4.view.ViewPager: boolean executeKeyEvent(android.view.KeyEvent)> (4)
<com.android.calculator2.CalculatorViewPager: boolean arrowScroll(int)> (1)
<com.android.ex.photo.PhotoViewPager: boolean arrowScroll(int)> (1)
<com.android.mail.browse.ConversationPager: boolean arrowScroll(int)> (1)
<android.app.FragmentBreadCrumbs: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.app.MediaRouteButton: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.app.NativeActivity$NativeContentView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.app.SearchDialog$SearchBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.appwidget.AppWidgetHostView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.filterfw.core.FilterSurfaceView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.gesture.GestureOverlayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.inputmethodservice.ExtractEditLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.media.WebVttRenderingWidget: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.media.WebVttRenderingWidget$CueLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.media.WebVttRenderingWidget$RegionLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.media.WebVttRenderingWidget$SpanLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.opengl.GLSurfaceView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.preference.PreferenceFrameLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.renderscript.RSSurfaceView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.renderscript.RSTextureView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v13.app.FragmentTabHost: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.app.FragmentTabHost: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.app.NoSaveStateFrameLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.view.PagerTabStrip: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.view.PagerTitleStrip: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.view.ViewPager: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.widget.ContentLoadingProgressBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.widget.SearchViewCompatIcs$MySearchView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v4.widget.SlidingPaneLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v7.widget.GridLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.support.v7.widget.Space: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.view.LayoutInflater$BlinkLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.view.SurfaceView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.view.TextureView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.view.ViewGroup: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.view.ViewOverlay$OverlayViewGroup: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.view.ViewStub: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.AbsoluteLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.AbsSeekBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.AbsSpinner: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.widget.ActivityChooserView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.AdapterViewAnimator: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.AdapterView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.widget.AdapterViewFlipper: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.AnalogClock: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.AppSecurityPermissions$PermissionItemView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.CalendarView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.CalendarView$WeekView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.DatePicker: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.Editor$HandleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.Editor$InsertionHandleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.Editor$SelectionEndHandleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.Editor$SelectionStartHandleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.FrameLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.GridLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.HorizontalScrollView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ImageButton: boolean onKeyUp(int,android.view.KeyEvent)> (3)
<android.widget.ImageSwitcher: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ImageView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.LinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.MediaController: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.NumberPicker: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.PopupWindow$PopupViewContainer: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ProgressBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.QuickContactBadge: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.RadioGroup: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.RatingBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.RelativeLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ScrollView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.SearchView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.SeekBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.SlidingDrawer: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.Space: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.Spinner: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.StackView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.StackView$StackFrame: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.TabHost: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.TableLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.TableRow: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.TabWidget: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.TextSwitcher: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)> (39)
<android.widget.TimePicker: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.TwoLineListItem: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.VideoView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.widget.ViewAnimator: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ViewFlipper: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ViewSwitcher: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ZoomButtonsController$Container: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<android.widget.ZoomControls: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.addbookmark.FolderSpinner: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.AddNewBookmark: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.AutologinBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.BaseUi$FullscreenHolder: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.BookmarkItem: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.BreadCrumbView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.ErrorConsoleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.GeolocationPermissionsPrompt: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.HistoryItem: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarBase: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarPhone: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavigationBarTablet: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavScreen: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavTabScroller: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavTabScroller$ContentLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.NavTabView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.PageProgressView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.TabBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.TabBar$TabView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.TabScrollView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.TabScrollView$TabLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.TitleBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.view.BookmarkContainer: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.view.CustomScreenLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.view.EventRedirectingFrameLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.view.PieMenu: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.view.ScrollerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.browser.view.StopProgressView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calculator2.CalculatorDisplay: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calculator2.CalculatorViewPager: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calculator2.PanelSwitcher: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.ColorChipView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.event.AttendeesView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.ExpandableTextView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.month.MonthWeekEventsView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.month.SimpleWeekView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.recurrencepicker.LinearLayoutWithMaxWidth: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.StickyHeaderListView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.crop.CropView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.PanoProgressBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ShutterButton: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.tinyplanet.TinyPlanetPreview: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.AbstractSettingPopup: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.CameraControls: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.CameraRootView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.CheckedLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.CountdownTimerPopup: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.CountDownView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.FaceView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.FilmstripBottomControls: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.FilmStripView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.InLineSettingItem: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.InLineSettingMenu: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.ListPrefSettingPopup: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.ModuleSwitcher: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.MoreSettingPopup: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.PieMenuButton: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.RenderOverlay: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.RenderOverlay$RenderView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.RotatableLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.RotateImageView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.RotateLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.TimeIntervalPopup: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.TwoStateImageView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.camera.ui.ZoomView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.colorpicker.ColorPickerPalette: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.colorpicker.ColorPickerSwatch: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.AccessibleLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.date.AccessibleDateAnimator: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.date.SimpleMonthView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.time.AmPmCirclesView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.time.CircleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.time.RadialPickerLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.time.RadialSelectorView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.datetimepicker.time.RadialTextsView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.AlarmTimelineView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.AnalogClock: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.CircleButtonsLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.CircleTimerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.DontPressWithParentLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.timer.CountingTimerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.TimerSetupView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.timer.TimerListItem: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.timer.TimerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.widget.ActionableToastBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.widget.EllipsizeLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.deskclock.widget.sgv.StaggeredGridView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.documentsui.DirectoryContainerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.documentsui.DirectoryView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.dreams.phototable.PhotoCarousel: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.dreams.phototable.PhotoTable: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.email.view.CertificateSelector: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.ex.photo.PhotoViewPager: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.ex.photo.views.PhotoView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.galaxy4.GalaxyView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.gallery3d.app.CommonControllerOverlay: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.app.MovieControllerOverlay: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.app.TimeBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.app.TrimControllerOverlay: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.app.TrimTimeBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.category.CategorySelected: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.category.CategoryTrack: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.category.CategoryView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.category.IconView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.CenteredLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorBrightnessView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorCompareView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorHueView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorOpacityView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorRectView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSaturationView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSVRectView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorValueView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.crop.CropView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCurves: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageDraw: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageGrad: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageMirror: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImagePoint: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRedEye: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRotate: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageVignette: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.info.HistogramView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.state.StatePanelTrack: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.state.StateView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.filtershow.ui.FramedTextButton: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ingest.ui.DateTileView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ingest.ui.MtpFullscreenView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ingest.ui.MtpImageView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ingest.ui.MtpThumbnailTileView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.inputmethod.dictionarypack.ButtonSwitcher: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryDownloadProgressBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.EmojiCategoryPageIndicatorView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.internal.PreviewPlacerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.internal.ScrollViewWithNotifier: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.latin.InputView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$IndicatorView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.latin.setup.SetupStepIndicatorView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.pinyin.BalloonHint$BalloonView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.pinyin.CandidatesContainer: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.pinyin.CandidateView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.pinyin.ComposingView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.pinyin.SkbContainer: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.inputmethod.research.FeedbackLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.ImmersiveModeConfirmation$ClingWindowView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.RecentApplicationsBackground: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.view.menu.ActionMenuView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.view.menu.IconMenuView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.view.menu.ListMenuItemView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.AbsActionBarView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.ActionBarContainer: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.ActionBarContextView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.ActionBarOverlayLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.ActionBarView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.ActionBarView$HomeView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.FaceUnlockView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.LockPatternView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.PointerLocationView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.RotarySelector: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.ScrollingTabContainerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.ScrollingTabContainerView$TabView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.SizeAdaptiveLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.SlidingTab: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.SubtitleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.TextProgressBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.WaveView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.widget.WeightedLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.BorderView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.ConversationContainer: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.ConversationItemView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.ConversationListFooterView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.ConversationPager: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.ConversationViewHeader: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.MessageAttachmentBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.MessageAttachmentTile: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.MessageFooterView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.MessageHeaderView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.MessageInviteView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.MessageScrollView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.MultiAdapterSpinner: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.ScrollIndicatorsView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.SpamWarningView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.SuperCollapsedBlock: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.browse.SwipeableConversationItemView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.compose.AttachmentComposeView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.compose.AttachmentsView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.compose.CcBccView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.compose.ComposeAttachmentTile: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.compose.FromAddressSpinner: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.compose.QuotedTextView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.MinTimeProgressView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.AccountItemView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ActionableToastBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.AttachmentTile: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.AttachmentTileGrid: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ButteryProgressBar: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ConversationListCopy: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ConversationListView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ConversationListView$HintText: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ConversationLongPressTipView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ConversationPhotoTeaserView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.FolderItemView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.FolderListLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.LeaveBehindItem: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.MailActionBarView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.NestedFolderTeaserView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.SearchMailActionBarView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.mail.ui.TwoPaneLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.CheckableRelativeLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.VerticalTextSpinner: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.noisefield.NoiseFieldView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.packageinstaller.CaffeinatedScrollView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.phasebeam.PhaseBeamView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.photos.views.BlockingGLTextureView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.photos.views.GalleryThumbnailView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.photos.views.HeaderGridView$FullWidthFixedViewLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.photos.views.SquareImageView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.photos.views.TiledImageView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.printspooler.PrintDialogFrame: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.providers.downloads.ui.DownloadItem: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.quicksearchbox.ui.BaseSuggestionView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.quicksearchbox.ui.ContactBadge: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.quicksearchbox.ui.CorpusView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.quicksearchbox.ui.DefaultSuggestionView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.quicksearchbox.ui.SearchActivityView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.quicksearchbox.ui.SearchActivityViewSinglePane: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.quicksearchbox.ui.WebSearchSuggestionView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.soundrecorder.VUMeter: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.timezonepicker.TimeZonePickerView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.AudioTrackLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.AudioTrackView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.EditorRelativeLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.HandleView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.HorizontalScrollView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.ImageViewTouchBase: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.MediaItemView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.MediaLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.OverlayLinearLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.OverlayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.PlayheadView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.PreviewSurfaceView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.videoeditor.widgets.TimelineHorizontalScrollView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.TimelineRelativeLayout: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.TransitionView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.videoeditor.widgets.ZoomControl: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.wallpaper.fall.FallView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.wallpaper.galaxy.GalaxyView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.wallpaper.grass.GrassView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<com.android.wallpaper.holospiral.HoloSpiralView: boolean onKeyUp(int,android.view.KeyEvent)> (2)
<android.app.FragmentBreadCrumbs: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.app.MediaRouteButton: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.app.NativeActivity$NativeContentView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.app.SearchDialog$SearchBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.appwidget.AppWidgetHostView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.filterfw.core.FilterSurfaceView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.gesture.GestureOverlayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.inputmethodservice.ExtractEditLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.media.WebVttRenderingWidget: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.media.WebVttRenderingWidget$CueLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.media.WebVttRenderingWidget$RegionLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.media.WebVttRenderingWidget$SpanLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.opengl.GLSurfaceView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.preference.PreferenceFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.renderscript.RSSurfaceView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.renderscript.RSTextureView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v13.app.FragmentTabHost: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v4.app.FragmentTabHost: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v4.app.NoSaveStateFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v4.view.PagerTitleStrip: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v4.widget.AutoScrollHelper: void cancelTargetTouch()> (2)
<android.support.v4.widget.ContentLoadingProgressBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v4.widget.SearchViewCompatIcs$MySearchView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v7.widget.GridLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v7.widget.Space: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.view.LayoutInflater$BlinkLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.view.SurfaceView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.view.TextureView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)> (186)
<android.view.ViewGroup: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.view.ViewOverlay$OverlayViewGroup: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.view.ViewStub: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.AbsoluteLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.AbsSpinner: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.widget.ActivityChooserView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.AdapterView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.AnalogClock: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.AppSecurityPermissions$PermissionItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.CalendarView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.CalendarView$WeekView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.DatePicker: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.DialerFilter: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.FrameLayout: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.widget.GridLayout: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.widget.ImageButton: boolean onTouchEvent(android.view.MotionEvent)> (3)
<android.widget.ImageSwitcher: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.ImageView: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.widget.LinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.ProgressBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.QuickContactBadge: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.RadioGroup: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.RelativeLayout: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.SearchView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.Space: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.StackView$StackFrame: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TabHost: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TableLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TableRow: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TabWidget: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TextSwitcher: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)> (36)
<android.widget.TimePicker: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.TwoLineListItem: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.ViewAnimator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.ViewFlipper: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.ViewSwitcher: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.ZoomButtonsController$Container: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.AddNewBookmark: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.AutologinBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.BreadCrumbView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.ErrorConsoleView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.GeolocationPermissionsPrompt: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavigationBarBase: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavigationBarPhone: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavigationBarTablet: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavScreen: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavTabScroller$ContentLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.NavTabView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.PageProgressView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.TabBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.TabBar$TabView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.TabScrollView$TabLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.TitleBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.view.BookmarkContainer: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.view.CustomScreenLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.view.EventRedirectingFrameLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.view.StopProgressView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calculator2.CalculatorDisplay: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.ColorChipView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.event.AttendeesView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.EventInfoFragment$11: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.ExpandableTextView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.month.MonthWeekEventsView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.month.SimpleWeekView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.recurrencepicker.LinearLayoutWithMaxWidth: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.StickyHeaderListView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.PanoProgressBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ShutterButton: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.tinyplanet.TinyPlanetPreview: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.AbstractSettingPopup: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.CameraControls: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.CameraRootView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.CheckedLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.CountdownTimerPopup: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.CountDownView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.FaceView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.FilmstripBottomControls: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingItem: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingMenu: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.ListPrefSettingPopup: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.ModuleSwitcher: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.MoreSettingPopup: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.PieMenuButton: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.RenderOverlay: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.RenderOverlay$RenderView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.RotatableLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.RotateImageView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.RotateLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.TimeIntervalPopup: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.TwoStateImageView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.camera.ui.ZoomView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.colorpicker.ColorPickerPalette: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.colorpicker.ColorPickerSwatch: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.AccessibleLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.date.AccessibleDateAnimator: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.AmPmCirclesView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.CircleView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.RadialPickerLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.RadialSelectorView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.RadialTextsView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.AlarmTimelineView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.AnalogClock: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.CircleButtonsLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.CircleTimerView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.DontPressWithParentLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.timer.CountingTimerView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.TimerSetupView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.timer.TimerListItem: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.timer.TimerView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.ActionableToastBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.EllipsizeLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.documentsui.DirectoryContainerView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.documentsui.DirectoryView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.email.view.CertificateSelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.galaxy4.GalaxyView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.filtershow.category.CategorySelected: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.filtershow.category.CategoryTrack: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.filtershow.category.IconView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.filtershow.CenteredLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean onTouchEvent(android.view.MotionEvent)> (5)
<com.android.gallery3d.filtershow.info.HistogramView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.filtershow.state.StateView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.filtershow.ui.FramedTextButton: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ingest.ui.DateTileView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ingest.ui.MtpFullscreenView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ingest.ui.MtpImageView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ingest.ui.MtpThumbnailTileView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.dictionarypack.ButtonSwitcher: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.dictionarypack.DictionaryDownloadProgressBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.EmojiCategoryPageIndicatorView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.PreviewPlacerView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.InputView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$IndicatorView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.setup.SetupStepIndicatorView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.pinyin.BalloonHint$BalloonView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.pinyin.CandidateView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.pinyin.ComposingView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.research.FeedbackLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.policy.impl.RecentApplicationsBackground: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.view.menu.ActionMenuView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.view.menu.IconMenuView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.view.menu.ListMenuItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.AbsActionBarView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.ActionBarContextView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.ActionBarOverlayLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.ActionBarView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.ActionBarView$HomeView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.AutoScrollHelper: void cancelTargetTouch()> (2)
<com.android.internal.widget.FaceUnlockView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.ScrollingTabContainerView$TabView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SizeAdaptiveLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SubtitleView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.TextProgressBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.WeightedLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.BorderView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.ConversationItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.ConversationItemView: boolean onTouchEventNoSwipe(android.view.MotionEvent)> (1)
<com.android.mail.browse.ConversationListFooterView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.ConversationViewHeader: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.MessageAttachmentBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.MessageAttachmentTile: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.MessageFooterView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.MessageHeaderView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.MessageInviteView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.MultiAdapterSpinner: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.ScrollIndicatorsView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.SpamWarningView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.SuperCollapsedBlock: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.SwipeableConversationItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.compose.AttachmentComposeView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.compose.AttachmentsView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.compose.CcBccView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.compose.ComposeAttachmentTile: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.compose.QuotedTextView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.MinTimeProgressView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.AccountItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ActionableToastBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.AttachmentTile: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.AttachmentTileGrid: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ButteryProgressBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ConversationListCopy: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ConversationListView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ConversationListView$HintText: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ConversationLongPressTipView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ConversationPhotoTeaserView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.FolderItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.FolderListLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.LeaveBehindItem: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.MailActionBarView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.NestedFolderTeaserView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.SearchMailActionBarView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.TwoPaneLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.music.CheckableRelativeLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.noisefield.NoiseFieldView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.phasebeam.PhaseBeamView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.photos.views.BlockingGLTextureView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.photos.views.HeaderGridView$FullWidthFixedViewLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.photos.views.SquareImageView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.photos.views.TiledImageView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.printspooler.PrintDialogFrame: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.quicksearchbox.ui.BaseSuggestionView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.quicksearchbox.ui.ContactBadge: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.quicksearchbox.ui.CorpusView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.quicksearchbox.ui.DefaultSuggestionView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.quicksearchbox.ui.SearchActivityView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.quicksearchbox.ui.SearchActivityViewSinglePane: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.quicksearchbox.ui.WebSearchSuggestionView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.soundrecorder.VUMeter: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.timezonepicker.TimeZonePickerView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.AudioTrackLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.AudioTrackView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.EditorRelativeLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.ImageViewTouchBase: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.MediaItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.MediaLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.OverlayLinearLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.PlayheadView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.TimelineRelativeLayout: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.ZoomControl: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.wallpaper.galaxy.GalaxyView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.wallpaper.grass.GrassView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<android.app.FragmentBreadCrumbs: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.app.MediaRouteButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.app.NativeActivity$NativeContentView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.app.SearchDialog$SearchBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.appwidget.AppWidgetHostView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.filterfw.core.FilterSurfaceView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<android.gesture.GestureOverlayView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.inputmethodservice.ExtractButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.inputmethodservice.ExtractEditLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.inputmethodservice.ExtractEditText: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.inputmethodservice.KeyboardView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.media.WebVttRenderingWidget: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.media.WebVttRenderingWidget$CueLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.media.WebVttRenderingWidget$RegionLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.media.WebVttRenderingWidget$SpanLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.opengl.GLSurfaceView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<android.preference.PreferenceFrameLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.renderscript.RSSurfaceView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<android.renderscript.RSTextureView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v13.app.FragmentTabHost: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.app.FragmentTabHost: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.app.NoSaveStateFrameLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.view.PagerTabStrip: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.view.PagerTitleStrip: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.view.ViewPager: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.widget.ContentLoadingProgressBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.widget.DrawerLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.widget.SearchViewCompatIcs$MySearchView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v4.widget.SlidingPaneLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v7.widget.GridLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.support.v7.widget.Space: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.view.LayoutInflater$BlinkLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.view.SurfaceView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.view.TextureView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (5)
<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)> (354)
<android.view.ViewGroup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.view.ViewOverlay$OverlayViewGroup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.view.ViewStub: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.webkit.WebView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AbsListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AbsoluteLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AbsSeekBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AbsSpinner: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ActivityChooserView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AdapterViewAnimator: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AdapterView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AdapterViewFlipper: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AnalogClock: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AppSecurityPermissions$PermissionItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.AutoCompleteTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Button: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.CalendarView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.CalendarView$WeekView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.CheckBox: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.CheckedTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Chronometer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.CompoundButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.DatePicker: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.DateTimeView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.DialerFilter: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.DigitalClock: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Editor$HandleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Editor$InsertionHandleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Editor$SelectionEndHandleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Editor$SelectionStartHandleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.EditText: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ExpandableListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.FrameLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Gallery: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.GridLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.GridView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.HorizontalScrollView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ImageButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ImageSwitcher: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ImageView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.LinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ListPopupWindow$DropDownListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.MediaController: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.MultiAutoCompleteTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.NumberPicker: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.NumberPicker$CustomEditText: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.PopupWindow$PopupViewContainer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ProgressBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.QuickContactBadge: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.RadioButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.RadioGroup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.RatingBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.RelativeLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ScrollView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.SearchView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.SearchView$SearchAutoComplete: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.SeekBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.SlidingDrawer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Space: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Spinner: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.StackView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.StackView$StackFrame: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.Switch: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TabHost: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TableLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TableRow: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TabWidget: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TextClock: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TextSwitcher: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TimePicker: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ToggleButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.TwoLineListItem: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.VideoView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<android.widget.ViewAnimator: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ViewFlipper: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ViewSwitcher: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ZoomButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ZoomButtonsController$Container: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<android.widget.ZoomControls: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.addbookmark.FolderSpinner: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.AddBookmarkPage$CustomListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.AddNewBookmark: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.AutologinBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.BaseUi$FullscreenHolder: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.BookmarkItem: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.BreadCrumbView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.BrowserWebView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.ErrorConsoleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.GeolocationPermissionsPrompt: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.HistoryItem: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.NavigationBarBase: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.NavigationBarPhone: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.NavigationBarTablet: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.NavScreen: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.NavTabScroller: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.NavTabScroller$ContentLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.NavTabView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.PageProgressView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.TabBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.TabBar$TabView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.TabScrollView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.TabScrollView$TabLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.TitleBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.UrlInputView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.BookmarkContainer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.BookmarkExpandableView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.CustomScreenLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.EventRedirectingFrameLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.PieMenu: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.ScrollerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.SnapshotGridView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.browser.view.StopProgressView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calculator2.CalculatorDisplay: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calculator2.CalculatorEditText: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calculator2.CalculatorViewPager: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calculator2.ColorButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calculator2.PanelSwitcher: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.agenda.AgendaListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.ColorChipView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.DayView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.event.AttendeesView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.ExpandableTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthWeekEventsView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.month.SimpleWeekView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.MultiStateButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.recurrencepicker.LinearLayoutWithMaxWidth: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.recurrencepicker.WeekButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.calendar.StickyHeaderListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.crop.CropView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.PanoProgressBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ShutterButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.tinyplanet.TinyPlanetPreview: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.AbstractSettingPopup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.CameraControls: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.CameraRootView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.CheckedLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.CountdownTimerPopup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.CountDownView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.ExpandedGridView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.FaceView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.FilmstripBottomControls: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.FilmStripView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.InLineSettingItem: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.InLineSettingMenu: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.ListPrefSettingPopup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.ModuleSwitcher: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.MoreSettingPopup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.PieMenuButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.RenderOverlay: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.RenderOverlay$RenderView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.RotatableLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.RotateImageView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.RotateLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.Switch: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.TimeIntervalPopup: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.TwoStateImageView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.camera.ui.ZoomView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.colorpicker.ColorPickerPalette: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.colorpicker.ColorPickerSwatch: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.AccessibleLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.AccessibleTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.AccessibleDateAnimator: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.DayPickerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.YearPickerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.time.AmPmCirclesView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.time.CircleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.time.RadialPickerLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.time.RadialSelectorView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.datetimepicker.time.RadialTextsView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.AlarmTimelineView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.AnalogClock: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.AndroidClockTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.CircleButtonsLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.CircleTimerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.DontPressWithParentLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.timer.CountingTimerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.TimerSetupView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.timer.TimerListItem: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.timer.TimerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.widget.ActionableToastBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.widget.EllipsizeLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.widget.sgv.StaggeredGridView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.deskclock.widget.TextTime: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.development.LogTextBox: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.documentsui.DirectoryContainerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.documentsui.DirectoryView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.dreams.phototable.BummerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.dreams.phototable.PhotoCarousel: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.dreams.phototable.PhotoTable: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.email.view.CertificateSelector: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.ex.chips.RecipientEditTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.ex.editstyledtext.EditStyledText: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.ex.photo.PhotoViewPager: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.ex.photo.views.PhotoView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.galaxy4.GalaxyView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.gallery3d.app.CommonControllerOverlay: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.MovieControllerOverlay: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.TimeBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.TrimControllerOverlay: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.app.TrimTimeBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.category.CategorySelected: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.category.CategoryTrack: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.category.CategoryView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.category.IconView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.CenteredLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorBrightnessView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorCompareView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorHueView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorOpacityView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorRectView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSaturationView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSVRectView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorValueView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.crop.CropView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCurves: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageDraw: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageGrad: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageMirror: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImagePoint: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRedEye: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRotate: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageVignette: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.info.HistogramView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.state.StatePanelTrack: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.state.StateView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.filtershow.ui.FramedTextButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.ui.DateTileView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.ui.IngestGridView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.ui.MtpFullscreenView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.ui.MtpImageView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.ui.MtpThumbnailTileView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.gallery3d.ui.GLRootView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.inputmethod.dictionarypack.ButtonSwitcher: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.dictionarypack.DictionaryDownloadProgressBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.EmojiCategoryPageIndicatorView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.internal.PreviewPlacerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.internal.ScrollViewWithNotifier: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.latin.InputView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$IndicatorView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.latin.setup.SetupStepIndicatorView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.pinyin.BalloonHint$BalloonView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.pinyin.CandidatesContainer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.pinyin.CandidateView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.pinyin.ComposingView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.pinyin.SkbContainer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.inputmethod.research.FeedbackLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.app.AlertController$RecycleListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.policy.impl.ImmersiveModeConfirmation$ClingWindowView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.policy.impl.RecentApplicationsBackground: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.view.menu.ActionMenuView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.view.menu.ExpandedMenuView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.view.menu.IconMenuItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.view.menu.IconMenuView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.view.menu.ListMenuItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.AbsActionBarView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.ActionBarContainer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.ActionBarContextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.ActionBarOverlayLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.ActionBarView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.ActionBarView$HomeView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.DialogTitle: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.FaceUnlockView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.LockPatternView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.PointerLocationView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.RotarySelector: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.ScrollingTabContainerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.ScrollingTabContainerView$TabView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.SizeAdaptiveLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.SlidingTab: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.SubtitleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.TextProgressBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.WaveView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.internal.widget.WeightedLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.BorderView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.ConversationContainer: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.ConversationItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.ConversationListFooterView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.ConversationPager: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.ConversationViewHeader: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.ConversationWebView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.FolderSpanTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MailWebView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageAttachmentBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageAttachmentTile: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageFooterView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageHeaderView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageInviteView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageScrollView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MessageWebView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.MultiAdapterSpinner: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.ScrollIndicatorsView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.SpamWarningView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.SuperCollapsedBlock: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.browse.SwipeableConversationItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.compose.AttachmentComposeView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.compose.AttachmentsView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.compose.CcBccView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.compose.ComposeAttachmentTile: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.compose.EnterSubject: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.compose.FromAddressSpinner: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.compose.QuotedTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.MinTimeProgressView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.AccountItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ActionableToastBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.AnimatedListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.AttachmentTile: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.AttachmentTileGrid: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ButteryProgressBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ConversationListCopy: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ConversationListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ConversationListView$HintText: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ConversationLongPressTipView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ConversationPhotoTeaserView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.EmptyConversationListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.FolderItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.FolderListLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.LeaveBehindItem: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.MailActionBarView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.NestedFolderTeaserView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.SearchMailActionBarView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.SwipeableListView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.mail.ui.TwoPaneLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.music.CheckableRelativeLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.music.RepeatingImageButton: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.music.TouchInterceptor: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.music.VerticalTextSpinner: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.noisefield.NoiseFieldView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.packageinstaller.CaffeinatedScrollView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.phasebeam.PhaseBeamView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.photos.views.BlockingGLTextureView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.photos.views.GalleryThumbnailView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.photos.views.HeaderGridView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.photos.views.HeaderGridView$FullWidthFixedViewLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.photos.views.SquareImageView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.photos.views.TiledImageView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.printspooler.PrintDialogFrame: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.providers.downloads.ui.DownloadItem: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.BaseSuggestionView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ClusteredSuggestionsView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.CorpusView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.DefaultSuggestionView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.QueryTextView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.SearchActivityView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.SearchActivityViewSinglePane: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.SuggestionsView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.WebSearchSuggestionView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.soundrecorder.VUMeter: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.timezonepicker.TimeZonePickerView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.AudioTrackLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.AudioTrackView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.EditorRelativeLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.HandleView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.HorizontalScrollView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.ImageViewTouchBase: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.MediaItemView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.MediaLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.OverlayLinearLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.OverlayView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.PlayheadView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.PreviewSurfaceView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.videoeditor.widgets.TimelineHorizontalScrollView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.TimelineRelativeLayout: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.TransitionView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.videoeditor.widgets.ZoomControl: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (1)
<com.android.wallpaper.fall.FallView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.wallpaper.galaxy.GalaxyView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.wallpaper.grass.GrassView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<com.android.wallpaper.holospiral.HoloSpiralView: boolean performAccessibilityActionInternal(int,android.os.Bundle)> (2)
<android.widget.Spinner: boolean performClick()> (3)
<android.widget.CompoundButton: boolean performClick()> (8)
<com.android.browser.HttpAuthenticationDialog$1: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.browser.preferences.GeneralPreferencesFragment$3: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)> (1)
<com.android.calendar.MultiStateButton: boolean performClick()> (2)
<android.inputmethodservice.ExtractEditText: boolean performClick()> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: boolean performClick()> (1)
<com.android.camera.ShutterButton: boolean performClick()> (2)
<com.android.browser.view.PieListView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.view.PieMenu$PieView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.browser.view.PieStackView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)> (22)
<android.widget.AbsSpinner: boolean performItemClick(android.view.View,int,long)> (1)
<android.widget.AdapterViewAnimator: boolean performItemClick(android.view.View,int,long)> (2)
<android.widget.AdapterViewFlipper: boolean performItemClick(android.view.View,int,long)> (2)
<android.widget.Gallery: boolean performItemClick(android.view.View,int,long)> (4)
<android.widget.Spinner: boolean performItemClick(android.view.View,int,long)> (4)
<android.widget.StackView: boolean performItemClick(android.view.View,int,long)> (2)
<com.android.browser.addbookmark.FolderSpinner: boolean performItemClick(android.view.View,int,long)> (3)
<com.android.mail.compose.FromAddressSpinner: boolean performItemClick(android.view.View,int,long)> (3)
<android.widget.ExpandableListView: boolean performItemClick(android.view.View,int,long)> (5)
<com.android.browser.view.BookmarkExpandableView: boolean handleItemClick(android.view.View,int,long)> (1)
<com.android.quicksearchbox.ui.ClusteredSuggestionsView: boolean handleItemClick(android.view.View,int,long)> (1)
<android.widget.GridView: boolean commonKey(int,int,android.view.KeyEvent)> (7)
<com.android.browser.view.SnapshotGridView: boolean arrowScroll(int)> (1)
<com.android.camera.ui.ExpandedGridView: boolean arrowScroll(int)> (1)
<com.android.gallery3d.ingest.ui.IngestGridView: boolean arrowScroll(int)> (1)
<com.android.photos.views.HeaderGridView: boolean arrowScroll(int)> (1)
<com.android.browser.view.SnapshotGridView: boolean sequenceScroll(int)> (1)
<com.android.camera.ui.ExpandedGridView: boolean sequenceScroll(int)> (1)
<com.android.gallery3d.ingest.ui.IngestGridView: boolean sequenceScroll(int)> (1)
<com.android.photos.views.HeaderGridView: boolean sequenceScroll(int)> (1)
<android.widget.ExpandableListView: boolean arrowScroll(int)> (1)
<android.widget.ListPopupWindow$DropDownListView: boolean arrowScroll(int)> (1)
<android.widget.ListView: boolean commonKey(int,int,android.view.KeyEvent)> (19)
<com.android.browser.AddBookmarkPage$CustomListView: boolean arrowScroll(int)> (1)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: boolean arrowScroll(int)> (1)
<com.android.browser.view.BookmarkExpandableView: boolean arrowScroll(int)> (2)
<com.android.calendar.agenda.AgendaListView: boolean arrowScroll(int)> (1)
<com.android.calendar.month.MonthListView: boolean arrowScroll(int)> (1)
<com.android.datetimepicker.date.DayPickerView: boolean arrowScroll(int)> (1)
<com.android.datetimepicker.date.YearPickerView: boolean arrowScroll(int)> (1)
<com.android.internal.app.AlertController$RecycleListView: boolean arrowScroll(int)> (1)
<com.android.internal.view.menu.ExpandedMenuView: boolean arrowScroll(int)> (1)
<com.android.mail.ui.AnimatedListView: boolean arrowScroll(int)> (1)
<com.android.mail.ui.SwipeableListView: boolean arrowScroll(int)> (1)
<com.android.music.TouchInterceptor: boolean arrowScroll(int)> (1)
<com.android.quicksearchbox.ui.ClusteredSuggestionsView: boolean arrowScroll(int)> (2)
<com.android.quicksearchbox.ui.SuggestionsView: boolean arrowScroll(int)> (1)
<android.support.v13.app.FragmentTabHost: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<android.support.v4.app.FragmentTabHost: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<android.app.IUiAutomationConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient)> (1)
<com.android.mail.browse.ConversationItemView: void onLayout(boolean,int,int,int,int)> (1)
<com.android.mail.browse.SwipeableConversationItemView: void bind(com.android.mail.providers.Conversation,com.android.mail.ui.ControllableActivity,com.android.mail.ui.AnimatedAdapter$ConversationListListener,com.android.mail.ui.ConversationSelectionSet,com.android.mail.providers.Folder,int,boolean,boolean,boolean,boolean,boolean,com.android.mail.ui.AnimatedAdapter)> (2)
<android.widget.AnalogClock$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.recurrencepicker.RecurrencePickerDialog$OnRecurrenceSetListener: void onRecurrenceSet(java.lang.String)> (1)
<com.android.datetimepicker.date.YearPickerView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.datetimepicker.date.SimpleMonthAdapter: void onDayTapped(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.deskclock.AnalogClock$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.AnalogClock$2: void run()> (1)
<com.android.documentsui.DirectoryFragment$DocumentsAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.inputmethod.dictionarypack.DictionarySettingsFragment: void downloadedMetadata(boolean)> (1)
<android.widget.CalendarView: void <init>(android.content.Context)> (3)
<android.widget.DatePicker: void access$800(android.widget.DatePicker)> (1)
<android.widget.DatePicker: void init(int,int,int,android.widget.DatePicker$OnDateChangedListener)> (4)
<android.widget.DatePicker: void onRestoreInstanceState(android.os.Parcelable)> (1)
<android.widget.DatePicker: void updateDate(int,int,int)> (1)
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)> (4)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.mail.browse.MessageHeaderView: void showExpandedDetails()> (1)
<com.android.mail.browse.MessageHeaderView: void bind(com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem,boolean)> (2)
<com.android.mail.browse.MessageHeaderView: void rebind(com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem)> (1)
<com.android.mail.browse.MessageHeaderView: void refresh()> (2)
<com.android.mail.browse.MessageHeaderView: void setMessageDetailsExpanded(boolean)> (2)
<com.android.mail.browse.MessageHeaderView: boolean onClick(android.view.View,int)> (2)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.alarmclock.DigitalWidgetViewsFactory$RemoteWorldClockAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.month.MonthByWeekAdapter$2: void run()> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaListView: void goTo(android.text.format.Time,long,java.lang.String,boolean,boolean)> (3)
<com.android.calendar.agenda.AgendaListView: void refresh(boolean)> (3)
<com.android.calendar.AllInOneActivity$4: void onChange(boolean)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$1500(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (1)
<com.android.calendar.DayView$3: void run()> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.browser.BrowserActivity: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.internal.view.IInputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)> (1)
<com.android.internal.view.IInputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetAutomaticShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetKeyboard()> (4)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetManualShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetShiftLockedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetShiftLockShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setSymbolsKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setSymbolsShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: void onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void retryResetCaches(boolean,int)> (1)
<com.android.inputmethodcommon.InputMethodSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void onResume()> (1)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void onResume()> (1)
<com.android.inputmethodcommon.InputMethodSettingsFragment: void onResume()> (2)
<com.android.inputmethodcommon.InputMethodSettingsImpl: boolean init(android.content.Context,android.preference.PreferenceScreen)> (2)
<com.android.inputmethodcommon.InputMethodSettingsImpl: void setInputMethodSettingsCategoryTitle(int)> (3)
<com.android.inputmethodcommon.InputMethodSettingsImpl: void setInputMethodSettingsCategoryTitle(java.lang.CharSequence)> (3)
<com.android.inputmethodcommon.InputMethodSettingsImpl: void setSubtypeEnablerIcon(android.graphics.drawable.Drawable)> (3)
<com.android.inputmethodcommon.InputMethodSettingsImpl: void setSubtypeEnablerIcon(int)> (3)
<com.android.inputmethodcommon.InputMethodSettingsImpl: void setSubtypeEnablerTitle(int)> (3)
<com.android.inputmethodcommon.InputMethodSettingsImpl: void setSubtypeEnablerTitle(java.lang.CharSequence)> (3)
<com.android.inputmethod.latin.RichInputMethodManager: boolean checkIfSubtypeBelongsToThisImeAndEnabled(android.view.inputmethod.InputMethodSubtype)> (2)
<com.android.inputmethod.latin.SubtypeSwitcher: boolean isShortcutImeEnabled()> (2)
<com.android.inputmethod.latin.RichInputMethodManager: boolean hasMultipleEnabledSubtypesInThisIme(boolean)> (1)
<com.android.inputmethod.latin.RichInputMethodManager: boolean checkIfSubtypeBelongsToThisImeAndImplicitlyEnabled(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityNegative()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityPositive()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$BatteryReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$2100(com.android.server.power.PowerManagerService)> (3)
<com.android.server.power.PowerManagerService$ScreenOnBlockerImpl: void release()> (1)
<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)> (1)
<com.android.server.power.PowerManagerService$WakeLock: void binderDied()> (1)
<android.support.v4.print.PrintHelper: void printBitmap(java.lang.String,android.graphics.Bitmap)> (1)
<android.support.v4.print.PrintHelper: void printBitmap(java.lang.String,android.net.Uri)> (1)
<com.android.printspooler.FusedPrintersProvider: void onAbandon()> (1)
<android.inputmethodservice.ExtractButton: void onAttachedToWindow()> (2)
<android.inputmethodservice.ExtractEditText: void onAttachedToWindow()> (2)
<android.widget.Button: void onAttachedToWindow()> (2)
<android.widget.CheckBox: void onAttachedToWindow()> (2)
<android.widget.CheckedTextView: void onAttachedToWindow()> (2)
<android.widget.Chronometer: void onAttachedToWindow()> (2)
<android.widget.CompoundButton: void onAttachedToWindow()> (2)
<android.widget.DateTimeView: void onAttachedToWindow()> (2)
<android.widget.DigitalClock: void onAttachedToWindow()> (2)
<android.widget.EditText: void onAttachedToWindow()> (3)
<android.widget.NumberPicker$CustomEditText: void onAttachedToWindow()> (2)
<android.widget.RadioButton: void onAttachedToWindow()> (2)
<android.widget.Switch: void onAttachedToWindow()> (2)
<android.widget.TextClock: void onAttachedToWindow()> (2)
<android.widget.ToggleButton: void onAttachedToWindow()> (2)
<com.android.calculator2.CalculatorEditText: void onAttachedToWindow()> (2)
<com.android.calculator2.ColorButton: void onAttachedToWindow()> (2)
<com.android.calendar.MultiStateButton: void onAttachedToWindow()> (2)
<com.android.calendar.recurrencepicker.WeekButton: void onAttachedToWindow()> (3)
<com.android.camera.ui.Switch: void onAttachedToWindow()> (2)
<com.android.datetimepicker.AccessibleTextView: void onAttachedToWindow()> (2)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void onAttachedToWindow()> (2)
<com.android.deskclock.AndroidClockTextView: void onAttachedToWindow()> (2)
<com.android.deskclock.widget.TextTime: void onAttachedToWindow()> (2)
<com.android.development.LogTextBox: void onAttachedToWindow()> (2)
<com.android.ex.editstyledtext.EditStyledText: void onAttachedToWindow()> (2)
<com.android.gallery3d.filtershow.editors.SwapButton: void onAttachedToWindow()> (2)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void onAttachedToWindow()> (2)
<com.android.internal.view.menu.ActionMenuItemView: void onAttachedToWindow()> (2)
<com.android.internal.view.menu.IconMenuItemView: void onAttachedToWindow()> (2)
<com.android.internal.widget.DialogTitle: void onAttachedToWindow()> (2)
<com.android.mail.browse.FolderSpanTextView: void onAttachedToWindow()> (2)
<com.android.mail.compose.EnterSubject: void onAttachedToWindow()> (2)
<com.android.mail.ui.EllipsizedMultilineTextView: void onAttachedToWindow()> (2)
<com.android.mail.ui.EmptyConversationListView: void onAttachedToWindow()> (2)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: void onAttachedToWindow()> (2)
<com.android.quicksearchbox.ui.QueryTextView: void onAttachedToWindow()> (2)
<android.inputmethodservice.ExtractButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.inputmethodservice.ExtractEditText: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.AutoCompleteTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.Button: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.CheckBox: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.CheckedTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.Chronometer: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.CompoundButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.DateTimeView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.DigitalClock: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.EditText: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.MultiAutoCompleteTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.NumberPicker$CustomEditText: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.RadioButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.SearchView$SearchAutoComplete: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.Switch: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.TextClock: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<android.widget.TextView: void handleTextChanged(java.lang.CharSequence,int,int,int)> (44)
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType,boolean,int)> (45)
<android.widget.ToggleButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.browser.UrlInputView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.calculator2.CalculatorEditText: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.calculator2.ColorButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.calendar.MultiStateButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.calendar.recurrencepicker.WeekButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (2)
<com.android.camera.ui.Switch: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.datetimepicker.AccessibleTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.deskclock.AndroidClockTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.deskclock.widget.TextTime: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.development.LogTextBox: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.dreams.phototable.BummerView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.ex.chips.RecipientEditTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.ex.editstyledtext.EditStyledText: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.view.menu.ActionMenuItemView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.view.menu.IconMenuItemView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.internal.widget.DialogTitle: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mail.browse.FolderSpanTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mail.compose.EnterSubject: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.mail.ui.EmptyConversationListView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.quicksearchbox.ui.QueryTextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> (1)
<com.android.camera.LocationManager: void stopReceivingLocationUpdates()> (1)
<com.android.server.location.GeofenceManager: void updateFences()> (2)
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)> (1)
<com.android.wallpaper.grass.GrassRS: void stop()> (1)
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void access$600(android.media.MediaPlayer)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void access$600(android.media.MediaPlayer)> (1)
<com.android.server.accessibility.TouchExplorer$DoubleTapDetector: void onMotionEvent(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void disableFeatures()> (4)
<com.android.server.accessibility.EventStreamTransformation: void clear()> (3)
<com.android.server.accessibility.TouchExplorer$ExitGestureDetectionModeDelayed: void run()> (1)
Permission:android.permission.READ_SYNC_SETTINGS
1063 Callers:
<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.content.IContentService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (13)
<com.android.server.content.ContentService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl$ApplicationContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onResume()> (2)
<com.android.email.activity.setup.AccountSettingsFragment: void loadSettings()> (2)
<com.android.email.service.EmailServiceUtils: void updateAccountManagerType(android.content.Context,android.accounts.Account,java.util.Map)> (1)
<com.android.emailsync.SyncManager: boolean canSyncEmail(android.accounts.Account)> (2)
<com.android.emailsync.SyncManager: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (2)
<com.android.exchange.EasAccountService: void runPingLoop()> (1)
<com.android.exchange.eas.EasPing: com.android.exchange.adapter.Serializer handleOneMailbox(com.android.exchange.adapter.Serializer,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.ExchangeBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.exchange.service.EasService: java.util.Set getAuthoritiesToSync(android.accounts.Account,java.lang.String[])> (1)
<com.android.exchange.service.EmailSyncAdapterService: java.util.HashSet getAuthsToSync(android.accounts.Account)> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: int calculateReasonSyncOff(com.android.mail.preferences.MailPrefs,com.android.mail.providers.Account,com.android.mail.preferences.AccountPreferences)> (2)
<com.android.email.activity.setup.AccountSettingsFragment: void access$800(com.android.email.activity.setup.AccountSettingsFragment)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onStart()> (2)
<com.android.email.service.EmailBroadcastProcessorService: void updateAccountManagerAccountsOfType(java.lang.String,java.util.Map)> (1)
<com.android.exchange.ExchangeService: boolean canSyncEmail(android.accounts.Account)> (1)
<com.android.emailsync.SyncManager: long checkMailboxes()> (2)
<com.android.exchange.ExchangeService: boolean isMailboxSyncable(com.android.emailcommon.provider.Account,int)> (1)
<com.android.exchange.EasAccountService: void sync()> (1)
<com.android.exchange.eas.EasPing: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.service.EasService: boolean pingNeededForAccount(com.android.emailcommon.provider.Account)> (2)
<com.android.exchange.service.EmailSyncAdapterService: java.util.HashSet access$000(android.accounts.Account)> (2)
<com.android.mail.ui.ConversationListView: void showToastIfSyncIsOff()> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: boolean getShouldDisplayInList()> (1)
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: void onPostExecute(java.util.Map)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onAppUpgrade()> (2)
<com.android.emailsync.SyncManager: void run()> (2)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.exchange.EasAccountService: void run()> (1)
<com.android.exchange.eas.EasOperation: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.service.EasService$1: void pushModify(long)> (2)
<com.android.exchange.service.EasService$RestartPingsTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncHandlerSynchronizer: void modifyPing(boolean,com.android.emailcommon.provider.Account)> (4)
<com.android.mail.ui.ConversationListView: void showSyncStatusBar()> (1)
<com.android.mail.ui.ConversationSpecialItemView: boolean getShouldDisplayInList()> (1)
<com.android.email.activity.setup.AccountSettingsFragment$LoadAccountTask: void onPostExecute(java.lang.Object)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void reconcileAndStartServices()> (2)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.eas.EasOperation: org.apache.http.client.methods.HttpUriRequest makeRequest()> (12)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void pushModify(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void pushModify(long)> (2)
<com.android.exchange.service.EasService$RestartPingsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void pushModify(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$RestartPingsTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncHandlerSynchronizer: void syncComplete(boolean,com.android.emailcommon.provider.Account)> (1)
<com.android.mail.ui.ConversationListFragment: void showSyncStatusBar()> (1)
<com.android.mail.ui.AnimatedAdapter: void updateSpecialViews()> (5)
<com.android.email.service.EmailBroadcastProcessorService: void onBootCompleted()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.exchange.eas.EasFolderSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasLoadAttachment: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasMoveItems: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.exchange.eas.EasOptions: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOutboxSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasPing: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasProvision: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSearch: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSettings: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.IEmailService: void pushModify(long)> (3)
<com.android.exchange.service.EmailSyncAdapterService$RestartPingsTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mail.ui.AbstractActivityController: void requestFolderRefresh()> (4)
<com.android.mail.ui.AnimatedAdapter: android.database.Cursor swapCursor(android.database.Cursor)> (4)
<com.android.mail.ui.AnimatedAdapter: void changeCursorAndColumns(android.database.Cursor,java.lang.String[],int[])> (1)
<com.android.mail.ui.AnimatedAdapter: void changeCursor(android.database.Cursor)> (2)
<com.android.mail.ui.AnimatedAdapter: void <init>(android.content.Context,com.android.mail.browse.ConversationCursor,com.android.mail.ui.ConversationSelectionSet,com.android.mail.ui.ControllableActivity,com.android.mail.ui.AnimatedAdapter$ConversationListListener,com.android.mail.ui.SwipeableListView,java.util.List)> (1)
<com.android.mail.ui.AnimatedAdapter: void notifyDataSetChanged()> (21)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$10: void run()> (1)
<com.android.mail.ui.AbstractActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.mail.ui.FolderController: void requestFolderRefresh()> (1)
<com.android.mail.ui.OnePaneController: void requestFolderRefresh()> (1)
<com.android.mail.ui.TwoPaneController: void requestFolderRefresh()> (1)
<com.android.mail.ui.AnimatedAdapter: void destroy()> (1)
<com.android.mail.ui.ConversationListFragment: void onCursorUpdated()> (1)
<com.android.mail.ui.ConversationListFragment: void onActivityCreated(android.os.Bundle)> (1)
<com.android.mail.ui.AnimatedAdapter$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.mail.ui.AnimatedAdapter$2: void onListItemsRemoved()> (1)
<com.android.mail.ui.AnimatedAdapter$3: void onChanged(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.AnimatedAdapter: void commitLeaveBehindItems(boolean)> (1)
<com.android.mail.ui.AnimatedAdapter: void delete(java.util.Collection,com.android.mail.ui.SwipeableListView$ListItemsRemovedListener,java.util.HashSet)> (2)
<com.android.mail.ui.AnimatedAdapter: void setFooterVisibility(boolean)> (2)
<com.android.mail.ui.AnimatedAdapter: void setSwipeUndo(boolean)> (1)
<com.android.mail.ui.AnimatedAdapter: void setUndo(boolean)> (1)
<com.android.mail.ui.AnimatedAdapter: void startFadeOutLeaveBehindItemsAnimations()> (2)
<com.android.mail.ui.AnimatedAdapter: void updateAnimatingConversationItems(java.lang.Object,java.util.HashSet)> (1)
<com.android.mail.ui.ConversationListFragment: void requestListRefresh()> (1)
<com.android.mail.ui.ConversationsInOutboxTipView$4: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView$4: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.mail.ui.LeaveBehindItem: void dismiss()> (1)
<com.android.mail.ui.NestedFolderTeaserView$2: void onClick(android.view.View)> (1)
<com.android.mail.ui.NestedFolderTeaserView$3: void onLoadFinished(android.content.Loader,com.android.mail.content.ObjectCursor)> (1)
<com.android.mail.ui.SwipeableListView: void dismissChild(com.android.mail.browse.ConversationItemView)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.mail.ui.ActivityController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mail.ui.OnePaneController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mail.ui.TwoPaneController: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.mail.ui.ConversationListView: void triggerSync()> (1)
<com.android.mail.ui.ConversationListFragment: void onDestroyView()> (2)
<com.android.mail.ui.ConversationListFragment: void onConversationListStatusUpdated()> (2)
<com.android.mail.ui.SwipeableListView$ListItemsRemovedListener: void onListItemsRemoved()> (2)
<com.android.mail.providers.AccountObserver: void onChanged(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.SwipeableListView: void commitDestructiveActions(boolean)> (5)
<com.android.mail.ui.AnimatedAdapter: void delete(java.util.Collection,com.android.mail.ui.SwipeableListView$ListItemsRemovedListener)> (1)
<com.android.mail.ui.AnimatedAdapter: void swipeDelete(java.util.Collection,com.android.mail.ui.SwipeableListView$ListItemsRemovedListener)> (1)
<com.android.mail.ui.LeaveBehindItem: void onClick(android.view.View)> (1)
<com.android.mail.ui.AbstractActivityController$12: void onActionClicked(android.content.Context)> (1)
<com.android.mail.ui.AnimatedAdapter$4: void run()> (1)
<com.android.mail.ui.AnimatedAdapter: void fadeOutSpecificLeaveBehindItem(long)> (1)
<com.android.mail.ui.AnimatedAdapter: void access$400(com.android.mail.ui.AnimatedAdapter,java.lang.Object,java.util.HashSet)> (1)
<com.android.mail.ui.AbstractActivityController: void refreshConversationList()> (13)
<com.android.mail.ui.SwipeableItemView: void dismiss()> (1)
<com.android.mail.ui.NestedFolderTeaserView$3: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mail.browse.ConversationItemView: void dismiss()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.mail.ui.MailActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.mail.ui.ConversationListView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.mail.ui.ConversationListFragment$ConversationCursorObserver: void onChanged()> (1)
<com.android.mail.ui.ConversationListFragment: void showList()> (1)
<com.android.mail.ui.AnimatedAdapter: void performAndSetNextAction(com.android.mail.ui.SwipeableListView$ListItemsRemovedListener)> (4)
<com.android.mail.providers.AccountObserver: void onChanged()> (9)
<com.android.mail.browse.ConversationItemView: boolean toggleSelectedState(java.lang.String)> (2)
<com.android.mail.ui.ConversationListFragment: void commitDestructiveActions(boolean)> (2)
<com.android.mail.ui.SwipeableListView: boolean performItemClick(android.view.View,int,long)> (4)
<com.android.mail.ui.SwipeableListView: void onScroll()> (1)
<com.android.mail.ui.ConversationListFragment: void requestDelete(int,java.util.Collection,com.android.mail.ui.DestructiveAction)> (2)
<com.android.mail.ui.SwipeableListView: boolean destroyItems(java.util.Collection,com.android.mail.ui.SwipeableListView$ListItemsRemovedListener)> (1)
<com.android.mail.ui.ActionableToastBar$ActionClickedListener: void onActionClicked(android.content.Context)> (1)
<com.android.mail.ui.AbstractActivityController$ConversationAction: void performAction()> (1)
<com.android.mail.ui.AbstractActivityController$DroppedInStarredAction: void performAction()> (1)
<com.android.mail.ui.AbstractActivityController$FolderDestruction: void performAction()> (1)
<com.android.mail.ui.AbstractActivityController: void handleDragFromStarred(com.android.mail.providers.Folder)> (3)
<com.android.mail.ui.AbstractActivityController: void requestUpdate(com.android.mail.ui.DestructiveAction)> (3)
<com.android.mail.ui.AbstractActivityController: void updateConversation(java.util.Collection,android.content.ContentValues)> (3)
<com.android.mail.ui.AbstractActivityController: void updateConversation(java.util.Collection,java.lang.String,boolean)> (3)
<com.android.mail.ui.AbstractActivityController: void updateConversation(java.util.Collection,java.lang.String,int)> (4)
<com.android.mail.ui.AbstractActivityController: void updateConversation(java.util.Collection,java.lang.String,java.lang.String)> (3)
<com.android.mail.ui.AbstractActivityController: void updateConversationListFragment()> (3)
<com.android.mail.ui.ConversationUpdater: void refreshConversationList()> (2)
<com.android.mail.ui.OnePaneController: void refreshConversationList()> (1)
<com.android.mail.ui.TwoPaneController: void refreshConversationList()> (1)
<com.android.mail.ui.SwipeableListView: void onChildDismissed(com.android.mail.ui.SwipeableItemView)> (1)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email2.ui.MailActivityEmail: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mail.ui.ControllableActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mail.ui.RestrictedActivity: boolean onOptionsItemSelected(android.view.MenuItem)> ()
<com.android.mail.browse.SelectedConversationsActionMenu$1: void onChanged()> (2)
<com.android.mail.ui.AbstractConversationViewFragment$1: void onChanged()> (2)
<com.android.mail.ui.AnimatedAdapter$3: void onChanged()> (2)
<com.android.mail.ui.ConversationListFragment$1: void onChanged()> (2)
<com.android.mail.ui.FolderListFragment$2: void onChanged()> (2)
<com.android.mail.ui.MailActionBarView$1: void onChanged()> (2)
<com.android.mail.ui.RecentFolderList$1: void onChanged()> (2)
<com.android.mail.utils.VeiledAddressMatcher$1: void onChanged()> (2)
<com.android.mail.browse.ConversationItemView: boolean toggleSelectedStateOrBeginDrag()> (3)
<com.android.mail.browse.ConversationItemView: boolean toggleSelectedState()> (5)
<com.android.mail.ui.AbstractActivityController: void commitDestructiveActions(boolean)> (8)
<com.android.mail.ui.ConversationListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.mail.browse.ConversationItemView: boolean performClick()> (1)
<com.android.mail.ui.SwipeHelper$Callback: void onScroll()> (1)
<com.android.mail.ui.AbstractActivityController: void delete(int,java.util.Collection,com.android.mail.ui.DestructiveAction,boolean)> (9)
<com.android.mail.ui.AbstractActivityController: void handleDropInStarred(com.android.mail.providers.Folder)> (3)
<com.android.mail.ui.ActionableToastBar$2: void onClick(android.view.View)> (1)
<com.android.mail.ui.DestructiveAction: void performAction()> (6)
<com.android.mail.ui.AbstractActivityController: void handleDrop(android.view.DragEvent,com.android.mail.providers.Folder)> (3)
<com.android.mail.ui.OnePaneController: void handleDragFromStarred(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.TwoPaneController: void handleDragFromStarred(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.AbstractActivityController: void assignFolder(java.util.Collection,java.util.Collection,boolean,boolean,boolean)> (4)
<com.android.mail.ui.OnePaneController: void requestUpdate(com.android.mail.ui.DestructiveAction)> (1)
<com.android.mail.ui.TwoPaneController: void requestUpdate(com.android.mail.ui.DestructiveAction)> (1)
<com.android.mail.ui.ConversationUpdater: void updateConversation(java.util.Collection,android.content.ContentValues)> ()
<com.android.mail.ui.OnePaneController: void updateConversation(java.util.Collection,android.content.ContentValues)> (1)
<com.android.mail.ui.TwoPaneController: void updateConversation(java.util.Collection,android.content.ContentValues)> (1)
<com.android.mail.ui.ConversationUpdater: void updateConversation(java.util.Collection,java.lang.String,boolean)> (1)
<com.android.mail.ui.OnePaneController: void updateConversation(java.util.Collection,java.lang.String,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void updateConversation(java.util.Collection,java.lang.String,boolean)> (1)
<com.android.mail.ui.ConversationUpdater: void updateConversation(java.util.Collection,java.lang.String,int)> (1)
<com.android.mail.ui.OnePaneController: void updateConversation(java.util.Collection,java.lang.String,int)> (1)
<com.android.mail.ui.TwoPaneController: void updateConversation(java.util.Collection,java.lang.String,int)> (1)
<com.android.mail.ui.ConversationUpdater: void updateConversation(java.util.Collection,java.lang.String,java.lang.String)> ()
<com.android.mail.ui.OnePaneController: void updateConversation(java.util.Collection,java.lang.String,java.lang.String)> (1)
<com.android.mail.ui.TwoPaneController: void updateConversation(java.util.Collection,java.lang.String,java.lang.String)> (1)
<com.android.mail.ui.AbstractActivityController: void onDataSetChanged()> (3)
<com.android.mail.ui.OnePaneController: void updateConversationListFragment()> (1)
<com.android.mail.ui.TwoPaneController: void updateConversationListFragment()> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void destroy()> (2)
<com.android.mail.browse.SelectedConversationsActionMenu: void updateSelection()> (3)
<com.android.mail.ui.SwipeHelper$Callback: void onChildDismissed(com.android.mail.ui.SwipeableItemView)> (1)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.mail.ui.AbstractConversationViewFragment: void onFoldersClicked()> (3)
<com.android.mail.browse.SwipeableConversationItemView: boolean toggleSelectedStateOrBeginDrag()> (1)
<com.android.mail.browse.ToggleableItem: boolean toggleSelectedStateOrBeginDrag()> ()
<com.android.mail.ui.ConversationListFragment: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.mail.browse.ConversationItemView: boolean beginDragMode()> (1)
<com.android.mail.browse.ConversationItemView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.browse.ConversationItemView: boolean onTouchEventNoSwipe(android.view.MotionEvent)> (1)
<com.android.mail.browse.SwipeableConversationItemView: boolean toggleSelectedState()> (1)
<com.android.mail.browse.ToggleableItem: boolean toggleSelectedState()> (1)
<com.android.mail.ui.AbstractActivityController: void changeAccount(com.android.mail.providers.Account)> (5)
<com.android.mail.ui.AbstractActivityController: void changeFolder(com.android.mail.providers.Folder,java.lang.String,boolean)> (3)
<com.android.mail.ui.AbstractActivityController: void disableCabMode()> (3)
<com.android.mail.ui.AbstractActivityController: void onConversationSelected(com.android.mail.providers.Conversation,boolean)> (4)
<com.android.mail.ui.ConversationListCallbacks: void commitDestructiveActions(boolean)> (2)
<com.android.mail.ui.OnePaneController: void commitDestructiveActions(boolean)> (1)
<com.android.mail.ui.TwoPaneController: void commitDestructiveActions(boolean)> (1)
<com.android.mail.ui.SwipeHelper: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.mail.ui.AbstractActivityController$11: void run()> (1)
<com.android.mail.ui.AbstractActivityController$17: void onClick(android.content.DialogInterface,int)> (1)
<com.android.mail.ui.AbstractActivityController: void confirmAndDelete(int,java.util.Collection,boolean,int)> (3)
<com.android.mail.ui.ConversationUpdater: void delete(int,java.util.Collection,com.android.mail.ui.DestructiveAction,boolean)> (1)
<com.android.mail.ui.OnePaneController: void delete(int,java.util.Collection,com.android.mail.ui.DestructiveAction,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void delete(int,java.util.Collection,com.android.mail.ui.DestructiveAction,boolean)> (1)
<com.android.mail.ui.OnePaneController: void handleDropInStarred(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.TwoPaneController: void handleDropInStarred(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.AbstractActivityController: void destroyPending(com.android.mail.ui.DestructiveAction)> (4)
<com.android.mail.ui.ConversationListFragment$5: void onListItemsRemoved()> (1)
<com.android.mail.ui.ActivityController: void handleDrop(android.view.DragEvent,com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.OnePaneController: void handleDrop(android.view.DragEvent,com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.TwoPaneController: void handleDrop(android.view.DragEvent,com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.AbstractActivityController$4: void onPostExecute(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.ConversationUpdater: void assignFolder(java.util.Collection,java.util.Collection,boolean,boolean,boolean)> (3)
<com.android.mail.ui.OnePaneController: void assignFolder(java.util.Collection,java.util.Collection,boolean,boolean,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void assignFolder(java.util.Collection,java.util.Collection,boolean,boolean,boolean)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void starConversations(boolean)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void markConversationsImportant(boolean)> (1)
<com.android.mail.browse.ConversationCursor$ConversationListener: void onDataSetChanged()> (1)
<com.android.mail.ui.OnePaneController: void onDataSetChanged()> (1)
<com.android.mail.ui.TwoPaneController: void onDataSetChanged()> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void onDestroyActionMode(android.view.ActionMode)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void onSetEmpty()> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void markConversationsRead(boolean)> (1)
<com.android.mail.ui.SwipeHelper$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.mail.browse.ConversationViewHeader$ConversationViewHeaderCallbacks: void onFoldersClicked()> (1)
<com.android.mail.ui.ConversationViewFragment: void onFoldersClicked()> (1)
<com.android.mail.ui.SecureConversationViewFragment: void onFoldersClicked()> (1)
<com.android.mail.ui.AbstractActivityController: boolean updateAccounts(com.android.mail.content.ObjectCursor)> (3)
<com.android.mail.ui.AbstractActivityController: void switchToDefaultInboxOrChangeAccount(com.android.mail.providers.Account)> (3)
<com.android.mail.ui.AccountController: void changeAccount(com.android.mail.providers.Account)> ()
<com.android.mail.ui.OnePaneController: void changeAccount(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.TwoPaneController: void changeAccount(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.AbstractActivityController: void onFolderChanged(com.android.mail.providers.Folder,boolean)> (6)
<com.android.mail.ui.OnePaneController: void changeFolder(com.android.mail.providers.Folder,java.lang.String,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void changeFolder(com.android.mail.providers.Folder,java.lang.String,boolean)> (1)
<com.android.mail.ui.AbstractActivityController$MailDrawerListener: void onDrawerSlide(android.view.View,float)> (1)
<com.android.mail.ui.OnePaneController: void disableCabMode()> (2)
<com.android.mail.ui.TwoPaneController: void disableCabMode()> (2)
<com.android.mail.ui.AbstractActivityController: void perhapsShowFirstSearchResult()> (4)
<com.android.mail.ui.ConversationListCallbacks: void onConversationSelected(com.android.mail.providers.Conversation,boolean)> (2)
<com.android.mail.ui.OnePaneController: void onConversationSelected(com.android.mail.providers.Conversation,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void onConversationSelected(com.android.mail.providers.Conversation,boolean)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (1)
<com.android.mail.ui.SwipeableListView: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.mail.ui.OnePaneController: void confirmAndDelete(int,java.util.Collection,boolean,int)> (1)
<com.android.mail.ui.TwoPaneController: void confirmAndDelete(int,java.util.Collection,boolean,int)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void destroy(int,java.util.Collection,com.android.mail.ui.DestructiveAction)> (2)
<com.android.mail.ui.AbstractActivityController: void access$1100(com.android.mail.ui.AbstractActivityController,com.android.mail.ui.DestructiveAction)> (3)
<com.android.mail.ui.AbstractActivityController: void registerDestructiveAction(com.android.mail.ui.DestructiveAction)> (4)
<com.android.mail.ui.OnePaneController: void destroyPending(com.android.mail.ui.DestructiveAction)> (1)
<com.android.mail.ui.TwoPaneController: void destroyPending(com.android.mail.ui.DestructiveAction)> (1)
<com.android.mail.ui.MailActivity: void handleDrop(android.view.DragEvent,com.android.mail.providers.Folder)> (2)
<com.android.mail.ui.AbstractActivityController$4: void onPostExecute(java.lang.Object)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu$2: void onPostExecute(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.MultiFoldersSelectionDialog: void onClick(android.content.DialogInterface,int)> ()
<com.android.mail.ui.SingleFolderSelectionDialog: void onListItemClick(int)> (1)
<com.android.mail.browse.ConversationCursor: void notifyDataChanged()> (3)
<com.android.mail.ui.ConversationSetObserver: void onSetEmpty()> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.mail.browse.ConversationViewHeader: void onClick(android.view.View)> (1)
<com.android.mail.ui.AbstractActivityController: boolean access$2800(com.android.mail.ui.AbstractActivityController,com.android.mail.content.ObjectCursor)> (3)
<com.android.mail.ui.OnePaneController: boolean updateAccounts(com.android.mail.content.ObjectCursor)> (1)
<com.android.mail.ui.TwoPaneController: boolean updateAccounts(com.android.mail.content.ObjectCursor)> (1)
<com.android.mail.ui.AccountController: void switchToDefaultInboxOrChangeAccount(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.OnePaneController: void switchToDefaultInboxOrChangeAccount(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.TwoPaneController: void switchToDefaultInboxOrChangeAccount(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.AbstractActivityController$FolderLoads: void onLoadFinished(android.content.Loader,com.android.mail.content.ObjectCursor)> (1)
<com.android.mail.ui.AbstractActivityController: void loadAccountInbox()> (6)
<com.android.mail.ui.AbstractActivityController: void onFolderSelected(com.android.mail.providers.Folder)> (4)
<com.android.mail.ui.FolderChangeListener: void onFolderChanged(com.android.mail.providers.Folder,boolean)> ()
<com.android.mail.ui.OnePaneController: void onFolderChanged(com.android.mail.providers.Folder,boolean)> (3)
<com.android.mail.ui.TwoPaneController: void onFolderChanged(com.android.mail.providers.Folder,boolean)> (1)
<com.android.mail.ui.OnePaneController: void showConversation(com.android.mail.providers.Conversation,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void enableOrDisableCab()> (3)
<com.android.mail.ui.AbstractActivityController: void access$1600(com.android.mail.ui.AbstractActivityController)> (3)
<com.android.mail.ui.AbstractActivityController: void onRefreshReady()> (5)
<com.android.mail.ui.OnePaneController: void perhapsShowFirstSearchResult()> (1)
<com.android.mail.ui.TwoPaneController: void perhapsShowFirstSearchResult()> (1)
<com.android.mail.ui.AbstractConversationViewFragment$2: void go()> (1)
<com.android.mail.ui.ConversationListFragment: void viewConversation(int)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void performDestructiveAction(int)> (1)
<com.android.mail.ui.AbstractActivityController$ConversationListLoaderCallbacks: void onLoadFinished(android.content.Loader,com.android.mail.browse.ConversationCursor)> (1)
<com.android.mail.ui.OnePaneController: void access$1100(com.android.mail.ui.AbstractActivityController,com.android.mail.ui.DestructiveAction)> (1)
<com.android.mail.ui.TwoPaneController: void access$1100(com.android.mail.ui.AbstractActivityController,com.android.mail.ui.DestructiveAction)> (1)
<com.android.mail.ui.AbstractActivityController: com.android.mail.ui.DestructiveAction getBatchAction(int)> (3)
<com.android.mail.ui.AbstractActivityController: com.android.mail.ui.DestructiveAction getFolderChange(java.util.Collection,java.util.Collection,boolean,boolean,boolean,boolean,com.android.mail.providers.Folder)> (4)
<com.android.mail.ui.OnePaneController: void registerDestructiveAction(com.android.mail.ui.DestructiveAction)> (1)
<com.android.mail.ui.TwoPaneController: void registerDestructiveAction(com.android.mail.ui.DestructiveAction)> (1)
<com.android.email2.ui.MailActivityEmail: void handleDrop(android.view.DragEvent,com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.FolderItemView$DropHandler: void handleDrop(android.view.DragEvent,com.android.mail.providers.Folder)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu$2: void onPostExecute(java.lang.Object)> (1)
<com.android.mail.ui.FolderSelectionDialog: void onListItemClick(int)> (1)
<com.android.mail.browse.ConversationCursor: void access$2000(com.android.mail.browse.ConversationCursor)> (4)
<com.android.mail.browse.ConversationCursor: void setConversationColumn(android.net.Uri,java.lang.String,java.lang.Object)> (2)
<com.android.mail.browse.ConversationCursor: void sync()> (2)
<com.android.mail.ui.ConversationSelectionSet: void dispatchOnEmpty(java.util.ArrayList)> (2)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mail.ui.AbstractActivityController$AccountLoads: void onLoadFinished(android.content.Loader,com.android.mail.content.ObjectCursor)> (1)
<com.android.mail.ui.OnePaneController: boolean access$2800(com.android.mail.ui.AbstractActivityController,com.android.mail.content.ObjectCursor)> (1)
<com.android.mail.ui.TwoPaneController: boolean access$2800(com.android.mail.ui.AbstractActivityController,com.android.mail.content.ObjectCursor)> (1)
<com.android.mail.ui.FolderListFragment$4: void onDrawerClosed()> (1)
<com.android.mail.ui.AbstractActivityController$FolderLoads: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mail.ui.ActivityController: void loadAccountInbox()> ()
<com.android.mail.ui.OnePaneController: void loadAccountInbox()> (2)
<com.android.mail.ui.TwoPaneController: void loadAccountInbox()> (3)
<com.android.mail.ui.AbstractActivityController$18: void onPostExecute(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.FolderSelector: void onFolderSelected(com.android.mail.providers.Folder)> (3)
<com.android.mail.ui.OnePaneController: void onFolderSelected(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.TwoPaneController: void onFolderSelected(com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.OnePaneController: void transitionBackToConversationListMode()> (2)
<com.android.mail.ui.OnePaneController: void transitionToInbox()> (1)
<com.android.mail.ui.AbstractActivityController: void showConversation(com.android.mail.providers.Conversation,boolean)> (4)
<com.android.mail.ui.TwoPaneController: void onConversationListVisibilityChanged(boolean)> (1)
<com.android.mail.ui.TwoPaneController: void onViewModeChanged(int)> (1)
<com.android.mail.ui.TwoPaneController: void showConversation(com.android.mail.providers.Conversation,boolean)> (1)
<com.android.mail.ui.OnePaneController: void access$1600(com.android.mail.ui.AbstractActivityController)> (1)
<com.android.mail.ui.TwoPaneController: void access$1600(com.android.mail.ui.AbstractActivityController)> (1)
<com.android.mail.browse.ConversationCursor$ConversationListener: void onRefreshReady()> (1)
<com.android.mail.ui.AbstractActivityController: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> (3)
<com.android.mail.ui.AbstractActivityController: void stopDragMode()> (3)
<com.android.mail.ui.OnePaneController: void onRefreshReady()> (1)
<com.android.mail.ui.TwoPaneController: void onRefreshReady()> (1)
<com.android.mail.ui.FragmentRunnable: void go()> (1)
<com.android.mail.ui.AbstractActivityController$ConversationListLoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mail.ui.ConversationUpdater: com.android.mail.ui.DestructiveAction getBatchAction(int)> (1)
<com.android.mail.ui.OnePaneController: com.android.mail.ui.DestructiveAction getBatchAction(int)> (1)
<com.android.mail.ui.TwoPaneController: com.android.mail.ui.DestructiveAction getBatchAction(int)> (1)
<com.android.mail.ui.OnePaneController: com.android.mail.ui.DestructiveAction getFolderChange(java.util.Collection,java.util.Collection,boolean,boolean,boolean,boolean,com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.TwoPaneController: com.android.mail.ui.DestructiveAction getFolderChange(java.util.Collection,java.util.Collection,boolean,boolean,boolean,boolean,com.android.mail.providers.Folder)> (1)
<com.android.mail.ui.FolderItemView: boolean onDragEvent(android.view.DragEvent)> (1)
<com.android.mail.ui.FolderSelectionDialog$1: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.mail.browse.ConversationCursor$2: void run()> (1)
<com.android.mail.browse.ConversationCursor$3: void run()> (1)
<com.android.mail.browse.ConversationCursor$ConversationProvider: int apply(java.util.Collection,com.android.mail.browse.ConversationCursor)> (2)
<com.android.mail.browse.ConversationCursor$ConversationProvider: void undo(com.android.mail.browse.ConversationCursor)> (2)
<com.android.mail.ui.AbstractActivityController: void doMarkConversationMessagesUnread(com.android.mail.providers.Conversation,java.util.Set,byte[])> (4)
<com.android.mail.ui.AbstractActivityController: void starMessage(com.android.mail.browse.ConversationMessage,boolean)> (3)
<com.android.mail.ui.ConversationSelectionSet: void clear()> (8)
<com.android.mail.ui.ConversationSelectionSet: void removeAll(java.util.Collection)> (2)
<com.android.mail.ui.AbstractActivityController$AccountLoads: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mail.providers.DrawerClosedObserver: void onDrawerClosed()> (1)
<com.android.mail.ui.TwoPaneController: void hideWaitForInitialization()> (2)
<com.android.mail.ui.TwoPaneController: void popView(boolean)> (2)
<com.android.mail.ui.AbstractActivityController$18: void onPostExecute(java.lang.Object)> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: void goToOutbox()> (1)
<com.android.mail.ui.NestedFolderTeaserView$1: void onClick(android.view.View)> (1)
<com.android.mail.ui.OnePaneController: boolean handleBackPress()> (2)
<com.android.mail.ui.OnePaneController: void hideWaitForInitialization()> (1)
<com.android.mail.ui.AbstractActivityController: void showConversation(com.android.mail.providers.Conversation)> (6)
<com.android.mail.ui.AbstractActivityController: void onConversationListVisibilityChanged(boolean)> (3)
<com.android.mail.ui.AbstractActivityController: void onViewModeChanged(int)> (3)
<com.android.mail.browse.ConversationCursor: void notifyRefreshReady()> (2)
<com.android.mail.ui.ActivityController: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> (1)
<com.android.mail.ui.OnePaneController: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> (1)
<com.android.mail.ui.TwoPaneController: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> (1)
<com.android.mail.ui.ActivityController: void stopDragMode()> (1)
<com.android.mail.ui.OnePaneController: void stopDragMode()> (1)
<com.android.mail.ui.TwoPaneController: void stopDragMode()> (1)
<com.android.mail.ui.FragmentRunnable: void run()> (10)
<com.android.mail.ui.AbstractActivityController: void access$300(com.android.mail.ui.AbstractActivityController,com.android.mail.providers.Conversation,java.util.Set,byte[])> (3)
<com.android.mail.ui.AbstractActivityController: void markConversationMessagesUnread(com.android.mail.providers.Conversation,java.util.Set,byte[])> (3)
<com.android.mail.ui.OnePaneController: void doMarkConversationMessagesUnread(com.android.mail.providers.Conversation,java.util.Set,byte[])> (1)
<com.android.mail.ui.TwoPaneController: void doMarkConversationMessagesUnread(com.android.mail.providers.Conversation,java.util.Set,byte[])> (1)
<com.android.mail.ui.ConversationUpdater: void starMessage(com.android.mail.browse.ConversationMessage,boolean)> (1)
<com.android.mail.ui.OnePaneController: void starMessage(com.android.mail.browse.ConversationMessage,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void starMessage(com.android.mail.browse.ConversationMessage,boolean)> (1)
<com.android.mail.browse.SelectedConversationsActionMenu: void clearSelection()> (1)
<com.android.mail.ui.AbstractActivityController: void exitCabMode()> (3)
<com.android.mail.ui.AbstractActivityController: void restoreSelectedConversations(android.os.Bundle)> (3)
<com.android.mail.ui.ConversationSelectionSet: void validateAgainstCursor(com.android.mail.browse.ConversationCursor)> (1)
<com.android.mail.ui.ConversationSelectionSet: void remove(java.lang.Long)> (2)
<com.android.mail.providers.DrawerClosedObserver: void onChanged()> (2)
<com.android.mail.ui.AbstractActivityController: void hideWaitForInitialization()> (3)
<com.android.mail.ui.TwoPaneController: boolean handleBackPress()> (3)
<com.android.mail.ui.TwoPaneController: boolean handleUpPress()> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: void access$000(com.android.mail.ui.ConversationsInOutboxTipView)> (1)
<com.android.mail.ui.AbstractActivityController: boolean handleBackPress()> (1)
<com.android.mail.ui.OnePaneController: boolean handleUpPress()> (1)
<com.android.mail.ui.AbstractActivityController: boolean showNextConversation(java.util.Collection,java.lang.Runnable)> (5)
<com.android.mail.ui.AbstractActivityController: void access$2600(com.android.mail.ui.AbstractActivityController,com.android.mail.providers.Conversation)> (3)
<com.android.mail.ui.AbstractActivityController: void onRestoreInstanceState(android.os.Bundle)> (3)
<com.android.mail.ui.OnePaneController: void showConversation(com.android.mail.providers.Conversation)> (1)
<com.android.mail.ui.TwoPaneController: void showConversation(com.android.mail.providers.Conversation)> (1)
<com.android.mail.ui.LayoutListener: void onConversationListVisibilityChanged(boolean)> (1)
<com.android.mail.ui.OnePaneController: void onConversationListVisibilityChanged(boolean)> (4)
<com.android.mail.ui.OnePaneController: void onViewModeChanged(int)> (1)
<com.android.mail.ui.ViewMode$ModeChangeListener: void onViewModeChanged(int)> (1)
<com.android.mail.browse.ConversationCursor: void access$1100(com.android.mail.browse.ConversationCursor)> (1)
<com.android.mail.browse.ConversationCursor: void checkNotifyUI()> (2)
<com.android.mail.ui.MailActivity: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> (3)
<com.android.mail.ui.MailActivity: void stopDragMode()> (2)
<com.android.mail.ui.AbstractConversationViewFragment$2: void run()> (1)
<com.android.mail.ui.AbstractConversationViewFragment$3: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$1$1: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$2: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$3: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$MailJsBridge$1: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$MailJsBridge$2: void run()> (1)
<com.android.mail.ui.ConversationViewProgressController$1: void run()> (1)
<com.android.mail.ui.ConversationViewProgressController$2: void run()> (1)
<com.android.mail.ui.AbstractActivityController$5: void onLoadFinished()> (1)
<com.android.mail.ui.OnePaneController: void access$300(com.android.mail.ui.AbstractActivityController,com.android.mail.providers.Conversation,java.util.Set,byte[])> (1)
<com.android.mail.ui.TwoPaneController: void access$300(com.android.mail.ui.AbstractActivityController,com.android.mail.providers.Conversation,java.util.Set,byte[])> (1)
<com.android.mail.ui.ConversationUpdater: void markConversationMessagesUnread(com.android.mail.providers.Conversation,java.util.Set,byte[])> (2)
<com.android.mail.ui.OnePaneController: void markConversationMessagesUnread(com.android.mail.providers.Conversation,java.util.Set,byte[])> (1)
<com.android.mail.ui.TwoPaneController: void markConversationMessagesUnread(com.android.mail.providers.Conversation,java.util.Set,byte[])> (1)
<com.android.mail.browse.ConversationMessage: void star(boolean)> (1)
<com.android.mail.ui.OnePaneController: void exitCabMode()> (1)
<com.android.mail.ui.TwoPaneController: void exitCabMode()> (1)
<com.android.mail.ui.OnePaneController: void restoreSelectedConversations(android.os.Bundle)> (1)
<com.android.mail.ui.TwoPaneController: void restoreSelectedConversations(android.os.Bundle)> (1)
<com.android.mail.ui.ConversationSelectionSet: void delete(java.util.ArrayList)> ()
<com.android.mail.ui.ConversationSelectionSet: void toggle(com.android.mail.providers.Conversation)> (3)
<com.android.mail.ui.FolderListFragment$4: void onChanged()> (2)
<com.android.mail.ui.AbstractActivityController: void perhapsEnterWaitMode()> (4)
<com.android.mail.ui.AbstractActivityController: boolean handleUpPress()> (1)
<com.android.mail.ui.ConversationsInOutboxTipView$1: void onClick(android.view.View)> (1)
<com.android.mail.ui.AbstractActivityController: boolean onBackPressed()> (3)
<com.android.mail.ui.AbstractActivityController: void markConversationsRead(java.util.Collection,boolean,boolean,boolean)> (5)
<com.android.mail.ui.AbstractActivityController: void showNextConversation(java.util.Collection)> (3)
<com.android.mail.ui.OnePaneController: boolean showNextConversation(java.util.Collection,java.lang.Runnable)> (1)
<com.android.mail.ui.TwoPaneController: boolean showNextConversation(java.util.Collection,java.lang.Runnable)> (1)
<com.android.mail.ui.OnePaneController: void access$2600(com.android.mail.ui.AbstractActivityController,com.android.mail.providers.Conversation)> (1)
<com.android.mail.ui.TwoPaneController: void access$2600(com.android.mail.ui.AbstractActivityController,com.android.mail.providers.Conversation)> (1)
<com.android.mail.ui.ActivityController: void onRestoreInstanceState(android.os.Bundle)> (1)
<com.android.mail.ui.OnePaneController: void onRestoreInstanceState(android.os.Bundle)> (1)
<com.android.mail.ui.TwoPaneController: void onRestoreInstanceState(android.os.Bundle)> (1)
<com.android.mail.ui.TwoPaneLayout: void dispatchConversationListVisibilityChange(boolean)> (1)
<com.android.mail.ui.OnePaneController: void showConversationList(com.android.mail.ConversationListContext)> (1)
<com.android.mail.ui.ViewMode: void dispatchModeChange()> (1)
<com.android.mail.browse.ConversationCursor$RefreshTask: void onPostExecute(com.android.mail.browse.ConversationCursor$UnderlyingCursorWrapper)> (1)
<com.android.mail.browse.ConversationCursor: void commitMostlyDead(com.android.mail.providers.Conversation)> (1)
<com.android.mail.browse.ConversationCursor: void resume()> (1)
<com.android.email2.ui.MailActivityEmail: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> (1)
<com.android.mail.ui.AnimatedAdapter$Listener: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> ()
<com.android.mail.ui.ControllableActivity: void onAnimationEnd(com.android.mail.ui.AnimatedAdapter)> (3)
<com.android.email2.ui.MailActivityEmail: void stopDragMode()> (1)
<com.android.mail.ui.ControllableActivity: void stopDragMode()> (1)
<com.android.mail.ui.AbstractActivityController$LoadFinishedCallback: void onLoadFinished()> (1)
<com.android.mail.ui.ConversationViewFragment: void markUnread()> (1)
<com.android.mail.ui.SecureConversationViewFragment: void markUnread()> (1)
<com.android.mail.browse.MessageHeaderView: boolean onClick(android.view.View,int)> (2)
<com.android.mail.ui.AbstractActivityController: void setAccount(com.android.mail.providers.Account)> (5)
<com.android.mail.ui.OnePaneController: void perhapsEnterWaitMode()> (1)
<com.android.mail.ui.TwoPaneController: void perhapsEnterWaitMode()> (1)
<com.android.mail.ui.AbstractActivityController: boolean onUpPressed()> (4)
<com.android.mail.ui.ActivityController: boolean onBackPressed()> (1)
<com.android.mail.ui.OnePaneController: boolean onBackPressed()> (1)
<com.android.mail.ui.TwoPaneController: boolean onBackPressed()> (1)
<com.android.mail.ui.AbstractActivityController: void access$400(com.android.mail.ui.AbstractActivityController,java.util.Collection,boolean,boolean,boolean)> (4)
<com.android.mail.ui.AbstractActivityController: void markConversationsRead(java.util.Collection,boolean,boolean)> (3)
<com.android.mail.ui.OnePaneController: void markConversationsRead(java.util.Collection,boolean,boolean,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void markConversationsRead(java.util.Collection,boolean,boolean,boolean)> (1)
<com.android.mail.ui.ConversationUpdater: void showNextConversation(java.util.Collection)> (1)
<com.android.mail.ui.OnePaneController: void showNextConversation(java.util.Collection)> (1)
<com.android.mail.ui.TwoPaneController: void showNextConversation(java.util.Collection)> (1)
<com.android.mail.ui.MailActivity: void onRestoreInstanceState(android.os.Bundle)> (2)
<com.android.mail.ui.TwoPaneLayout: void onTransitionComplete()> (1)
<com.android.mail.ui.AbstractActivityController: void showConversationList(com.android.mail.ConversationListContext)> (5)
<com.android.mail.ui.ViewMode: boolean setModeInternal(int)> (7)
<com.android.mail.browse.ConversationCursor$RefreshTask: void onPostExecute(java.lang.Object)> (1)
<com.android.mail.browse.ConversationCursor$ConversationProvider: void commitMostlyDead(com.android.mail.providers.Conversation,com.android.mail.browse.ConversationCursor)> (2)
<com.android.mail.ui.ConversationCursorLoader: void onStartLoading()> (1)
<com.android.mail.ui.SwipeableListView: void onScrollStateChanged(android.widget.AbsListView,int)> (1)
<com.android.mail.browse.ConversationItemView: boolean onDragEvent(android.view.DragEvent)> (1)
<com.android.mail.ui.AbstractConversationViewFragment: void markUnread()> (3)
<com.android.mail.browse.MessageHeaderView: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.mail.browse.MessageHeaderView: void onClick(android.view.View)> (1)
<com.android.mail.ui.AbstractActivityController: boolean onCreate(android.os.Bundle)> (3)
<com.android.mail.ui.AbstractActivityController: void handleIntent(android.content.Intent)> (3)
<com.android.mail.ui.OnePaneController: void setAccount(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.TwoPaneController: void setAccount(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.ActivityController: boolean onUpPressed()> (1)
<com.android.mail.ui.OnePaneController: boolean onUpPressed()> (1)
<com.android.mail.ui.TwoPaneController: boolean onUpPressed()> (1)
<com.android.mail.ui.MailActivity: void onBackPressed()> (3)
<com.android.mail.ui.AbstractActivityController$7: void onLoadFinished()> (1)
<com.android.mail.ui.AbstractActivityController$8: void run()> (1)
<com.android.mail.ui.OnePaneController: void access$400(com.android.mail.ui.AbstractActivityController,java.util.Collection,boolean,boolean,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void access$400(com.android.mail.ui.AbstractActivityController,java.util.Collection,boolean,boolean,boolean)> (1)
<com.android.mail.ui.ConversationUpdater: void markConversationsRead(java.util.Collection,boolean,boolean)> (2)
<com.android.mail.ui.OnePaneController: void markConversationsRead(java.util.Collection,boolean,boolean)> (1)
<com.android.mail.ui.TwoPaneController: void markConversationsRead(java.util.Collection,boolean,boolean)> (1)
<com.android.mail.ui.ConversationListFragment: void onListItemSwiped(java.util.Collection)> (1)
<com.android.email2.ui.MailActivityEmail: void onRestoreInstanceState(android.os.Bundle)> (2)
<com.android.mail.ui.TwoPaneLayout: void access$000(com.android.mail.ui.TwoPaneLayout)> (2)
<com.android.mail.ui.ActivityController: void showConversationList(com.android.mail.ConversationListContext)> ()
<com.android.mail.ui.TwoPaneController: void showConversationList(com.android.mail.ConversationListContext)> (1)
<com.android.mail.ui.ViewMode: void enterAdMode()> ()
<com.android.mail.ui.ViewMode: void enterConversationListMode()> (6)
<com.android.mail.ui.ViewMode: void enterConversationMode()> (3)
<com.android.mail.ui.ViewMode: void enterSearchResultsConversationMode()> (4)
<com.android.mail.ui.ViewMode: void enterSearchResultsListMode()> (5)
<com.android.mail.ui.ViewMode: void enterWaitingForInitializationMode()> (1)
<com.android.mail.ui.ViewMode: void handleRestore(android.os.Bundle)> (1)
<com.android.mail.ui.AbstractConversationViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.mail.ui.ActivityController: boolean onCreate(android.os.Bundle)> (1)
<com.android.mail.ui.OnePaneController: boolean onCreate(android.os.Bundle)> (1)
<com.android.mail.ui.TwoPaneController: boolean onCreate(android.os.Bundle)> (1)
<com.android.mail.ui.OnePaneController: void handleIntent(android.content.Intent)> (1)
<com.android.mail.ui.TwoPaneController: void handleIntent(android.content.Intent)> (1)
<com.android.mail.ui.MailActionBarView: void onClick(android.view.View)> (2)
<com.android.email2.ui.MailActivityEmail: void onBackPressed()> (2)
<com.android.mail.ui.RestrictedActivity: void onBackPressed()> ()
<com.android.mail.ui.AbstractConversationViewFragment: void onConversationSeen()> (2)
<com.android.mail.ui.SwipeableListView$ListItemSwipedListener: void onListItemSwiped(java.util.Collection)> (1)
<com.android.mail.ui.TwoPaneLayout$1: void run()> (1)
<com.android.mail.ui.TwoPaneLayout$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.mail.ui.TwoPaneController: void initializeConversationListFragment()> (1)
<com.android.mail.ui.AbstractActivityController: void showWaitForInitialization()> (4)
<com.android.mail.ui.ConversationViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mail.ui.SecureConversationViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mail.ui.MailActivity: void onCreate(android.os.Bundle)> (3)
<com.android.mail.ui.SearchMailActionBarView: void onClick(android.view.View)> (1)
<com.android.mail.ui.ConversationViewFragment: void onConversationSeen()> (3)
<com.android.mail.ui.SecureConversationViewFragment: void onConversationSeen()> (3)
<com.android.mail.ui.ActivityController: void showWaitForInitialization()> ()
<com.android.mail.ui.OnePaneController: void showWaitForInitialization()> (1)
<com.android.mail.ui.TwoPaneController: void showWaitForInitialization()> (1)
<com.android.email2.ui.MailActivityEmail: void onCreate(android.os.Bundle)> (3)
<com.android.mail.ui.AbstractMailActivity: void onCreate(android.os.Bundle)> (2)
<com.android.mail.ui.ConversationViewFragment$2: void go()> (1)
<com.android.mail.ui.ConversationViewFragment: void onUserVisibleHintChanged()> (1)
<com.android.mail.ui.SecureConversationViewFragment$SecureConversationWebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)> (1)
<com.android.mail.ui.SecureConversationViewFragment: void onUserVisibleHintChanged()> (1)
<com.android.mail.ui.AbstractConversationViewFragment: void onUserVisibleHintChanged()> (1)
<com.android.mail.ui.AbstractConversationViewFragment: void setExtraUserVisibleHint(boolean)> (3)
<com.android.mail.browse.ConversationPagerAdapter: void setItemVisible(android.app.Fragment,boolean)> (1)
<com.android.mail.ui.ConversationViewFragment: void setExtraUserVisibleHint(boolean)> (1)
<com.android.mail.ui.SecureConversationViewFragment: void setExtraUserVisibleHint(boolean)> (1)
<com.android.mail.utils.FragmentStatePagerAdapter2: void setItemVisible(android.app.Fragment,boolean)> (4)
<com.android.mail.utils.FragmentStatePagerAdapter2: java.lang.Object instantiateItem(android.view.ViewGroup,int)> (2)
<com.android.mail.utils.FragmentStatePagerAdapter2: void restoreState(android.os.Parcelable,java.lang.ClassLoader)> (2)
<com.android.mail.utils.FragmentStatePagerAdapter2: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (2)
<android.support.v4.view.PagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> (5)
<com.android.mail.browse.ConversationPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> (2)
<android.support.v4.view.PagerAdapter: void restoreState(android.os.Parcelable,java.lang.ClassLoader)> (5)
<com.android.mail.browse.ConversationPagerAdapter: void restoreState(android.os.Parcelable,java.lang.ClassLoader)> (2)
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (8)
<com.android.mail.browse.ConversationPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (2)
<android.support.v4.view.ViewPager: android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int)> (4)
<com.android.calculator2.Calculator$PageAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> (1)
<com.android.ex.photo.adapters.BaseCursorPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> (1)
<com.android.ex.photo.adapters.BaseFragmentPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> (1)
<com.android.ex.photo.adapters.PhotoPagerAdapter: java.lang.Object instantiateItem(android.view.ViewGroup,int)> (2)
<android.support.v4.view.ViewPager: void onRestoreInstanceState(android.os.Parcelable)> (4)
<android.support.v4.view.ViewPager: void setAdapter(android.support.v4.view.PagerAdapter)> (14)
<com.android.gallery3d.ingest.adapter.MtpPagerAdapter: void restoreState(android.os.Parcelable,java.lang.ClassLoader)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView$EmojiPalettesAdapter: void restoreState(android.os.Parcelable,java.lang.ClassLoader)> (1)
<com.android.packageinstaller.TabsAdapter: void restoreState(android.os.Parcelable,java.lang.ClassLoader)> (1)
<android.support.v4.view.ViewPager: void populate(int)> (5)
<com.android.calculator2.Calculator$PageAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (1)
<com.android.ex.photo.adapters.BaseCursorPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (1)
<com.android.ex.photo.adapters.BaseFragmentPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (1)
<com.android.ex.photo.adapters.PhotoPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (2)
<com.android.gallery3d.ingest.adapter.MtpPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView$EmojiPalettesAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (1)
<com.android.packageinstaller.TabsAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> (1)
<com.android.calculator2.CalculatorViewPager: android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int)> (1)
<com.android.ex.photo.PhotoViewPager: android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int)> (1)
<com.android.mail.browse.ConversationPager: android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int)> (1)
<com.android.calculator2.CalculatorViewPager: void onRestoreInstanceState(android.os.Parcelable)> (2)
<com.android.ex.photo.PhotoViewPager: void onRestoreInstanceState(android.os.Parcelable)> (2)
<com.android.mail.browse.ConversationPager: void onRestoreInstanceState(android.os.Parcelable)> (2)
<com.android.browser.ComboViewActivity$TabsAdapter: void <init>(android.app.Activity,android.support.v4.view.ViewPager)> (1)
<com.android.calculator2.CalculatorViewPager: void setAdapter(android.support.v4.view.PagerAdapter)> (1)
<com.android.calculator2.Calculator: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.DeskClock$TabsAdapter: void <init>(com.android.deskclock.DeskClock,android.app.Activity,android.support.v4.view.ViewPager)> (1)
<com.android.ex.photo.PhotoViewPager: void setAdapter(android.support.v4.view.PagerAdapter)> (3)
<com.android.gallery3d.ingest.IngestActivity: void setFullscreenPagerVisibility(boolean)> (3)
<com.android.inputmethod.keyboard.EmojiPalettesView: void onFinishInflate()> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: void startEmojiPalettes()> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: void stopEmojiPalettes()> (2)
<com.android.mail.browse.ConversationPagerController: void hide(boolean)> (2)
<com.android.mail.browse.ConversationPagerController: void show(com.android.mail.providers.Account,com.android.mail.providers.Folder,com.android.mail.providers.Conversation,boolean)> (2)
<com.android.mail.browse.ConversationPager: void setAdapter(android.support.v4.view.PagerAdapter)> (1)
<com.android.packageinstaller.TabsAdapter: void <init>(android.app.Activity,android.widget.TabHost,android.support.v4.view.ViewPager)> (2)
<com.android.photos.GalleryActivity$TabsAdapter: void <init>(com.android.photos.GalleryActivity,android.support.v4.view.ViewPager)> (1)
<android.support.v4.view.ViewPager: void populate()> (11)
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean,int)> (6)
<com.android.calculator2.CalculatorViewPager: void populate(int)> (1)
<com.android.ex.photo.PhotoViewPager: void populate(int)> (1)
<com.android.mail.browse.ConversationPager: void populate(int)> (1)
<com.android.browser.ComboViewActivity: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.DeskClock: void initViews()> (1)
<com.android.ex.photo.PhotoViewActivity: void onCreate(android.os.Bundle)> (3)
<com.android.ex.photo.PhotoViewActivity: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)> (2)
<com.android.gallery3d.ingest.IngestActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.ingest.IngestActivity: void hideWarningView()> (1)
<com.android.gallery3d.ingest.IngestActivity: void showWarningView(int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setEmojiKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void deallocateMemory()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setMainKeyboardFrame()> (1)
<com.android.mail.ui.TwoPaneController: void onConversationVisibilityChanged(boolean)> (2)
<com.android.packageinstaller.GrantActivity: void onCreate(android.os.Bundle)> (1)
<com.android.packageinstaller.PackageInstallerActivity: void startInstallConfirm()> (2)
<com.android.photos.GalleryActivity: void onCreate(android.os.Bundle)> (1)
<android.support.v4.view.ViewPager$3: void run()> (1)
<android.support.v4.view.ViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)> (4)
<android.support.v4.view.ViewPager: boolean onTouchEvent(android.view.MotionEvent)> (4)
<android.support.v4.view.ViewPager: void onMeasure(int,int)> (4)
<android.support.v4.view.ViewPager: void setOffscreenPageLimit(int)> (5)
<android.support.v4.view.ViewPager: void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer)> (3)
<android.support.v4.view.ViewPager: void smoothScrollTo(int,int,int)> (5)
<com.android.calculator2.CalculatorViewPager: void populate()> (1)
<com.android.ex.photo.PhotoViewPager: void populate()> (1)
<com.android.mail.browse.ConversationPager: void populate()> (1)
<android.support.v4.view.ViewPager: void endFakeDrag()> (3)
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean)> (8)
<com.android.calculator2.CalculatorViewPager: void setCurrentItemInternal(int,boolean,boolean,int)> (1)
<com.android.ex.photo.PhotoViewPager: void setCurrentItemInternal(int,boolean,boolean,int)> (1)
<com.android.mail.browse.ConversationPager: void setCurrentItemInternal(int,boolean,boolean,int)> (1)
<com.android.deskclock.DeskClock: void onCreate(android.os.Bundle)> (1)
<com.android.mail.photo.MailPhotoViewActivity: void onCreate(android.os.Bundle)> (3)
<com.android.ex.photo.PhotoViewActivity: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)> (2)
<com.android.mail.photo.MailPhotoViewActivity: void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor)> (1)
<com.android.gallery3d.ingest.IngestActivity$2: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (2)
<com.android.gallery3d.ingest.IngestActivity: void updateWarningView()> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setEmojiKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onFinishInputViewInternal(boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setKeyboard(com.android.inputmethod.keyboard.Keyboard)> (7)
<com.android.mail.ui.AbstractActivityController: void onConversationVisibilityChanged(boolean)> (3)
<com.android.packageinstaller.PackageInstallerActivity: void access$400(com.android.packageinstaller.PackageInstallerActivity)> (1)
<com.android.packageinstaller.PackageInstallerActivity: void initiateInstall()> (1)
<com.android.calculator2.CalculatorViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.ex.photo.PhotoViewPager: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.mail.browse.ConversationPager: boolean onInterceptTouchEvent(android.view.MotionEvent)> (2)
<com.android.calculator2.CalculatorViewPager: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.ex.photo.PhotoViewPager: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.mail.browse.ConversationPager: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.calculator2.CalculatorViewPager: void onMeasure(int,int)> (2)
<com.android.ex.photo.PhotoViewPager: void onMeasure(int,int)> (2)
<com.android.mail.browse.ConversationPager: void onMeasure(int,int)> (2)
<com.android.calculator2.CalculatorViewPager: void setOffscreenPageLimit(int)> (1)
<com.android.ex.photo.PhotoViewPager: void setOffscreenPageLimit(int)> (1)
<com.android.mail.browse.ConversationPager: void setOffscreenPageLimit(int)> (1)
<com.android.calculator2.CalculatorViewPager: void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer)> (1)
<com.android.ex.photo.PhotoViewPager: void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer)> (2)
<com.android.mail.browse.ConversationPager: void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer)> (1)
<android.support.v4.view.ViewPager: void scrollToItem(int,boolean,int,boolean)> (6)
<android.support.v4.view.ViewPager: void smoothScrollTo(int,int)> (3)
<com.android.calculator2.CalculatorViewPager: void smoothScrollTo(int,int,int)> (1)
<com.android.ex.photo.PhotoViewPager: void smoothScrollTo(int,int,int)> (1)
<com.android.mail.browse.ConversationPager: void smoothScrollTo(int,int,int)> (1)
<com.android.calculator2.CalculatorViewPager: void endFakeDrag()> (1)
<com.android.ex.photo.PhotoViewPager: void endFakeDrag()> (1)
<com.android.mail.browse.ConversationPager: void endFakeDrag()> (1)
<android.support.v4.view.ViewPager: void dataSetChanged()> (5)
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)> (8)
<android.support.v4.view.ViewPager: void setCurrentItem(int)> (17)
<com.android.calculator2.CalculatorViewPager: void setCurrentItemInternal(int,boolean,boolean)> (1)
<com.android.ex.photo.PhotoViewPager: void setCurrentItemInternal(int,boolean,boolean)> (1)
<com.android.mail.browse.ConversationPager: void setCurrentItemInternal(int,boolean,boolean)> (1)
<com.android.mail.photo.MailPhotoViewActivity: void onLoadFinished(android.support.v4.content.Loader,java.lang.Object)> (1)
<com.android.gallery3d.ingest.IngestActivity: void onResume()> (1)
<com.android.gallery3d.ingest.IngestActivity: void UiThreadNotifyIndexChanged()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void setEmojiKeyboard()> (2)
<com.android.inputmethod.latin.LatinIME: void access$700(com.android.inputmethod.latin.LatinIME,boolean)> (2)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetAutomaticShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetManualShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetShiftLockedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setAlphabetShiftLockShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setSymbolsKeyboard()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void setSymbolsShiftedKeyboard()> (1)
<com.android.mail.ui.LayoutListener: void onConversationVisibilityChanged(boolean)> (1)
<com.android.mail.ui.OnePaneController: void onConversationVisibilityChanged(boolean)> (4)
<com.android.packageinstaller.PackageInstallerActivity$9: void onClick(android.content.DialogInterface,int)> (1)
<com.android.packageinstaller.PackageInstallerActivity: void onCreate(android.os.Bundle)> (1)
<com.android.ex.photo.PhotoViewPager: void initialize()> (2)
<android.support.v4.view.ViewPager: void onLayout(boolean,int,int,int,int)> (5)
<com.android.calculator2.CalculatorViewPager: void scrollToItem(int,boolean,int,boolean)> (1)
<com.android.ex.photo.PhotoViewPager: void scrollToItem(int,boolean,int,boolean)> (1)
<com.android.mail.browse.ConversationPager: void scrollToItem(int,boolean,int,boolean)> (1)
<com.android.calculator2.CalculatorViewPager: void smoothScrollTo(int,int)> (1)
<com.android.ex.photo.PhotoViewPager: void smoothScrollTo(int,int)> (1)
<com.android.mail.browse.ConversationPager: void smoothScrollTo(int,int)> (1)
<android.support.v4.view.ViewPager$PagerObserver: void onChanged()> (1)
<android.support.v4.view.ViewPager$PagerObserver: void onInvalidated()> (1)
<com.android.calculator2.CalculatorViewPager: void dataSetChanged()> (1)
<com.android.ex.photo.PhotoViewPager: void dataSetChanged()> (1)
<com.android.mail.browse.ConversationPager: void dataSetChanged()> (1)
<android.support.v4.view.ViewPager: boolean pageLeft()> (4)
<android.support.v4.view.ViewPager: boolean pageRight()> (4)
<com.android.calculator2.Calculator: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.calculator2.CalculatorViewPager: void setCurrentItem(int,boolean)> (1)
<com.android.ex.photo.PhotoViewPager: void setCurrentItem(int,boolean)> (2)
<com.android.inputmethod.keyboard.EmojiPalettesView: void setCurrentCategoryId(int,boolean)> (3)
<com.android.mail.browse.ConversationPager: void setCurrentItem(int,boolean)> (1)
<android.support.v4.view.PagerTabStrip$1: void onClick(android.view.View)> (1)
<android.support.v4.view.PagerTabStrip$2: void onClick(android.view.View)> (1)
<android.support.v4.view.PagerTabStrip: boolean onTouchEvent(android.view.MotionEvent)> (1)
<android.support.v4.view.ViewPager$MyAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<com.android.browser.ComboViewActivity$TabsAdapter: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calculator2.Calculator: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calculator2.CalculatorViewPager: void setCurrentItem(int)> (1)
<com.android.calculator2.EventListener: void onClick(android.view.View)> (1)
<com.android.deskclock.DeskClock$TabsAdapter: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.ex.photo.PhotoViewPager: void setCurrentItem(int)> (1)
<com.android.mail.browse.ConversationPager: void setCurrentItem(int)> (1)
<com.android.packageinstaller.TabsAdapter: void onTabChanged(java.lang.String)> (1)
<com.android.photos.GalleryActivity$TabsAdapter: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.gallery3d.ingest.IngestActivity: void access$1500(com.android.gallery3d.ingest.IngestActivity)> (3)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onCodeInput(int,int)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onRestoreKeyboardState()> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void executePendingImsCallback(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (3)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onFinishInputView(boolean)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetAutomaticShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetKeyboard()> (4)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetManualShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetShiftLockedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setAlphabetShiftLockShiftedKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setSymbolsKeyboard()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void setSymbolsShiftedKeyboard()> (1)
<com.android.mail.ui.TwoPaneLayout: void dispatchConversationVisibilityChanged(boolean)> (1)
<com.android.ex.photo.PhotoViewPager: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.ex.photo.PhotoViewPager: void <init>(android.content.Context)> (3)
<com.android.calculator2.CalculatorViewPager: void onLayout(boolean,int,int,int,int)> (3)
<com.android.ex.photo.PhotoViewPager: void onLayout(boolean,int,int,int,int)> (3)
<com.android.mail.browse.ConversationPager: void onLayout(boolean,int,int,int,int)> (3)
<android.support.v4.view.ViewPager: boolean arrowScroll(int)> (4)
<com.android.calculator2.CalculatorViewPager: boolean pageLeft()> (1)
<com.android.ex.photo.PhotoViewPager: boolean pageLeft()> (1)
<com.android.mail.browse.ConversationPager: boolean pageLeft()> (1)
<com.android.calculator2.CalculatorViewPager: boolean pageRight()> (1)
<com.android.ex.photo.PhotoViewPager: boolean pageRight()> (1)
<com.android.mail.browse.ConversationPager: boolean pageRight()> (1)
<com.android.calculator2.Calculator: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: void onPageSelected(int)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: void onTabChanged(java.lang.String)> (1)
<android.support.v4.view.AccessibilityDelegateCompat: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (7)
<com.android.gallery3d.ingest.IngestActivity: void notifyIndexChanged()> (2)
<com.android.gallery3d.ingest.IngestActivity: void onIndexFinish()> (3)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onCodeInput(int)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onLoadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onFinishInput()> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInput(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onFinishInputView(boolean)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void setShifted(int)> (5)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void setAlphabetKeyboard()> (4)
<com.android.inputmethod.keyboard.internal.KeyboardState: void setShiftLocked(boolean)> (6)
<com.android.inputmethod.keyboard.internal.KeyboardState: void setSymbolsKeyboard()> (3)
<com.android.inputmethod.keyboard.internal.KeyboardState: void setSymbolsShiftedKeyboard()> (3)
<android.support.v4.view.ViewPager: void <init>(android.content.Context,android.util.AttributeSet)> (5)
<android.support.v4.view.ViewPager: void <init>(android.content.Context)> (7)
<android.support.v4.view.ViewPager: boolean executeKeyEvent(android.view.KeyEvent)> (4)
<com.android.calculator2.CalculatorViewPager: boolean arrowScroll(int)> (1)
<com.android.ex.photo.PhotoViewPager: boolean arrowScroll(int)> (1)
<com.android.mail.browse.ConversationPager: boolean arrowScroll(int)> (1)
<android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<android.support.v4.widget.DrawerLayout$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<android.support.v4.widget.ExploreByTouchHelper: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<android.support.v4.widget.SlidingPaneLayout$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewTouchHelper: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (2)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.IngestService: void setClientActivity(com.android.gallery3d.ingest.IngestActivity)> (4)
<com.android.gallery3d.ingest.IngestService: void setDevice(android.mtp.MtpDevice)> (4)
<com.android.gallery3d.ingest.IngestService: void onIndexFinish()> (1)
<com.android.gallery3d.ingest.MtpDeviceIndex$ProgressListener: void onIndexFinish()> (2)
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)> (3)
<com.android.inputmethod.latin.LatinIME: void onTextInput(java.lang.String)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void loadKeyboard(android.view.inputmethod.EditorInfo,com.android.inputmethod.latin.settings.SettingsValues)> (3)
<com.android.inputmethod.latin.LatinIME: void onFinishInput()> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInput(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onReleaseShift(boolean)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void updateAlphabetShiftState(int,int)> (2)
<com.android.inputmethod.keyboard.internal.KeyboardState: void updateShiftStateForRecapitalize(int)> (2)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onPressKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onFinishSlidingInput()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void resetKeyboardStateToAlphabet()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void toggleAlphabetAndSymbols()> (4)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onReleaseKey(int,boolean)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void toggleShiftInSymbols()> (3)
<com.android.calculator2.CalculatorViewPager: void <init>(android.content.Context,android.util.AttributeSet)> (3)
<com.android.mail.browse.ConversationPager: void <init>(android.content.Context,android.util.AttributeSet)> (4)
<com.android.calculator2.CalculatorViewPager: void <init>(android.content.Context)> (3)
<android.support.v4.view.ViewPager: boolean dispatchKeyEvent(android.view.KeyEvent)> (5)
<com.android.calculator2.CalculatorViewPager: boolean executeKeyEvent(android.view.KeyEvent)> (1)
<com.android.ex.photo.PhotoViewPager: boolean executeKeyEvent(android.view.KeyEvent)> (1)
<com.android.mail.browse.ConversationPager: boolean executeKeyEvent(android.view.KeyEvent)> (1)
<android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.IngestActivity$4: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.gallery3d.ingest.IngestActivity: void doUnbindHelperService()> (1)
<com.android.gallery3d.ingest.IngestActivity: void onPause()> (1)
<com.android.gallery3d.ingest.IngestService: void deviceAdded(android.mtp.MtpDevice)> (1)
<com.android.gallery3d.ingest.IngestService: void deviceRemoved(android.mtp.MtpDevice)> (1)
<com.android.gallery3d.ingest.IngestService: void onCreate()> (1)
<com.android.gallery3d.ingest.MtpDeviceIndex$IndexRunnable: void indexDevice()> (1)
<com.android.gallery3d.ingest.MtpDeviceIndex$IndexRunnable: void run()> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onEvent(com.android.inputmethod.event.Event)> (2)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int,int)> (5)
<com.android.inputmethod.latin.LatinIME: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onTextInput(java.lang.String)> (3)
<com.android.inputmethod.latin.LatinIME: void loadKeyboard()> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void retryResetCaches(boolean,int)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onUpdateShiftState(int,int)> (2)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,int,boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onFinishSlidingInput()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onResetKeyboardStateToAlphabet()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressSymbol()> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState: void onReleaseSymbol(boolean)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void onReleaseKey(int,boolean)> (1)
<com.android.mail.browse.ConversationPager: void <init>(android.content.Context)> (3)
<com.android.calculator2.CalculatorViewPager: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.ex.photo.PhotoViewPager: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.mail.browse.ConversationPager: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<android.support.v4.view.AccessibilityDelegateCompatJellyBean$1: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> (1)
<com.android.gallery3d.ingest.IngestActivity: void onDestroy()> (1)
<com.android.gallery3d.data.MtpClient$Listener: void deviceAdded(android.mtp.MtpDevice)> (1)
<com.android.gallery3d.data.MtpClient$Listener: void deviceRemoved(android.mtp.MtpDevice)> (1)
<com.android.inputmethod.event.EventInterpreter: boolean onHardwareKeyEvent(android.view.KeyEvent)> ()
<com.android.inputmethod.event.EventInterpreter: boolean onSoftwareEvent()> ()
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener: void pressDelete(int)> (2)
<com.android.inputmethod.keyboard.EmojiPalettesView: void registerCode(int)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: void onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnCodeInput(com.android.inputmethod.keyboard.Key,int,int,int,long)> (2)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void pickSuggestionManually(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (2)
<com.android.inputmethod.keyboard.EmojiPalettesView: void onKeyClick(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.latin.LatinIME: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)> (1)
<com.android.inputmethod.latin.LatinIME: void access$1000(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.inputmethod.latin.LatinIME: void access$600(com.android.inputmethod.latin.LatinIME,boolean,int)> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void requestUpdatingShiftState()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void updateShiftState()> (13)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,int,boolean)> (4)
<com.android.inputmethod.latin.LatinIME: void onFinishSlidingInput()> (1)
<com.android.inputmethod.keyboard.KeyboardSwitcher: void resetKeyboardStateToAlphabet()> (1)
<com.android.inputmethod.latin.LatinIME: void onReleaseKey(int,boolean)> (1)
<com.android.gallery3d.data.MtpClient$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener$DummyRepeatKeyRepeatTimer: void run()> (2)
<com.android.inputmethod.keyboard.EmojiPalettesView: void onClick(android.view.View)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: void access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: void onUpEvent(int,int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void detectAndSendKey(com.android.inputmethod.keyboard.Key,int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onKeyRepeat(int,int)> (2)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$1: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView$OnKeyClickListener: void onKeyClick(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.internal.KeyboardState$SwitchActions: void requestUpdatingShiftState()> (2)
<com.android.inputmethod.latin.LatinIME: boolean handleSeparator(int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: boolean maybeDoubleSpacePeriod()> (1)
<com.android.inputmethod.latin.LatinIME: void handleBackspace(int)> (1)
<com.android.inputmethod.latin.LatinIME: void handleRecapitalize()> (1)
<com.android.inputmethod.latin.LatinIME: void onEndBatchInputAsyncInternal(com.android.inputmethod.latin.SuggestedWords)> (1)
<com.android.inputmethod.latin.LatinIME: void onUpdateBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void onUpdateSelection(int,int,int,int,int,int)> (1)
<com.android.inputmethod.latin.LatinIME: void swapSwapperAndSpace()> (2)
<com.android.inputmethod.latin.LatinIME$UIHandler: void postUpdateShiftState()> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key,int)> (3)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onFinishSlidingInput()> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onReleaseKey(int,boolean)> (4)
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener: void startRepeat()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker,int)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.MoreKeysPanel: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onUpEvent(int,int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEventInternal(int,int,long)> (4)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,int,int)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestions$MoreSuggestionsListener: void onSuggestionSelected(int,com.android.inputmethod.latin.SuggestedWords$SuggestedWordInfo)> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.LatinIME: boolean handleNonSpecialCharacter(int,int,int,int)> (1)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onUpdateBatchInput(com.android.inputmethod.latin.InputPointers)> (1)
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnFinishSlidingInput()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void callListenerOnRelease(com.android.inputmethod.keyboard.Key,int,boolean)> (3)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker,int)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onPhantomUpEvent(long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,int,int)> (2)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: void onCodeInput(int,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void updateBatchInput(long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processSildeOutFromOldKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean dispatchTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element: void onPhantomUpEvent(long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void mayUpdateBatchInput(long,com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void updateBatchInputByTimer(long)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideOutFromOldKey(com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersExcept(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (2)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointersOlderThan(com.android.inputmethod.keyboard.internal.PointerTrackerQueue$Element,long)> (1)
<com.android.inputmethod.keyboard.internal.NonDistinctMultitouchHelper: void injectMotionEvent(int,float,float,long,long,com.android.inputmethod.keyboard.PointerTracker,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.internal.NonDistinctMultitouchHelper: void processMotionEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onGestureMoveEvent(int,int,long,boolean,com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startUpdateBatchInputTimer(com.android.inputmethod.keyboard.PointerTracker)> (3)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startUpdateBatchInputTimer(com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onCancelEvent(int,int,long)> (1)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$3: void run()> (1)
<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (4)
<android.app.ContextImpl$ApplicationContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<com.android.email.provider.EmailProvider: void updateAccountSyncInterval(long,android.content.ContentValues)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void removePeriodicSyncs(android.accounts.Account,java.lang.String)> (1)
<com.android.email.provider.EmailProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (3)
<com.android.email.provider.EmailProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> (5)
<com.android.email.service.EmailBroadcastProcessorService: void fixPeriodicSyncs(java.lang.String,java.util.Map)> (1)
<com.android.email.provider.EmailProvider: int uiUpdateFolder(android.content.Context,android.net.Uri,android.content.ContentValues)> (1)
<com.android.email.provider.EmailProvider: int uiUpdateMessage(android.net.Uri,android.content.ContentValues,boolean)> (2)
<com.android.email.provider.EmailProvider: int uiDeleteMessage(android.net.Uri)> (2)
<com.android.email.provider.EmailProvider: int uiUpdateMessage(android.net.Uri,android.content.ContentValues)> (1)
<com.android.email.provider.EmailProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (2)
<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService$Stub$Proxy: int getIsSyncable(android.accounts.Account,java.lang.String)> ()
<android.content.IContentService$Stub: int getIsSyncable(android.accounts.Account,java.lang.String)> (2)
<android.content.IContentService: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (5)
<android.app.ContextImpl$ApplicationContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (3)
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> (1)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void enableSync(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.calendar.CalendarSettingsActivity: void onBuildHeaders(java.util.List)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)> (2)
<com.android.browser.provider.BrowserProvider2$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
<android.content.ISyncAdapter$Stub$Proxy: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.ISyncAdapter$Stub: void initialize(android.accounts.Account,java.lang.String)> (2)
<android.content.ISyncAdapter$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.ISyncAdapter: void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)> (2)
<android.content.ISyncAdapter: void initialize(android.accounts.Account,java.lang.String)> ()
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.development.SyncAdapterDriver: void startSync(java.lang.String)> (1)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.development.SyncAdapterDriver: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService$Stub$Proxy: boolean getMasterSyncAutomatically()> ()
<android.content.IContentService$Stub: boolean getMasterSyncAutomatically()> (2)
<android.content.IContentService: boolean getMasterSyncAutomatically()> (1)
<android.content.ContentResolver: boolean getMasterSyncAutomatically()> (6)
<android.app.ContextImpl$ApplicationContentResolver: boolean getMasterSyncAutomatically()> (1)
<android.test.mock.MockContentResolver: boolean getMasterSyncAutomatically()> (1)
<com.android.email.EmailConnectivityManager: boolean isAutoSyncAllowed()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void processQueue()> (2)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void onWatchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.email.service.AttachmentDownloadService$DownloadSet: void access$800(com.android.email.service.AttachmentDownloadService$DownloadSet)> (1)
<com.android.email.service.AttachmentDownloadService: void watchdogAlarm()> (1)
<com.android.email.service.AttachmentDownloadService$Watchdog$1: void run()> (1)
Permission:android.permission.WAKE_LOCK
4289 Callers:
<com.android.server.wifi.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> ()
<android.net.wifi.IWifiManager$Stub: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (2)
<android.net.wifi.IWifiManager: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> (1)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$WifiLock: void acquire()> (2)
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipAudioCall: void grabWifiHighPerfLock()> (1)
<com.android.server.sip.SipService: void updateWakeLocks()> (3)
<android.net.sip.SipAudioCall: void startAudioInternal()> (1)
<com.android.server.sip.SipService: void close(java.lang.String)> (2)
<com.android.server.sip.SipService: void onConnectivityChanged(android.net.NetworkInfo)> (1)
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.SipAudioCall: void startAudio()> (4)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> ()
<android.net.sip.ISipService$Stub: void close(java.lang.String)> (2)
<com.android.server.sip.SipService: void access$1700(com.android.server.sip.SipService,android.net.NetworkInfo)> (1)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.SipAudioCall: void transferToNewSession()> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEstablished(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallHeld(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void separate()> (1)
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.ISipService: void close(java.lang.String)> (1)
<com.android.server.sip.SipService$ConnectivityReceiver$1: void run()> (1)
<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.SipAudioCall: void access$800(android.net.sip.SipAudioCall)> (1)
<com.android.internal.telephony.Connection: void separate()> ()
<com.android.server.sip.SipService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipManager: void close(java.lang.String)> ()
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> ()
<android.net.sip.SipAudioCall$1: void onCallEstablished(android.net.sip.SipSession,java.lang.String)> (1)
<com.android.server.wifi.WifiService: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> ()
<android.net.wifi.IWifiManager$Stub: boolean releaseWifiLock(android.os.IBinder)> (2)
<android.net.wifi.IWifiManager: boolean releaseWifiLock(android.os.IBinder)> (3)
<android.net.wifi.WifiManager$WifiLock: void finalize()> ()
<android.net.wifi.WifiManager$WifiLock: void release()> (3)
<android.net.sip.SipAudioCall: void releaseWifiHighPerfLock()> (1)
<com.android.server.sip.SipService: void unregisterReceivers()> (1)
<android.net.sip.SipAudioCall: void stopCall(boolean)> (3)
<com.android.server.sip.SipService: void notifyProfileRemoved(android.net.sip.SipProfile)> (1)
<android.net.sip.SipAudioCall: void close(boolean)> (3)
<android.net.sip.SipAudioCall: void endCall()> (1)
<android.net.sip.SipAudioCall: void access$1000(android.net.sip.SipAudioCall,boolean)> (1)
<android.net.sip.SipAudioCall: void close()> (2)
<android.net.sip.SipAudioCall: void onError(int,java.lang.String)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection: void hangup()> (1)
<android.net.sip.SipAudioCall$1: void onCallBusy(android.net.sip.SipSession)> (1)
<android.net.sip.SipAudioCall$1: void onCallEnded(android.net.sip.SipSession)> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<android.net.sip.SipAudioCall: void access$1300(android.net.sip.SipAudioCall,int,java.lang.String)> (1)
<com.android.internal.telephony.Connection: void hangup()> (1)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onChanged(android.net.sip.SipAudioCall)> (3)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onError(com.android.internal.telephony.Connection$DisconnectCause)> (1)
<android.net.sip.SipAudioCall$1: void onError(android.net.sip.SipSession,int,java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone$SipCall: void hangup()> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallBusy(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onError(com.android.internal.telephony.Connection$DisconnectCause)> (1)
<com.android.internal.telephony.Call: void hangup()> (5)
<com.android.internal.telephony.sip.SipPhone$SipCall: void rejectCall()> (1)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallBusy(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onCallEnded(android.net.sip.SipAudioCall)> (2)
<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onError(android.net.sip.SipAudioCall,int,java.lang.String)> (2)
<com.android.internal.telephony.CallManager: com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)> ()
<com.android.internal.telephony.CallManager: void acceptCall(com.android.internal.telephony.Call)> ()
<com.android.internal.telephony.CallManager: void hangupForegroundResumeBackground(com.android.internal.telephony.Call)> ()
<com.android.internal.telephony.Call: void hangupIfAlive()> (4)
<com.android.internal.telephony.sip.SipPhone: void rejectCall()> ()
<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void onError(android.net.sip.SipAudioCall,int,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaCall: void hangupIfAlive()> (2)
<com.android.internal.telephony.gsm.GsmCall: void hangupIfAlive()> (2)
<com.android.internal.telephony.sip.SipCallBase: void hangupIfAlive()> (1)
<com.android.internal.telephony.sip.SipPhone$SipCall: void hangupIfAlive()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void hangupAndPowerOff()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void hangupAndPowerOff()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void hangupAndPowerOff()> (2)
<com.android.internal.telephony.ServiceStateTracker: void hangupAndPowerOff()> (3)
<com.android.internal.telephony.ServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (4)
<com.android.internal.telephony.ServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (4)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean processPendingRadioPowerOffAfterDataOff()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void restartRadio()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void powerOffRadioSafely(com.android.internal.telephony.dataconnection.DcTrackerBase)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void onDisconnectDone(int,android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setPowerStateToDesired()> (4)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void restartRadio()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setPowerStateToDesired()> (2)
<com.android.internal.telephony.ServiceStateTracker: void setPowerStateToDesired()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void doRecovery()> (2)
<com.android.internal.telephony.ServiceStateTracker: void setRadioPower(boolean)> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void doRecovery()> (2)
<com.android.internal.telephony.dataconnection.DcTracker: void onPollPdp()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setRadioPower(boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setRadioPower(boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setRadioPower(boolean)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void setRadioPower(boolean)> (1)
<com.android.server.power.PowerManagerService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)> (3)
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)> ()
<android.os.IPowerManager$Stub: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)> (2)
<com.android.server.power.PowerManagerService: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)> (2)
<android.os.IPowerManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IPowerManager: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource)> (1)
<android.os.IPowerManager$Stub$Proxy: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)> ()
<android.os.IPowerManager$Stub: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)> (2)
<com.android.server.power.PowerManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.PowerManager$WakeLock: void acquireLocked()> (2)
<android.os.IPowerManager: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)> ()
<android.os.PowerManager$WakeLock: void acquire(long)> (7)
<android.os.PowerManager$WakeLock: void acquire()> (92)
<android.net.DhcpStateMachine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiStateMachine: void handleScreenStateChanged(boolean)> (1)
<android.support.v4.content.WakefulBroadcastReceiver: android.content.ComponentName startWakefulService(android.content.Context,android.content.Intent)> ()
<com.android.bluetooth.hfp.HeadsetStateMachine: void expectVoiceRecognition()> (1)
<com.android.internal.telephony.SmsStorageMonitor: void handleIccFull()> (1)
<com.android.music.MediaPlaybackService$MultiPlayer$1: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.server.sip.SipWakeLock: void acquire(long)> (1)
<android.hardware.location.GeofenceHardwareImpl: void acquireWakeLock()> (3)
<android.media.AsyncPlayer: void acquireWakeLock()> (1)
<android.media.MediaFocusControl: void dispatchMediaKeyEvent(android.view.KeyEvent,boolean)> (2)
<android.media.MediaFocusControl: void dispatchMediaKeyEventForCalls(android.view.KeyEvent,boolean)> (1)
<android.media.MediaFocusControl: void startVoiceBasedInteractions(boolean)> (1)
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)> (2)
<android.media.MediaPlayer: void stayAwake(boolean)> (8)
<android.net.wifi.WifiStateMachine$DriverStartedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.map.BluetoothMapService: void startObexServerSession()> (1)
<com.android.bluetooth.opp.BluetoothOppObexClientSession$ClientThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: int onPut(javax.obex.Operation)> ()
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void preStart()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.browser.Controller: void onPause()> (1)
<com.android.calendar.alerts.AlertReceiver: void beginStartingService(android.content.Context,android.content.Intent)> (1)
<com.android.camera.WideAnglePanoramaModule$7: void run()> (1)
<com.android.deskclock.AlarmAlertWakeLock: void acquireCpuWakeLock(android.content.Context)> (2)
<com.android.deskclock.AlarmAlertWakeLock: void acquireScreenCpuWakeLock(android.content.Context)> (1)
<com.android.deskclock.AlarmInitReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void acquireWakeLock()> (3)
<com.android.development.Connectivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.development.Connectivity: void onStartDelayedCycle()> (1)
<com.android.development.Connectivity: void onStartScreenCycle()> (1)
<com.android.email.EmailConnectivityManager: void waitForConnectivity()> (1)
<com.android.emailsync.SyncManager: void acquireWakeLock(long)> (2)
<com.android.gallery3d.ingest.ImportTask: void run()> (1)
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: void onProgressStart()> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: void onCreate()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void acquireWakeLock()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (4)
<com.android.internal.telephony.gsm.GsmConnection: void acquireWakeLock()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (2)
<com.android.internal.telephony.InboundSmsHandler$IdleState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.PhoneBase,com.android.internal.telephony.CellBroadcastHandler)> (4)
<com.android.internal.telephony.RIL: void acquireWakeLock()> (1)
<com.android.internal.telephony.WakeLockStateMachine$IdleState: void exit()> (1)
<com.android.internal.telephony.WakeLockStateMachine: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneBase)> (3)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver: void handleCancelPrintJob(android.content.Context,android.print.PrintJobId,java.lang.String,java.lang.String)> (1)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver: void handleRestartPrintJob(android.content.Context,android.print.PrintJobId)> (1)
<com.android.server.AlarmManagerService$AlarmThread: void run()> (2)
<com.android.server.am.ActivityStackSupervisor: void acquireLaunchWakelock()> (1)
<com.android.server.am.ActivityStackSupervisor: void goingToSleepLocked()> (2)
<com.android.server.BackupManagerService$RunBackupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService$RunInitializeReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService: void restoreAtInstall(java.lang.String,int)> (2)
<com.android.server.ConnectivityService: void requestNetworkTransitionWakelock(java.lang.String)> (2)
<com.android.server.content.SyncManager$ActiveSyncContext: void <init>(com.android.server.content.SyncManager,com.android.server.content.SyncOperation,long,int)> (1)
<com.android.server.content.SyncManager$SyncAlarmIntentReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.DockObserver: void updateLocked()> (2)
<com.android.server.IdleMaintenanceService: void sendIdleMaintenanceEndIntent()> (1)
<com.android.server.IdleMaintenanceService: void sendIdleMaintenanceStartIntent()> (1)
<com.android.server.location.GeofenceManager: void sendIntent(android.app.PendingIntent,android.content.Intent)> (2)
<com.android.server.location.GpsLocationProvider: void handleDownloadXtraData()> (1)
<com.android.server.location.GpsLocationProvider: void handleInjectNtpTime()> (1)
<com.android.server.location.GpsLocationProvider: void sendMessage(int,int,java.lang.Object)> (9)
<com.android.server.LocationManagerService$Receiver: void incrementPendingBroadcastsLocked()> (3)
<com.android.server.net.NetworkStatsService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$6: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService: void performPoll(int)> (2)
<com.android.server.net.NetworkStatsService: void updateIfaces()> (1)
<com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.sip.SipWakeLock: void acquire(java.lang.Object)> (4)
<com.android.server.UiModeManagerService: void updateLocked(int,int)> (7)
<com.android.server.VibratorService$VibrateThread: void <init>(com.android.server.VibratorService,com.android.server.VibratorService$Vibration)> (1)
<com.android.server.WiredAccessoryManager: void updateLocked(java.lang.String,int)> (2)
<com.android.server.wm.WindowManagerService: void setHoldScreenLocked(com.android.server.wm.Session)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)> (5)
<com.android.soundrecorder.SoundRecorder: void onStateChanged(int)> (1)
<com.android.videoeditor.VideoEditorActivity$23: void onStart()> (2)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)> (1)
<com.android.server.content.SyncManager: void sendSyncAlarmMessage()> (1)
<com.android.server.content.SyncManager: void sendCheckAlarmsMessage()> (4)
<com.android.server.content.SyncManager: void sendSyncFinishedOrCanceledMessage(com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,int,java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void access$100(android.net.wifi.WifiStateMachine,boolean)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processVrEvent(int)> (1)
<com.android.server.sip.SipSessionGroup: void processRequest(javax.sip.RequestEvent)> ()
<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceMonitorStatus(int,int,android.location.Location,int)> (2)
<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceOperationStatus(int,int,int)> (4)
<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceTransition(int,android.location.Location,int,long,int,int)> (2)
<android.media.AsyncPlayer: void enqueueLocked(android.media.AsyncPlayer$Command)> (2)
<android.media.MediaFocusControl: void filterMediaKeyEvent(android.view.KeyEvent,boolean)> (2)
<android.media.MediaFocusControl: void sendSimulatedMediaButtonEvent(android.view.KeyEvent,boolean)> (1)
<android.media.MediaFocusControl: void filterVoiceInputKeyEvent(android.view.KeyEvent,boolean)> (1)
<com.android.music.AudioPreview$PreviewPlayer: void setWakeMode(android.content.Context,int)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void setWakeMode(android.content.Context,int)> (4)
<android.media.MediaPlayer: void access$900(android.media.MediaPlayer,boolean)> (3)
<android.media.MediaPlayer: void pause()> (4)
<android.media.MediaPlayer: void release()> (19)
<android.media.MediaPlayer: void reset()> (8)
<android.media.MediaPlayer: void start()> (16)
<android.media.MediaPlayer: void stop()> (13)
<com.android.music.AudioPreview$PreviewPlayer: void stayAwake(boolean)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void stayAwake(boolean)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.bluetooth.a2dp.A2dpStateMachine: void access$1100(com.android.bluetooth.a2dp.A2dpStateMachine,android.bluetooth.BluetoothDevice,int,int)> (6)
<com.android.bluetooth.map.BluetoothMapService: void access$600(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.opp.BluetoothOppObexClientSession: void start(android.os.Handler,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void createServerSession(javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.browser.ActivityController: void onPause()> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.alarms.AlarmService: void startAlarm(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.alarms.AlarmService: void startAlarm(com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.deskclock.TimerRingService: void onCreate()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void onPageChanged(int)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void onResume()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void rightButtonAction()> (1)
<com.android.development.Connectivity: void access$2200(com.android.development.Connectivity)> (1)
<com.android.development.Connectivity: void access$2400(com.android.development.Connectivity)> (1)
<com.android.email.service.AttachmentDownloadService: void run()> (1)
<com.android.emailsync.SyncManager: void runAwake(long)> (4)
<com.android.exchange.ExchangeService: void acquireWakeLock(long)> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressStart()> (2)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.cdma.CdmaCallWaitingNotification,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.cdma.CdmaCallTracker,int)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void handleEnterEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setTimeFromNITZString(java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.gsm.GsmCallTracker,int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.gsm.GsmCallTracker,com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void setPostDialState(com.android.internal.telephony.Connection$PostDialState)> (5)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.util.State: void exit()> (106)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void <init>(android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.PhoneBase,com.android.internal.telephony.cdma.CdmaSMSDispatcher)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.PhoneBase,com.android.internal.telephony.CellBroadcastHandler)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void <init>(android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.PhoneBase,com.android.internal.telephony.CellBroadcastHandler)> (1)
<com.android.internal.telephony.RIL: void send(com.android.internal.telephony.RILRequest)> (110)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.CellBroadcastHandler: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneBase)> (4)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityStack: void startPausingLocked(boolean,boolean)> (4)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<com.android.server.am.ActivityStackSupervisor: boolean shutdownLocked(int)> (1)
<android.app.backup.IBackupManager$Stub$Proxy: void restoreAtInstall(java.lang.String,int)> ()
<android.app.backup.IBackupManager$Stub: void restoreAtInstall(java.lang.String,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: void requestNetworkTransitionWakelock(java.lang.String)> (2)
<com.android.server.content.SyncManager$SyncHandler: boolean dispatchSyncOperation(com.android.server.content.SyncOperation)> (1)
<com.android.server.DockObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.DockObserver: void systemReady()> (1)
<com.android.server.IdleMaintenanceService: void updateIdleMaintenanceState(boolean)> (1)
<com.android.server.location.GeofenceManager: void sendIntentEnter(android.app.PendingIntent)> (1)
<com.android.server.location.GeofenceManager: void sendIntentExit(android.app.PendingIntent)> (1)
<com.android.server.location.GpsLocationProvider: void access$2800(com.android.server.location.GpsLocationProvider)> (1)
<com.android.server.location.GpsLocationProvider: void access$2600(com.android.server.location.GpsLocationProvider)> (1)
<com.android.server.location.GpsLocationProvider: void access$1100(com.android.server.location.GpsLocationProvider,int,int,java.lang.Object)> (2)
<com.android.server.location.GpsLocationProvider: void disable()> (1)
<com.android.server.location.GpsLocationProvider: void enable()> (1)
<com.android.server.location.GpsLocationProvider: void handleUpdateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void requestUtcTime()> (1)
<com.android.server.location.GpsLocationProvider: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> (1)
<com.android.server.location.GpsLocationProvider: void updateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void xtraDownloadRequest()> (1)
<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)> (1)
<com.android.server.LocationManagerService$Receiver: boolean callProviderEnabledLocked(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)> (1)
<com.android.server.net.NetworkStatsService: void access$700(com.android.server.net.NetworkStatsService,int)> (3)
<com.android.server.net.NetworkStatsService: void access$600(com.android.server.net.NetworkStatsService)> (2)
<com.android.server.power.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)> (3)
<com.android.server.sip.SipService$MyExecutor: void execute(java.lang.Runnable)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onResponse(boolean)> (2)
<com.android.server.sip.SipService$SipAutoReg: void run()> (2)
<com.android.server.sip.SipService$SipAutoReg: void start(com.android.server.sip.SipSessionGroup)> (1)
<com.android.server.UiModeManagerService: void access$400(com.android.server.UiModeManagerService,int,int)> (1)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<com.android.server.UiModeManagerService: void updateDockState(int)> (1)
<com.android.server.UiModeManagerService: void updateTwilight()> (1)
<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)> (3)
<com.android.server.WiredAccessoryManager: void access$700(com.android.server.WiredAccessoryManager,java.lang.String,int)> (1)
<com.android.server.WiredAccessoryManager: void notifyWiredAccessoryChanged(long,int,int)> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)> (1)
<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)> (5)
<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)> (3)
<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,int)> (2)
<com.android.soundrecorder.Recorder$OnStateChangedListener: void onStateChanged(int)> (1)
<com.android.server.content.SyncManager: void access$1200(com.android.server.content.SyncManager)> (1)
<com.android.server.content.SyncManager: void access$100(com.android.server.content.SyncManager)> (3)
<com.android.server.content.SyncManager: void onUserStarting(int)> (1)
<com.android.server.content.SyncManager: void scheduleSyncOperation(com.android.server.content.SyncOperation)> (6)
<com.android.server.content.SyncManager: void updateRunningAccounts()> (4)
<com.android.server.content.SyncManager: void access$1400(com.android.server.content.SyncManager,com.android.server.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> (2)
<com.android.server.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> (3)
<android.net.wifi.WifiStateMachine$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.net.wifi.WifiStateMachine$DriverStartedState: void enter()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4800(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.server.location.FlpHardwareProvider: void onGeofenceMonitorStatus(int,int,android.location.Location)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceStatus(int,int,double,double,double,float,float,float,long)> ()
<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceAddStatus(int,int)> (2)
<android.hardware.location.GeofenceHardwareImpl: void reportGeofencePauseStatus(int,int)> (2)
<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceRemoveStatus(int,int)> (2)
<android.hardware.location.GeofenceHardwareImpl: void reportGeofenceResumeStatus(int,int)> (2)
<com.android.server.location.FlpHardwareProvider: void onGeofenceTransition(int,android.location.Location,int,long,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceTransition(int,int,double,double,double,float,float,float,long,int,long)> ()
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> ()
<android.media.AsyncPlayer: void stop()> ()
<android.media.MediaFocusControl: void dispatchMediaKeyEvent(android.view.KeyEvent)> (1)
<android.media.MediaFocusControl: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void <init>(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void setNextDataSource(java.lang.String)> (2)
<com.android.music.AudioPreview$PreviewPlayer: void access$900(android.media.MediaPlayer,boolean)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void access$900(android.media.MediaPlayer,boolean)> (1)
<android.filterpacks.videosrc.MediaSource: void pauseVideo(boolean)> ()
<android.widget.VideoView: void pause()> (5)
<com.android.music.AudioPreview$PreviewPlayer: void pause()> (4)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void pause()> (2)
<android.filterpacks.videosrc.MediaSource: boolean setupMediaPlayer(boolean)> (2)
<android.filterpacks.videosrc.MediaSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void process(android.filterfw.core.FilterContext)> (1)
<android.media.AsyncPlayer$Thread: void run()> (2)
<android.media.AsyncPlayer: void startSound(android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void cleanupPlayer(android.media.MediaPlayer)> (1)
<android.media.Ringtone: void destroyLocalPlayer()> (3)
<android.speech.tts.AudioPlaybackQueueItem: void finish()> (1)
<android.widget.VideoView: int getAudioSessionId()> (2)
<android.widget.VideoView: void release(boolean)> (3)
<android.widget.VideoView: void stopPlayback()> (3)
<com.android.deskclock.alarms.AlarmKlaxon: void stop(android.content.Context)> (3)
<com.android.deskclock.TimerRingService$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.deskclock.TimerRingService: void stop()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void release()> (2)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void release()> (5)
<com.android.music.MusicPicker: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.music.MusicPicker: void stopMediaPlayer()> (2)
<com.android.soundrecorder.Recorder: void stopPlayback()> (1)
<com.android.deskclock.alarms.AlarmKlaxon: void start(android.content.Context,com.android.deskclock.provider.AlarmInstance,boolean)> (1)
<com.android.deskclock.TimerRingService: void play()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void reset()> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void reset()> (2)
<com.android.music.MediaPlaybackService$MultiPlayer: boolean setDataSourceImpl(android.media.MediaPlayer,java.lang.String)> (2)
<android.media.AudioService$AudioHandler: void onPlaySoundEffect(int,int)> (1)
<android.media.MediaPlayer: void postEventFromNative(java.lang.Object,int,int,int,java.lang.Object)> (2)
<android.media.Ringtone: boolean playFallbackRingtone()> (1)
<android.media.Ringtone: void play()> (6)
<android.speech.tts.AudioPlaybackQueueItem: void run()> (1)
<android.widget.VideoView: void start()> (9)
<com.android.deskclock.alarms.AlarmKlaxon: void startAlarm(android.content.Context,android.media.MediaPlayer)> (1)
<com.android.deskclock.TimerRingService: void startAlarm(android.media.MediaPlayer)> (1)
<com.android.music.AudioPreview$PreviewPlayer: void start()> (3)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void start()> (2)
<com.android.music.MusicPicker: void setSelected(android.database.Cursor)> (1)
<com.android.soundrecorder.Recorder: void startPlayback()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void stop()> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void stop()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.map.BluetoothMapService$MapBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppObexSession: void start(android.os.Handler,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1000(com.android.bluetooth.opp.BluetoothOppService,javax.obex.ObexTransport)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.browser.BrowserActivity: void onPause()> (1)
<com.android.deskclock.alarms.AlarmStateManager: void setFiredState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.alarms.AlarmService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.deskclock.DeskClockFragment: void onPageChanged(int)> (4)
<com.android.deskclock.stopwatch.StopwatchFragment: void access$700(com.android.deskclock.stopwatch.StopwatchFragment)> (1)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.emailsync.SyncManager: void run()> (2)
<com.android.emailsync.SyncManager: void startServiceThread(com.android.emailsync.AbstractSyncService)> (3)
<com.android.emailsync.SyncManager: void waitForConnectivity()> (2)
<com.android.exchange.ExchangeService: void runAwake(long)> (3)
<com.android.gallery3d.ui.MenuExecutor: void onProgressStart(com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection checkMtFindNewRinging(com.android.internal.telephony.DriverCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dialThreeWay(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void processNextPostDialChar()> (5)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)> (4)
<com.android.internal.telephony.gsm.GsmConnection: boolean processPostDialChar(char)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void cancelPostDial()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWaitChar()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void proceedAfterWildChar(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void processNextPostDialChar()> (4)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void exit()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void exit()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: com.android.internal.telephony.cdma.CdmaInboundSmsHandler makeInboundSmsHandler(android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.PhoneBase,com.android.internal.telephony.cdma.CdmaSMSDispatcher)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: com.android.internal.telephony.gsm.GsmInboundSmsHandler makeInboundSmsHandler(android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.RIL: void acceptCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void conference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deactivateDataCall(int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void exitEmergencyCallbackMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void explicitCallTransfer(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getBasebandVersion(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCdmaBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCDMASubscription(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCdmaSubscriptionSource(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCellInfoList(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCLIR(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getCurrentCalls(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getDataCallList(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getDataRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getGsmBroadcastConfig(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getIMSIForApp(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getImsRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastDataCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getMute(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getOperator(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSignalStrength(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getVoiceRadioTechnology(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getVoiceRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupForegroundResumeBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void hangupWaitingOrBackground(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCallWaiting(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void rejectCall(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportSmsMemoryStatus(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void resetRadio(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendCdmaSms(byte[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendEnvelope(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendImsCdmaSms(byte[],int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendImsGsmSms(java.lang.String,java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendScreenState(boolean)> (2)
<com.android.internal.telephony.RIL: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void separateConnection(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCallWaiting(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setCdmaSubscriptionSource(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setCellInfoListRate(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setCLIR(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setGsmBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setInitialAttachApn(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setLocationUpdates(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setMute(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setPreferredNetworkType(int,android.os.Message)> (3)
<com.android.internal.telephony.RIL: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setRadioPower(boolean,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setSuppServiceNotifications(boolean,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void startDtmf(char,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void stopDtmf(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler: com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler makeScpHandler(android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.CellBroadcastHandler: void <init>(android.content.Context)> (2)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: void <init>(android.content.Context,com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneBase)> (2)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.am.ActivityStack: boolean checkReadyForSleepLocked()> (2)
<com.android.server.am.ActivityStackSupervisor: boolean pauseBackStacks(boolean)> (1)
<android.app.ActivityManagerNative: void goingToSleep()> (2)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (2)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void restoreAtInstall(java.lang.String,int)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: void requestNetworkTransitionWakelock(java.lang.String)> (1)
<com.android.server.content.SyncManager$SyncHandler: long maybeStartNextSyncLocked()> (5)
<com.android.server.ServerThread$2: void run()> (1)
<com.android.server.IdleMaintenanceService: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.GeofenceManager: void updateFences()> (2)
<com.android.server.location.GpsLocationProvider$4: void run()> (1)
<com.android.server.location.GpsLocationProvider$5: void run()> (1)
<com.android.server.location.LocationProviderInterface: void disable()> (2)
<com.android.server.location.LocationProviderInterface: void enable()> (1)
<com.android.server.location.GpsLocationProvider: void access$2500(com.android.server.location.GpsLocationProvider,int,android.net.NetworkInfo)> (1)
<com.android.server.location.GpsLocationProvider: void setEngineCapabilities(int)> ()
<com.android.server.location.LocationProviderInterface: void setRequest(com.android.internal.location.ProviderRequest,android.os.WorkSource)> (1)
<com.android.server.location.GpsLocationProvider$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.LocationManagerService: void handleLocationChangedLocked(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(android.location.LocationRequest,com.android.server.LocationManagerService$Receiver,int,int,java.lang.String)> (1)
<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean,int)> (2)
<com.android.server.net.NetworkStatsService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.net.NetworkStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)> (1)
<com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)> (2)
<com.android.server.sip.SipService$ConnectivityReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.sip.SipService$SipAutoReg: void onError(int,java.lang.String)> (1)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback: void onResponse(boolean)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onRegistrationDone(android.net.sip.ISipSession,int)> (2)
<com.android.server.sip.SipService$SipSessionGroupExt: void openToReceiveCalls()> (2)
<com.android.server.UiModeManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService: void access$100(com.android.server.UiModeManagerService,int)> (1)
<com.android.server.UiModeManagerService: void access$500(com.android.server.UiModeManagerService)> (1)
<com.android.server.VibratorService: void startNextVibrationLocked()> (4)
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver: void updateStateLocked(java.lang.String,java.lang.String,int)> (2)
<com.android.server.input.InputManagerService$WiredAccessoryCallbacks: void notifyWiredAccessoryChanged(long,int,int)> (1)
<com.android.server.WiredAccessoryManager: void bootCompleted()> (1)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedLoop()> (1)
<com.android.server.wm.WindowManagerService: void resumeRotationLocked()> (1)
<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()> (4)
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityLocked(com.android.server.wm.DisplayContent,int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySizeLocked(com.android.server.wm.DisplayContent,int,int)> (2)
<com.android.server.wm.WindowManagerService: void setOverscanLocked(com.android.server.wm.DisplayContent,int,int,int,int)> (1)
<com.android.soundrecorder.Recorder: void signalStateChanged(int)> (4)
<com.android.server.content.SyncManager$10: void onStatusChanged(int)> (2)
<com.android.server.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void access$900(com.android.server.content.SyncManager,int)> (1)
<com.android.server.content.SyncManager$SyncHandler: long scheduleReadyPeriodicSyncs()> (7)
<com.android.server.content.SyncManager$SyncHandler: void runBoundToSyncAdapter(com.android.server.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)> (2)
<com.android.server.content.SyncManager$SyncHandler: void runSyncFinishedOrCanceledLocked(android.content.SyncResult,com.android.server.content.SyncManager$ActiveSyncContext)> (4)
<com.android.server.content.SyncManager: void maybeRescheduleSync(android.content.SyncResult,com.android.server.content.SyncOperation)> (1)
<com.android.server.content.SyncManager: void scheduleSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle,long,long,boolean)> (8)
<com.android.server.content.SyncManager$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager: void onUserRemoved(int)> (1)
<com.android.server.content.SyncManager: void onUserStopping(int)> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void binderDied()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)> (2)
<com.android.internal.util.State: void enter()> (36)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.server.location.FlpHardwareProvider: void onGeofenceAdd(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceAddStatus(int,int)> ()
<com.android.server.location.FlpHardwareProvider: void onGeofencePause(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofencePauseStatus(int,int)> ()
<com.android.server.location.FlpHardwareProvider: void onGeofenceRemove(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceRemoveStatus(int,int)> ()
<com.android.server.location.FlpHardwareProvider: void onGeofenceResume(int,int)> ()
<com.android.server.location.GpsLocationProvider: void reportGeofenceResumeStatus(int,int)> ()
<android.media.AudioService: void dispatchMediaKeyEvent(android.view.KeyEvent)> (2)
<android.media.AudioService: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (2)
<com.android.music.MediaPlaybackService: void onCreate()> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void setDataSource(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void setNextTrack()> (3)
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.gallery3d.app.MoviePlayer: void pauseVideo()> (5)
<com.android.gallery3d.app.TrimVideo: int setProgress()> (3)
<com.android.gallery3d.app.TrimVideo: void pauseVideo()> (2)
<com.android.music.AudioPreview$2: void onAudioFocusChange(int)> (1)
<com.android.music.AudioPreview: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.music.AudioPreview: void playPauseClicked(android.view.View)> ()
<com.android.music.MediaPlaybackService$MultiPlayer: void pause()> (1)
<android.filterpacks.videosrc.MediaSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void close(android.filterfw.core.FilterContext)> (61)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<android.media.AsyncPlayer: void access$200(android.media.AsyncPlayer,android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void access$5100(android.media.AudioService$AudioHandler,android.media.MediaPlayer)> (2)
<android.media.Ringtone: void setUri(android.net.Uri)> (2)
<android.media.Ringtone: void stop()> (3)
<com.android.gallery3d.app.MoviePlayer: void <init>(android.view.View,com.android.gallery3d.app.MovieActivity,android.net.Uri,android.os.Bundle,boolean)> (2)
<android.widget.VideoView: void access$2200(android.widget.VideoView,boolean)> (1)
<android.widget.VideoView: void openVideo()> (3)
<android.widget.VideoView: void suspend()> (3)
<com.android.gallery3d.app.MoviePlayer: void onDestroy()> (2)
<com.android.gallery3d.app.TrimVideo: void onDestroy()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void hideAndStopWelcomeVideo()> (2)
<com.android.deskclock.alarms.AlarmKlaxon$1: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.deskclock.alarms.AlarmService: void stopCurrentAlarm()> (2)
<com.android.deskclock.TimerRingService: void onDestroy()> (1)
<com.android.music.AudioPreview: void stopPlayback()> (3)
<com.android.music.MediaPlaybackService$MultiPlayer: void release()> (1)
<com.android.music.MusicPicker: void onPause()> (1)
<com.android.soundrecorder.Recorder: void stop()> (11)
<com.android.deskclock.TimerRingService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$MultiPlayer: void stop()> (2)
<com.android.music.AudioPreview$PreviewPlayer: void postEventFromNative(java.lang.Object,int,int,int,java.lang.Object)> (1)
<com.android.music.MediaPlaybackService$CompatMediaPlayer: void postEventFromNative(java.lang.Object,int,int,int,java.lang.Object)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void onStartSample()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void performAuditoryFeedbackForAccessibilityIfNeed()> (1)
<com.android.server.DockObserver: void handleDockStateChange()> (1)
<com.android.server.power.Notifier: void playWirelessChargingStartedSound()> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<android.speech.tts.PlaybackQueueItem: void run()> (2)
<android.widget.VideoView$2: void onPrepared(android.media.MediaPlayer)> (1)
<android.widget.VideoView$7: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.gallery3d.app.MoviePlayer: void playVideo()> (3)
<com.android.gallery3d.app.MoviePlayer: void startVideo()> (4)
<com.android.gallery3d.app.TrimVideo: void playVideo()> (3)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void showAndStartWelcomeVideo()> (1)
<com.android.music.AudioPreview: void onPrepared(android.media.MediaPlayer)> (2)
<com.android.music.AudioPreview: void start()> (3)
<com.android.music.MediaPlaybackService$MultiPlayer: void start()> (1)
<com.android.music.MusicPicker: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.soundrecorder.SoundRecorder: void onClick(android.view.View)> (1)
<com.android.bluetooth.map.BluetoothMapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startObexSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.deskclock.alarms.AlarmStateManager: void registerInstance(android.content.Context,com.android.deskclock.provider.AlarmInstance,boolean)> (5)
<com.android.deskclock.alarms.AlarmStateManager: void setAlarmState(android.content.Context,com.android.deskclock.provider.AlarmInstance,int)> (1)
<com.android.deskclock.AlarmClockFragment: void onPageChanged(int)> (1)
<com.android.deskclock.ClockFragment: void onPageChanged(int)> (1)
<com.android.deskclock.DeskClock$TabsAdapter: void notifyPageChanged(int)> (2)
<com.android.deskclock.DeskClock$TabsAdapter: void registerPageChangedListener(com.android.deskclock.DeskClockFragment)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment$3: void run()> (1)
<com.android.exchange.ExchangeService: void run()> (1)
<com.android.emailsync.SyncManager: long checkMailboxes()> (2)
<com.android.emailsync.SyncManager: void requestSync(com.android.emailcommon.provider.Mailbox,int,com.android.emailsync.Request)> (3)
<com.android.exchange.ExchangeService: void startServiceThread(com.android.emailsync.AbstractSyncService)> (1)
<com.android.exchange.ExchangeService: void waitForConnectivity()> (1)
<com.android.exchange.EasAccountService: void sleep(long,boolean)> (1)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (4)
<com.android.gallery3d.ui.MenuExecutor: void access$600(com.android.gallery3d.ui.MenuExecutor,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handlePollCalls(android.os.AsyncResult)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.Connection: void cancelPostDial()> ()
<com.android.internal.telephony.Connection: void proceedAfterWaitChar()> ()
<com.android.internal.telephony.Connection: void proceedAfterWildChar(java.lang.String)> ()
<com.android.internal.telephony.cdma.CdmaConnection: void onConnectedInOrOut()> (4)
<com.android.internal.telephony.CallTracker: void handlePollCalls(android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,int)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void access$000(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void onConnectedInOrOut()> (2)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)> (1)
<com.android.internal.telephony.CommandsInterface: void acceptCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)> (5)
<com.android.internal.telephony.CommandsInterface: void cancelPendingUssd(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void conference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deactivateDataCall(int,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnRuim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void deleteSmsOnSim(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void dial(java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void exitEmergencyCallbackMode(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void explicitCallTransfer(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getAvailableNetworks(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getBasebandVersion(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCdmaBroadcastConfig(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getCDMASubscription(android.os.Message)> (5)
<com.android.internal.telephony.CommandsInterface: void getCdmaSubscriptionSource(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getCellInfoList(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getCLIR(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getCurrentCalls(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getDataCallList(android.os.Message)> (4)
<com.android.internal.telephony.RIL: void getPDPContextList(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getDataRegistrationState(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getDeviceIdentity(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getGsmBroadcastConfig(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getIccCardStatus(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEI(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMEISV(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getIMSIForApp(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void getIMSI(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getImsRegistrationState(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getLastCallFailCause(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getLastDataCallFailCause(android.os.Message)> (1)
<com.android.internal.telephony.RIL: void getLastPdpFailCause(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getMute(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getNeighboringCids(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getNetworkSelectionMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getOperator(android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void getPreferredNetworkType(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void getPreferredVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getSignalStrength(android.os.Message)> (5)
<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getVoiceRadioTechnology(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getVoiceRegistrationState(android.os.Message)> (8)
<com.android.internal.telephony.CommandsInterface: void handleCallSetupRequestFromSim(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void hangupConnection(int,android.os.Message)> (6)
<com.android.internal.telephony.CommandsInterface: void hangupForegroundResumeBackground(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void hangupWaitingOrBackground(android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (11)
<com.android.internal.telephony.RIL: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void queryCallWaiting(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryCLIP(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void rejectCall(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportSmsMemoryStatus(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void reportStkServiceIsRunning(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void resetRadio(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendCDMAFeatureCode(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void sendCdmaSms(byte[],android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void sendDtmf(char,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void sendEnvelope(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendEnvelopeWithStatus(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendImsCdmaSms(byte[],int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendImsGsmSms(java.lang.String,java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void access$000(com.android.internal.telephony.RIL,boolean)> (1)
<com.android.internal.telephony.RIL: void onRadioAvailable()> (1)
<com.android.internal.telephony.CommandsInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendTerminalResponse(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void sendUSSD(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void separateConnection(int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCallForward(int,int,int,java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCallWaiting(boolean,int,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCdmaSubscriptionSource(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void processUnsolicited(android.os.Parcel)> (1)
<com.android.internal.telephony.CommandsInterface: void setCellInfoListRate(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setCLIR(int,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastActivation(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setInitialAttachApn(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setLocationUpdates(boolean,android.os.Message)> (4)
<com.android.internal.telephony.CommandsInterface: void setMute(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeAutomatic(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void setPreferredNetworkType(int,android.os.Message)> (3)
<com.android.internal.telephony.RIL: void setCurrentPreferredNetworkType()> (2)
<com.android.internal.telephony.CommandsInterface: void setPreferredVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setRadioPower(boolean,android.os.Message)> (7)
<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setSuppServiceNotifications(boolean,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void startDtmf(char,android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void stopDtmf(android.os.Message)> (2)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.RIL: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void switchWaitingOrHoldingAndActive(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToRuim(int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.CellBroadcastHandler: com.android.internal.telephony.CellBroadcastHandler makeCellBroadcastHandler(android.content.Context)> (2)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: void <init>(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: com.android.internal.telephony.gsm.GsmCellBroadcastHandler makeGsmCellBroadcastHandler(android.content.Context,com.android.internal.telephony.PhoneBase)> (2)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.am.ActivityStackSupervisor: void checkReadyForSleepLocked()> (9)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void goingToSleep()> (1)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<com.android.server.am.ActivityManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService$5: void run()> (1)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.ConnectivityManager: boolean requestNetworkTransitionWakelock(java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void access$000(com.android.server.location.GeofenceManager)> (2)
<com.android.server.location.GeofenceManager: void onLocationChanged(android.location.Location)> (1)
<com.android.server.LocationManagerService: void removeProviderLocked(com.android.server.location.LocationProviderInterface)> (2)
<com.android.server.LocationManagerService: void applyRequirementsLocked(java.lang.String)> (5)
<com.android.server.LocationManagerService: void handleLocationChanged(android.location.Location,boolean)> (1)
<com.android.server.LocationManagerService: void switchUser(int)> (1)
<com.android.server.LocationManagerService: void updateProvidersLocked()> (7)
<com.android.server.power.PowerManagerService$2: void run()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: void shutdown(boolean)> (1)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback: void onError(int,java.lang.String)> (2)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy$1: void run()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SipKeepAlive: boolean process(java.util.EventObject)> (1)
<com.android.server.sip.SipService$SipSessionGroupExt: void onConnectivityChanged(boolean)> (1)
<com.android.server.UiModeManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService$4: void onTwilightStateChanged()> (1)
<com.android.server.VibratorService: void access$300(com.android.server.VibratorService)> (3)
<com.android.server.VibratorService: void updateInputDeviceVibrators()> (5)
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver: void init()> (1)
<com.android.server.WiredAccessoryManager$WiredAccessoryObserver: void onUEvent(android.os.UEventObserver$UEvent)> (1)
<com.android.server.input.InputManagerService: void notifySwitch(long,int,int)> ()
<com.android.server.WiredAccessoryManager: void access$000(com.android.server.WiredAccessoryManager)> (1)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (21)
<com.android.server.wm.DragState: void unregister()> (4)
<com.android.server.wm.WindowManagerService: void access$400(com.android.server.wm.WindowManagerService)> (2)
<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)> (6)
<com.android.soundrecorder.Recorder: void clear()> (1)
<com.android.soundrecorder.Recorder: void delete()> (3)
<com.android.soundrecorder.Recorder: void restoreState(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void setState(int)> (4)
<android.content.ISyncStatusObserver$Stub$Proxy: void onStatusChanged(int)> ()
<com.android.server.content.SyncManager$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$SyncHandler: void cancelActiveSyncLocked(android.accounts.Account,int,java.lang.String)> (2)
<com.android.server.content.SyncManager$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.content.SyncManager$8: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(android.content.SyncAdapterType,int,boolean)> (1)
<com.android.server.content.SyncManager: void scheduleLocalSync(android.accounts.Account,int,int,java.lang.String)> (1)
<com.android.server.content.SyncManager: void access$800(com.android.server.content.SyncManager,int)> (2)
<com.android.server.content.SyncManager: void access$1000(com.android.server.content.SyncManager,int)> (1)
<android.content.ISyncContext$Stub$Proxy: void onFinished(android.content.SyncResult)> ()
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<android.media.IAudioService$Stub$Proxy: void dispatchMediaKeyEvent(android.view.KeyEvent)> ()
<android.media.IAudioService$Stub: void dispatchMediaKeyEvent(android.view.KeyEvent)> (2)
<android.media.IAudioService$Stub$Proxy: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> ()
<android.media.IAudioService$Stub: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (2)
<com.android.music.MediaPlaybackService: boolean open(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: void access$1200(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void openCurrentAndNext()> (9)
<com.android.music.MediaPlaybackService: void setRepeatMode(int)> (1)
<com.android.gallery3d.app.MovieActivity$1: void pauseVideo()> (1)
<com.android.gallery3d.app.MoviePlayer: boolean onKeyDown(int,android.view.KeyEvent)> (2)
<com.android.gallery3d.app.MoviePlayer: void access$1000(com.android.gallery3d.app.MoviePlayer)> (2)
<com.android.gallery3d.app.MoviePlayer: void onPlayPause()> (2)
<com.android.gallery3d.app.MoviePlayer: void onResume()> (2)
<com.android.gallery3d.app.TrimVideo: int access$100(com.android.gallery3d.app.TrimVideo)> (1)
<com.android.gallery3d.app.TrimVideo: void onSeekEnd(int,int,int)> (1)
<com.android.gallery3d.app.TrimVideo: void onPlayPause()> (1)
<com.android.gallery3d.app.TrimVideo: void onSeekStart()> (1)
<com.android.music.MediaPlaybackService: void pause()> (4)
<android.filterfw.core.Filter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (43)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void performClose(android.filterfw.core.FilterContext)> (72)
<android.filterpacks.base.CallbackFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void close(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void close(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void close(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<android.media.AudioService$AudioHandler$1: void onCompletion(android.media.MediaPlayer)> (1)
<android.media.AudioService$AudioHandler$2: boolean onError(android.media.MediaPlayer,int,int)> (1)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)> (2)
<android.media.Ringtone: void setStreamType(int)> (6)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> ()
<android.media.RingtoneManager: void stopPreviousRingtone()> ()
<android.preference.VolumePreference$SeekBarVolumizer: void onStopSample()> (1)
<com.android.gallery3d.app.MovieActivity$1: void <init>(android.view.View,com.android.gallery3d.app.MovieActivity,android.net.Uri,android.os.Bundle,boolean)> (1)
<com.android.gallery3d.app.MovieActivity$1: void <init>(com.android.gallery3d.app.MovieActivity,android.view.View,com.android.gallery3d.app.MovieActivity,android.net.Uri,android.os.Bundle,boolean)> (1)
<android.widget.VideoView$7: void surfaceDestroyed(android.view.SurfaceHolder)> (1)
<android.widget.VideoView: void access$2100(android.widget.VideoView)> (1)
<android.widget.VideoView: void resume()> (2)
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)> (1)
<com.android.gallery3d.app.MoviePlayer: void onPause()> (2)
<com.android.gallery3d.app.TrimVideo: void onPause()> (1)
<com.android.gallery3d.app.MovieActivity$1: void onDestroy()> (1)
<com.android.gallery3d.app.MovieActivity: void onDestroy()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onPause()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void updateSetupStepView()> (4)
<com.android.deskclock.alarms.AlarmService: void onDestroy()> (1)
<com.android.music.AudioPreview: void onDestroy()> (1)
<com.android.music.AudioPreview: void onUserLeaveHint()> (1)
<com.android.music.MediaPlaybackService: void onDestroy()> (1)
<com.android.soundrecorder.Recorder: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.soundrecorder.Recorder: void onCompletion(android.media.MediaPlayer)> (1)
<com.android.soundrecorder.Recorder: void startRecording(int,java.lang.String,android.content.Context)> (1)
<com.android.soundrecorder.SoundRecorder: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.soundrecorder.SoundRecorder: void onPause()> (1)
<com.android.soundrecorder.SoundRecorder: void onStop()> (1)
<com.android.soundrecorder.SoundRecorder: void updateTimeRemaining()> (1)
<com.android.music.MediaPlaybackService: void stop(boolean)> (8)
<com.android.internal.policy.impl.PhoneWindowManager: void access$200(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.server.DockObserver: void access$000(com.android.server.DockObserver)> (2)
<com.android.server.power.Notifier: void access$700(com.android.server.power.Notifier)> (2)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<android.speech.tts.AudioPlaybackHandler$MessageLoop: void run()> (1)
<com.android.gallery3d.app.MovieActivity$1: void playVideo()> (1)
<com.android.gallery3d.app.MovieActivity$1: void startVideo()> (1)
<com.android.gallery3d.app.MoviePlayer: void access$800(com.android.gallery3d.app.MoviePlayer)> (3)
<com.android.gallery3d.app.MoviePlayer: void onReplay()> (2)
<com.android.gallery3d.app.TrimVideo: void onCreate(android.os.Bundle)> (1)
<com.android.gallery3d.app.TrimVideo: void onReplay()> (1)
<com.android.music.AudioPreview$PreviewPlayer: void onPrepared(android.media.MediaPlayer)> (1)
<com.android.music.AudioPreview: void access$700(com.android.music.AudioPreview)> (1)
<com.android.music.MediaPlaybackService: void play()> (10)
<com.android.bluetooth.map.BluetoothMapService: void access$900(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.map.BluetoothMapService: void stopObexServerSession()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void access$400(com.android.bluetooth.opp.BluetoothOppTransfer)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.deskclock.AlarmClockFragment: com.android.deskclock.provider.AlarmInstance setupAlarmInstance(android.content.Context,com.android.deskclock.provider.Alarm)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void fixAlarmInstances(android.content.Context)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void handleIntent(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void updateParentAlarm(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (2)
<com.android.deskclock.HandleApiCalls: void setupInstance(com.android.deskclock.provider.AlarmInstance,boolean)> (1)
<com.android.deskclock.DeskClock$TabsAdapter: void notifySelectedPage(int)> (1)
<com.android.deskclock.DeskClock$TabsAdapter: void onPageSelected(int)> (1)
<com.android.deskclock.DeskClock: void registerPageChangedListener(com.android.deskclock.DeskClockFragment)> (2)
<com.android.exchange.ExchangeService: long checkMailboxes()> (1)
<com.android.emailsync.SyncManager: void startManualSync(long,int,com.android.emailsync.Request)> (3)
<com.android.exchange.ExchangeService: void requestSync(com.android.emailcommon.provider.Mailbox,int,com.android.emailsync.Request)> (1)
<com.android.exchange.EasAccountService: void runPingLoop()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int,boolean)> (1)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (3)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (6)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void acceptCall()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Connection dial(java.lang.String)> ()
<com.android.internal.telephony.gsm.GsmConnection: boolean update(com.android.internal.telephony.DriverCall)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void acceptCall()> (2)
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void sendSmsAckForEnvelopeResponse(com.android.internal.telephony.uicc.IccIoResult,int,int)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void handleStatusReport(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void acknowledgeSmsWithError(int)> (3)
<com.android.internal.telephony.gsm.GsmMmiCode: void cancel()> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void processCode()> (2)
<com.android.internal.telephony.uicc.UiccCardApplication: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.uicc.UiccCardApplication: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void changeIccPin(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void conference()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDefaultState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DataConnection: void tearDownData(java.lang.Object)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.CommandsInterface: void dial(java.lang.String,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void exitEmergencyCallbackMode()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void explicitCallTransfer()> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void explicitCallTransfer()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getAvailableNetworks(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getAvailableNetworks(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.uicc.RuimRecords: void onReady()> (2)
<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()> (3)
<com.android.internal.telephony.gsm.GSMPhone: void getOutgoingCallerIdDisplay(android.os.Message)> ()
<com.android.internal.telephony.CallTracker: void pollCallsWhenSafe()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void operationComplete()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getDataCallList(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getDataCallList(android.os.Message)> ()
<com.android.internal.telephony.CommandsInterface: void getPDPContextList(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (1)
<com.android.internal.telephony.uicc.RuimRecords: void fetchRuimRecords()> (3)
<com.android.internal.telephony.uicc.SIMRecords: void fetchSimRecords()> (3)
<com.android.internal.telephony.CommandsInterface: void getIMSI(android.os.Message)> ()
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void getLastPdpFailCause(android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void getNeighboringCids(android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void getPreferredNetworkType(android.os.Message)> (6)
<com.android.internal.telephony.ServiceStateTracker: void reRegisterNetwork(android.os.Message)> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void getSmscAddress(android.os.Message)> (6)
<com.android.internal.telephony.cat.CatService: void handleCmdResponse(com.android.internal.telephony.cat.CatResponseMessage)> (1)
<com.android.internal.telephony.cat.CatService: void handleCommand(com.android.internal.telephony.cat.CommandParams,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupAllConnections(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaConnection)> (4)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)> ()
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupAllConnections(com.android.internal.telephony.gsm.GsmCall)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmConnection)> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupForegroundResumeBackground()> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangup(com.android.internal.telephony.cdma.CdmaCall)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void hangupWaitingOrBackground()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangup(com.android.internal.telephony.gsm.GsmCall)> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void hangupWaitingOrBackground()> (2)
<com.android.internal.telephony.uicc.IccFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (8)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (6)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (6)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (12)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (10)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFTransparent(int,android.os.Message)> (10)
<com.android.internal.telephony.uicc.IccFileHandler: void loadEFTransparent(int,int,android.os.Message)> (6)
<com.android.internal.telephony.uicc.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (10)
<com.android.internal.telephony.uicc.IccFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (7)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestRaw(byte[],android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void queryAvailableBandMode(android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void getCallForwardingOption(int,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void getCallWaiting(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getCallWaiting(android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void queryCdmaRoamingPreference(android.os.Message)> (6)
<com.android.internal.telephony.uicc.UiccCardApplication: void queryFdn()> (2)
<com.android.internal.telephony.uicc.UiccCardApplication: void queryPin1State()> (2)
<com.android.internal.telephony.CommandsInterface: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void queryTTYMode(android.os.Message)> (6)
<com.android.internal.telephony.cdma.CdmaCallTracker: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void rejectCall()> (2)
<com.android.internal.telephony.SmsStorageMonitor$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void flashAndSetGenericTrue()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void switchWaitingOrHoldingAndActive()> (2)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1: void sendScpResults()> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void sendDtmf(char)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendDtmf(char)> ()
<com.android.internal.telephony.cat.CatService: void sendMenuSelection(int,boolean)> (1)
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: void handleDataDownload(com.android.internal.telephony.gsm.SmsMessage)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.RIL$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.BaseCommands: void onRadioAvailable()> (3)
<com.android.internal.telephony.cat.CatService: void sendTerminalResponse(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.ResultCode,boolean,int,com.android.internal.telephony.cat.ResponseData)> (3)
<com.android.internal.telephony.gsm.GsmMmiCode: void sendUssd(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void separate(com.android.internal.telephony.cdma.CdmaConnection)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void separate(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.PhoneBase: void setBandMode(int,android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void setCallWaiting(boolean,android.os.Message)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCdmaBroadcastActivation(boolean)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.PhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (6)
<com.android.internal.telephony.PhoneBase: void setCdmaSubscription(int,android.os.Message)> (6)
<com.android.internal.telephony.RIL: void processResponse(android.os.Parcel)> (1)
<com.android.internal.telephony.PhoneBase: void setCellInfoListRate(int)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void setOutgoingCallerIdDisplay(int,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: void syncClirSetting()> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCellBroadcastActivation(boolean)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCellBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void setInitialAttachApn()> (1)
<com.android.internal.telephony.ServiceStateTracker: void disableLocationUpdates()> (3)
<com.android.internal.telephony.ServiceStateTracker: void disableSingleLocationUpdate()> (4)
<com.android.internal.telephony.ServiceStateTracker: void enableLocationUpdates()> (3)
<com.android.internal.telephony.ServiceStateTracker: void enableSingleLocationUpdate()> (3)
<com.android.internal.telephony.cdma.CdmaCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GsmCallTracker: void setMute(boolean)> (3)
<com.android.internal.telephony.gsm.GSMPhone: void setNetworkSelectionModeAutomatic(android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void restoreSavedNetworkSelection(android.os.Message)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> ()
<com.android.internal.telephony.PhoneBase: void setPreferredNetworkType(int,android.os.Message)> (6)
<com.android.internal.telephony.BaseCommands: void setCurrentPreferredNetworkType()> (3)
<com.android.internal.telephony.CommandsInterface: void setCurrentPreferredNetworkType()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.PhoneProxy: void phoneObjectUpdater(int)> (2)
<com.android.internal.telephony.uicc.RuimRecords: void handleRuimRefresh(com.android.internal.telephony.uicc.IccRefreshResponse)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void handleSimRefresh(com.android.internal.telephony.uicc.IccRefreshResponse)> (1)
<com.android.internal.telephony.PhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> (6)
<com.android.internal.telephony.gsm.GSMPhone: void registerForSuppServiceNotification(android.os.Handler,int,java.lang.Object)> ()
<com.android.internal.telephony.gsm.GSMPhone: void unregisterForSuppServiceNotification(android.os.Handler)> ()
<com.android.internal.telephony.PhoneBase: void setTTYMode(int,android.os.Message)> (6)
<com.android.internal.telephony.dataconnection.DataConnection: void onConnect(com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void startDtmf(char)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void startDtmf(char)> ()
<com.android.internal.telephony.cdma.CDMAPhone: void stopDtmf()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void stopDtmf()> ()
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin2(java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CommandsInterface: void supplyIccPin(java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.CommandsInterface: void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.uicc.UiccCardApplication: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void switchWaitingOrHoldingAndActive()> (5)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.UsimDataDownloadHandler: int handleUsimDataDownload(com.android.internal.telephony.uicc.UsimServiceTable,com.android.internal.telephony.gsm.SmsMessage)> (1)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: com.android.internal.telephony.CellBroadcastHandler makeCellBroadcastHandler(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void onUpdatePhoneObject(com.android.internal.telephony.PhoneBase)> (1)
<com.android.server.am.ActivityStackSupervisor: void activitySleptLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void completePauseLocked()> (1)
<com.android.server.am.ActivityStackSupervisor: void scheduleSleepTimeout()> (1)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.power.Notifier: void sendGoToSleepBroadcast(int)> (1)
<android.app.IActivityManager: boolean shutdown(int)> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void exit()> (1)
<com.android.server.location.GeofenceManager: void scheduleUpdateFencesLocked()> (3)
<com.android.server.LocationManagerService: void applyAllProviderRequirementsLocked()> (1)
<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)> (4)
<com.android.server.LocationManagerService: void access$1600(com.android.server.LocationManagerService,android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService: void access$400(com.android.server.LocationManagerService,int)> (1)
<com.android.server.LocationManagerService: void access$300(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void systemRunning()> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)> (2)
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy$2: void run()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SipKeepAlive: void onError(android.net.sip.ISipSession,int,java.lang.String)> (2)
<com.android.server.sip.SipSessionGroup$SipSessionImpl: boolean process(java.util.EventObject)> (2)
<com.android.server.TwilightService$TwilightListener: void onTwilightStateChanged()> (1)
<com.android.server.VibratorService$3: void run()> (1)
<com.android.server.VibratorService$VibrateThread: void run()> (2)
<com.android.server.VibratorService$Vibration: void binderDied()> (1)
<com.android.server.VibratorService: void access$400(com.android.server.VibratorService)> (2)
<com.android.server.VibratorService: void onInputDeviceAdded(int)> (1)
<com.android.server.VibratorService: void onInputDeviceChanged(int)> (1)
<com.android.server.VibratorService: void onInputDeviceRemoved(int)> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<com.android.server.WiredAccessoryManager$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration()> (2)
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)> (3)
<com.android.server.wm.WindowManagerService: void access$300(com.android.server.wm.WindowManagerService)> (5)
<com.android.server.wm.WindowManagerService: void addTask(int,int,boolean)> (1)
<com.android.server.wm.WindowManagerService: void createStack(int,int,int,float)> (2)
<com.android.server.wm.WindowManagerService: void moveStackWindowsLocked(com.android.server.wm.DisplayContent)> (1)
<com.android.server.wm.WindowManagerService: void reevaluateStatusBarVisibility()> (1)
<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)> (4)
<com.android.server.wm.WindowManagerService: void resizeStackBox(int,float)> (1)
<com.android.server.wm.WindowManagerService: void setCurrentUser(int)> (1)
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.wm.WindowManagerService: void setUniverseTransformLocked(com.android.server.wm.WindowState,float,float,float,float,float,float,float)> (1)
<com.android.server.wm.DragState: void endDragLw()> (3)
<com.android.server.wm.Session: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.WindowManagerService: android.os.IBinder prepareDragSurface(android.view.IWindow,android.view.SurfaceSession,int,int,int,android.view.Surface)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)> (3)
<com.android.server.wm.WindowAnimator: void testTokenMayBeDrawnLocked(int)> (1)
<com.android.soundrecorder.SoundRecorder$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.soundrecorder.SoundRecorder: void onCreate(android.os.Bundle)> (1)
<com.android.soundrecorder.Recorder: void stopRecording()> (1)
<com.android.server.content.SyncStorageEngine$OnSyncRequestListener: void onSyncRequest(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.content.SyncManager$9: void onServiceChanged(java.lang.Object,int,boolean)> (1)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void dispatchMediaKeyEvent(android.view.KeyEvent)> (3)
<android.media.IAudioService: void dispatchMediaKeyEventUnderWakelock(android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: int removeTracksInternal(int,int)> (2)
<com.android.music.MediaPlaybackService: void access$400(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.MediaPlaybackService: void gotoNext(boolean)> (5)
<com.android.music.MediaPlaybackService: void open(long[],int)> (1)
<com.android.music.MediaPlaybackService: void prev()> (3)
<com.android.music.MediaPlaybackService: void reloadQueue()> (2)
<com.android.music.MediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.MediaPlaybackService: void setShuffleMode(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setRepeatMode(int)> (2)
<com.android.gallery3d.app.MovieActivity$1: void access$1000(com.android.gallery3d.app.MoviePlayer)> (1)
<com.android.gallery3d.app.MoviePlayer$AudioBecomingNoisyReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onPlayPause()> (3)
<com.android.gallery3d.app.MovieActivity$1: void onPlayPause()> (1)
<com.android.gallery3d.app.MovieActivity$1: void onResume()> (1)
<com.android.gallery3d.app.MovieActivity: void onResume()> (1)
<com.android.gallery3d.app.TrimVideo$2: void run()> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onSeekEnd(int,int,int)> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onSeekStart()> (1)
<com.android.music.MediaPlaybackService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void pause()> (2)
<android.filterfw.core.Filter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BitmapOverlayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ContrastFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: void close()> ()
<android.filterfw.core.FilterGraph: void closeFilters(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performTearDown(android.filterfw.core.FilterContext)> (70)
<android.filterpacks.base.CallbackFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performClose(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performClose(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)> (9)
<android.preference.VolumePreference$SeekBarVolumizer: void initSeekBar(android.widget.SeekBar,android.net.Uri)> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: void <init>(android.content.Context)> (1)
<com.android.gallery3d.app.MovieActivity: void onCreate(android.os.Bundle)> (1)
<android.widget.VideoView$7: void surfaceCreated(android.view.SurfaceHolder)> (1)
<com.android.gallery3d.app.TrimVideo: void onResume()> (1)
<android.widget.VideoView: void setVideoURI(android.net.Uri)> (4)
<com.android.gallery3d.app.MovieActivity$1: void onPause()> (1)
<com.android.gallery3d.app.MovieActivity: void onPause()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onBackPressed()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onClick(android.view.View)> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onResume()> (1)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void onWindowFocusChanged(boolean)> (1)
<com.android.soundrecorder.SoundRecorder: void updateTimerView()> (2)
<com.android.music.MediaPlaybackService: void closeExternalStorageFiles(java.lang.String)> (1)
<com.android.music.MediaPlaybackService: void stop()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.server.power.Notifier: void onWirelessChargingStarted()> (1)
<com.android.gallery3d.app.MovieActivity$1: void access$800(com.android.gallery3d.app.MoviePlayer)> (1)
<com.android.gallery3d.app.MoviePlayer$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.MoviePlayer$9: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.ControllerOverlay$Listener: void onReplay()> (2)
<com.android.gallery3d.app.MovieActivity$1: void onReplay()> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void play()> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean start()> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1000(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.deskclock.AlarmClockFragment: com.android.deskclock.provider.AlarmInstance access$4600(android.content.Context,com.android.deskclock.provider.Alarm)> (2)
<com.android.deskclock.AlarmInitReceiver$1: void run()> (1)
<com.android.deskclock.alarms.AlarmStateManager: void access$000(com.android.deskclock.alarms.AlarmStateManager,android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.alarms.AlarmStateManager: void setDismissState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (4)
<com.android.deskclock.alarms.AlarmStateManager: void setMissedState(android.content.Context,com.android.deskclock.provider.AlarmInstance)> (3)
<com.android.deskclock.HandleApiCalls: void handleSetAlarm(android.content.Intent)> (1)
<com.android.deskclock.DeskClock: void createTabs(int)> (1)
<com.android.deskclock.timer.TimerFragment: void onResume()> (1)
<com.android.emailsync.SyncManager: void sendRequest(long,com.android.emailsync.Request)> (2)
<com.android.emailsync.SyncManager: void serviceRequest(long,long,int)> (2)
<com.android.exchange.ExchangeService: void startManualSync(long,int,com.android.emailsync.Request)> (2)
<com.android.exchange.EasAccountService: void sync()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse executePostWithTimeout(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,int)> (1)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (4)
<com.android.exchange.adapter.AttachmentLoader: void loadAttachment()> (1)
<com.android.exchange.adapter.EmailSyncAdapter: int getEstimate(java.lang.String)> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (2)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,org.apache.http.HttpEntity,int)> (2)
<com.android.exchange.EasSyncService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (10)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void acceptCall()> (1)
<com.android.internal.telephony.PhoneProxy: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallHoldIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void acceptCall()> ()
<com.android.internal.telephony.InboundSmsHandler: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.MmiCode: void cancel()> ()
<com.android.internal.telephony.gsm.GSMPhone: boolean handlePinMmi(java.lang.String)> ()
<com.android.internal.telephony.cdma.CdmaMmiCode: void processCode()> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void conference()> (1)
<com.android.internal.telephony.dataconnection.DataConnection: void access$5200(com.android.internal.telephony.dataconnection.DataConnection,java.lang.Object)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> ()
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.cdma.CDMAPhone$1: void run()> (1)
<com.android.internal.telephony.PhoneBase: void exitEmergencyCallbackMode()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void explicitCallTransfer()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void getAvailableNetworks(android.os.Message)> ()
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<com.android.internal.telephony.uicc.IccRecords: void onReady()> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.PhoneBase: java.util.List getAllCellInfo()> (6)
<com.android.internal.telephony.CallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.gsm.GsmCallTracker: void pollCallsWhenSafe()> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getDataCallList(android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimRecords: void onRefresh(boolean,int[])> (1)
<com.android.internal.telephony.uicc.SIMRecords: void handleFileUpdate(int)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void onReady()> (2)
<com.android.internal.telephony.uicc.SIMRecords: void onRefresh(boolean,int[])> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getPreferredNetworkType(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getPreferredNetworkType(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void reRegisterNetwork(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void reRegisterNetwork(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void reRegisterNetwork(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (4)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getSmscAddress(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getSmscAddress(android.os.Message)> (2)
<com.android.internal.telephony.cat.CatService: void handleRilMsg(com.android.internal.telephony.cat.RilMessage)> (1)
<com.android.internal.telephony.cdma.CdmaCallTracker: void dispose()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void dispose()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallWaitingIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GsmCall: void hangup()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.uicc.AdnRecordLoader: void updateEF(com.android.internal.telephony.uicc.AdnRecord,int,int,int,java.lang.String,android.os.Message)> (6)
<com.android.internal.telephony.uicc.CsimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void getEFLinearRecordSize(int,android.os.Message)> (1)
<com.android.internal.telephony.cat.IconLoader: void readId()> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFImgLinearFixed(int,android.os.Message)> (1)
<com.android.internal.telephony.cat.IconLoader: void readClut()> (1)
<com.android.internal.telephony.cat.IconLoader: void readIconData()> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFImgTransparent(int,int,int,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readEmailFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readIapFileAndWait(int)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readPbrFileAndWait()> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.uicc.AdnRecordLoader: void loadAllFromEF(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimUiccRecords: void fetchIsimRecords()> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFLinearFixedAll(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.AdnRecordLoader: void loadFromEF(int,int,int,android.os.Message)> (3)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFLinearFixed(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void getSpnFsm(boolean,android.os.AsyncResult)> (2)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFTransparent(int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void loadEFTransparent(int,int,android.os.Message)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void markMessagesAsRead(java.util.ArrayList)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.CsimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.IsimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.uicc.UsimFileHandler: void updateEFTransparent(int,byte[],android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void invokeOemRilRequestRaw(byte[],android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.Phone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryAvailableBandMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryAvailableBandMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void getCallWaiting(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryCdmaRoamingPreference(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryCdmaRoamingPreference(android.os.Message)> (2)
<com.android.internal.telephony.uicc.UiccCardApplication: void <init>(com.android.internal.telephony.uicc.UiccCard,com.android.internal.telephony.uicc.IccCardApplicationStatus,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.uicc.UiccCardApplication: void update(com.android.internal.telephony.uicc.IccCardApplicationStatus,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void queryTTYMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void queryTTYMode(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void rejectCall()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void rejectCall()> ()
<com.android.internal.telephony.PhoneBase: void requestIsimAuthentication(java.lang.String,android.os.Message)> (5)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (4)
<com.android.internal.telephony.cdma.CdmaCallTracker: void conference()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void switchHoldingAndActive()> (1)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void sendDtmf(char)> (1)
<com.android.internal.telephony.BaseCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (3)
<com.android.internal.telephony.sip.SipCommandInterface: void onRadioAvailable()> (1)
<com.android.internal.telephony.test.SimulatedCommands: void onRadioAvailable()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void sendUssdResponse(java.lang.String)> ()
<com.android.internal.telephony.cdma.CdmaConnection: void separate()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void separate()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setBandMode(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setBandMode(int,android.os.Message)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCdmaBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCdmaBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean access$200(com.android.internal.telephony.IccSmsInterfaceManager,com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaRoamingPreference(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCdmaRoamingPreference(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCdmaSubscription(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCdmaSubscription(int,android.os.Message)> (2)
<com.android.internal.telephony.RIL: void access$500(com.android.internal.telephony.RIL,android.os.Parcel)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setCellInfoListRate(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.Phone: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.sip.SipPhone: void setCellInfoListRate(int)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableGsmBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableGsmBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean access$100(com.android.internal.telephony.IccSmsInterfaceManager,com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void setInitialAttachApn()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void disableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableLocationUpdates()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void enableSingleLocationUpdate()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setMute(boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setMute(boolean)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void restoreSavedNetworkSelection(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void restoreSavedNetworkSelection(android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,android.os.Message)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPreferredNetworkType(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setPreferredNetworkType(int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipCommandInterface: void setCurrentPreferredNetworkType()> (2)
<com.android.internal.telephony.test.SimulatedCommands: void setCurrentPreferredNetworkType()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.PhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (4)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setSmscAddress(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setSmscAddress(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setTTYMode(int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void setTTYMode(int,android.os.Message)> (2)
<com.android.internal.telephony.dataconnection.DataConnection: void access$3100(com.android.internal.telephony.dataconnection.DataConnection,com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void startDtmf(char)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void stopDtmf()> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPin2(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPin(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void switchHoldingAndActive()> ()
<com.android.internal.telephony.ISms$Stub$Proxy: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> ()
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void onUpdatePhoneObject(com.android.internal.telephony.PhoneBase)> (3)
<com.android.server.am.ActivityStack: void activityPausedLocked(android.os.IBinder,boolean)> (3)
<com.android.server.power.Notifier: void sendNextBroadcast()> (3)
<com.android.server.power.ShutdownThread: void run()> (2)
<com.android.server.location.GeofenceManager: void addFence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,int,int,java.lang.String)> (1)
<com.android.server.location.GeofenceManager: void removeFence(android.location.Geofence,android.app.PendingIntent)> (2)
<com.android.server.location.GeofenceManager: void removeFence(java.lang.String)> ()
<com.android.server.LocationManagerService: void access$200(com.android.server.LocationManagerService)> (1)
<com.android.server.LocationManagerService: void access$1300(com.android.server.LocationManagerService,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)> (2)
<com.android.server.LocationManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.LocationManagerService$2: void onChange(boolean)> (1)
<com.android.internal.policy.impl.GlobalActions$2: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void processCommand(java.util.EventObject)> (2)
<com.android.server.sip.SipSessionGroup: void process(java.util.EventObject)> (6)
<com.android.server.TwilightService$TwilightListenerRecord: void run()> (1)
<com.android.server.VibratorService$1: void onChange(boolean)> (1)
<com.android.server.VibratorService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (1)
<com.android.server.wm.WindowManagerService: int handleAppTransitionReadyLocked(com.android.server.wm.WindowList)> (1)
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> (8)
<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)> (2)
<com.android.server.wm.WindowManagerService: void requestTraversalLocked()> (5)
<com.android.server.am.ActivityStackSupervisor: void moveTaskToStack(int,int,boolean)> (1)
<com.android.server.am.ActivityManagerService: void setWindowManager(com.android.server.wm.WindowManagerService)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void reevaluateStatusBarVisibility()> (3)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<com.android.server.wm.WindowManagerService$DragInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> ()
<android.view.IWindowSession$Stub: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.Session: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager$Stub$Proxy: void startFreezingScreen(int,int)> ()
<android.view.IWindowManager$Stub: void startFreezingScreen(int,int)> (2)
<com.android.server.wm.WindowAnimator: void animateLocked()> (1)
<com.android.server.content.SyncStorageEngine: void requestSync(android.accounts.Account,int,int,java.lang.String,android.os.Bundle)> (3)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)> ()
<com.android.commands.media.Media: void sendMediaKey(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: void handleMediaKeyEvent(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLockToAudioService(android.view.KeyEvent)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void openFile(java.lang.String)> ()
<com.android.music.IMediaPlaybackService$Stub: void openFile(java.lang.String)> (2)
<com.android.music.MediaPlaybackService: int removeTrack(long)> (1)
<com.android.music.MediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void enqueue(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void next()> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void open(long[],int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void prev()> (2)
<com.android.music.MediaPlaybackService: void access$2300(com.android.music.MediaPlaybackService)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void setQueuePosition(int)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: void setShuffleMode(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setRepeatMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setRepeatMode(int)> (2)
<com.android.gallery3d.app.CommonControllerOverlay: void onClick(android.view.View)> (3)
<com.android.gallery3d.app.MovieControllerOverlay: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.app.TrimControllerOverlay: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.gallery3d.app.CommonControllerOverlay: void onScrubbingEnd(int,int,int)> (3)
<com.android.gallery3d.app.CommonControllerOverlay: void onScrubbingStart()> (3)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void pause()> ()
<com.android.music.IMediaPlaybackService$Stub: void pause()> (2)
<android.filterfw.core.FieldPort: void transfer(android.filterfw.core.FilterContext)> (3)
<android.filterpacks.base.CallbackFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.SyncRunner: void close()> (3)
<android.filterfw.core.FilterFunction: void tearDown()> (1)
<android.filterfw.core.FilterGraph: void tearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.base.CallbackFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performTearDown(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performTearDown(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<com.android.calendar.GeneralPreferences: java.lang.String getRingtoneTitleFromUri(android.content.Context,java.lang.String)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: java.lang.String getRingToneTitle(android.net.Uri)> (1)
<com.android.email.activity.setup.AccountSettingsFragment$1: void run()> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void setRingtone(android.net.Uri)> (1)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int,android.net.Uri)> (1)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: void onStart()> (1)
<android.widget.VideoView: void setVideoPath(java.lang.String)> ()
<com.android.soundrecorder.SoundRecorder: void access$000(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void updateUi()> (5)
<com.android.music.MediaPlaybackService$5: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: void stop()> (2)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void play()> ()
<com.android.music.IMediaPlaybackService$Stub: void play()> (2)
<com.android.bluetooth.btservice.ProfileService: boolean start()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.deskclock.AlarmClockFragment$8: com.android.deskclock.provider.AlarmInstance doInBackground(java.lang.Void[])> (1)
<com.android.deskclock.AlarmClockFragment$9: com.android.deskclock.provider.AlarmInstance doInBackground(java.lang.Void[])> (1)
<com.android.deskclock.alarms.AlarmStateManager$1: void run()> (1)
<com.android.deskclock.alarms.AlarmActivity: void dismiss()> (2)
<com.android.deskclock.HandleApiCalls: void onCreate(android.os.Bundle)> (1)
<com.android.deskclock.DeskClock: void initViews()> (1)
<com.android.emailsync.SyncManager: void sendMessageRequest(com.android.emailsync.Request)> (3)
<com.android.exchange.ExchangeService: void sendRequest(long,com.android.emailsync.Request)> (1)
<com.android.emailsync.SyncManager: void serviceRequest(long,int)> (2)
<com.android.exchange.ExchangeService: void serviceRequest(long,long,int)> (1)
<com.android.exchange.EasAccountService: int parsePingResult(java.io.InputStream,android.content.ContentResolver,java.util.HashMap)> (1)
<com.android.exchange.EasAccountService: void run()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse postAutodiscover(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpPost,boolean)> (1)
<com.android.exchange.EasSyncService: android.os.Bundle tryAutodiscover(android.content.Context,com.android.emailcommon.provider.HostAuth)> (3)
<com.android.exchange.adapter.EmailSyncAdapter: void getAutomaticLookback()> ()
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendPing(byte[],int)> (1)
<com.android.exchange.EasOutboxService: int sendMessage(java.io.File,long)> (1)
<com.android.exchange.EasAccountService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (2)
<com.android.exchange.EasOutboxService: com.android.exchange.EasResponse sendHttpClientPost(java.lang.String,byte[])> (1)
<com.android.exchange.EasSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.EasSyncService: boolean sendSettings()> (3)
<com.android.exchange.EasSyncService: com.android.exchange.adapter.ProvisionParser canProvision(com.android.exchange.EasSyncService)> (4)
<com.android.exchange.EasSyncService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (3)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvisionImpl(com.android.exchange.EasSyncService,java.lang.String,java.lang.String,boolean)> (4)
<com.android.exchange.EasSyncService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (3)
<com.android.exchange.EasSyncService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (3)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (7)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void acceptCall()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleInCallMmiCommands(java.lang.String)> (1)
<com.android.internal.telephony.InboundSmsHandler: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (3)
<com.android.internal.telephony.cdma.CDMAPhone: boolean handlePinMmi(java.lang.String)> (1)
<com.android.internal.telephony.IccCard: void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccCard: void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.gsm.GSMPhone: boolean handleMultipartyIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActiveState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.ISms: boolean updateMessageOnIccEf(java.lang.String,int,int,byte[])> (2)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.Phone: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.sip.SipPhone: void exitEmergencyCallbackMode()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> (1)
<com.android.internal.telephony.gsm.GSMPhone: boolean handleEctIncallSupplementaryService(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: android.telephony.CellLocation getCellLocation()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.gsm.GSMPhone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.Phone: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.sip.SipPhone: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioAvailable()> (2)
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.gsm.GsmCallTracker: void handleRadioNotAvailable()> (1)
<com.android.internal.telephony.uicc.IccRecords: void onRefresh(boolean,int[])> ()
<com.android.internal.telephony.PhoneProxy: void getPreferredNetworkType(android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.Phone: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void getEnhancedVoicePrivacy(android.os.Message)> (2)
<com.android.internal.telephony.PhoneProxy: void getSmscAddress(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void dispose()> (2)
<com.android.internal.telephony.gsm.GSMPhone: void dispose()> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: int[] getAdnRecordsSize(int)> (3)
<com.android.internal.telephony.IIccPhoneBook$Stub: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.uicc.AdnRecord,int,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.uicc.AdnRecord,com.android.internal.telephony.uicc.AdnRecord,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (3)
<com.android.internal.telephony.uicc.SIMRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.SIMRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cat.IconLoader: void startLoadingIcon(int)> (3)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: java.util.ArrayList loadEfFilesFromUsim()> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: java.util.List getAllMessagesFromIccEf(java.lang.String)> ()
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf(java.lang.String)> (2)
<com.android.internal.telephony.uicc.AdnRecordCache: void requestLoadAllAdnLike(int,int,android.os.Message)> (2)
<com.android.internal.telephony.uicc.IsimUiccRecords: void onReady()> (2)
<com.android.internal.telephony.uicc.IccRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)> (7)
<com.android.internal.telephony.uicc.IccRecords: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestRaw(byte[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void queryAvailableBandMode(android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void queryCdmaRoamingPreference(android.os.Message)> (1)
<com.android.internal.telephony.uicc.UiccCard: void update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)> (2)
<com.android.internal.telephony.PhoneProxy: void queryTTYMode(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void rejectCall()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void requestIsimAuthentication(java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void switchHoldingAndActive()> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void sendRetrySms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendRawPdu(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (3)
<com.android.internal.telephony.RIL: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (3)
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (4)
<com.android.internal.telephony.PhoneProxy: void setBandMode(int,android.os.Message)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)> (3)
<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: boolean finishUpdate()> (1)
<com.android.internal.telephony.PhoneProxy: void setCdmaRoamingPreference(int,android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void setCdmaSubscription(int,android.os.Message)> (1)
<com.android.internal.telephony.RIL$RILReceiver: void run()> (1)
<com.android.internal.telephony.PhoneProxy: void setCellInfoListRate(int)> (1)
<com.android.internal.telephony.IccCard: void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccCard: void setIccLockEnabled(boolean,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: boolean finishUpdate()> (1)
<com.android.internal.telephony.dataconnection.DcTracker: void onApnChanged()> (3)
<com.android.internal.telephony.dataconnection.DcTracker: void onRecordsLoaded()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void disableLocationUpdates()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void disableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void enableLocationUpdates()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void enableLocationUpdates()> ()
<com.android.internal.telephony.cdma.CDMAPhone: void updateServiceLocation()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updateServiceLocation()> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void setMute(boolean)> (1)
<com.android.internal.telephony.PhoneProxy: void setPreferredNetworkType(int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.Phone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.sip.SipPhone: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (2)
<com.android.internal.telephony.Phone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.PhoneProxy: void setSmscAddress(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.PhoneProxy: void setTTYMode(int,android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcInactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.IccCard: void supplyPin2(java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccCard: void supplyPin(java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccCard: void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccCard: void supplyPuk(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.IccCard: void supplyNetworkDepersonalization(java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.ISms: boolean copyMessageToIccEf(java.lang.String,int,byte[],byte[])> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void onUpdatePhoneObject(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: boolean processMessage(android.os.Message)> (1)
<com.android.server.power.Notifier: void access$500(com.android.server.power.Notifier)> (4)
<com.android.server.power.Notifier: void sendWakeUpBroadcast()> (1)
<com.android.server.LocationManagerService$1: void onOpChanged(int,java.lang.String)> (1)
<com.android.server.LocationManagerService$4: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.LocationManagerService$Receiver: void binderDied()> (1)
<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked(boolean)> (3)
<android.location.ILocationManager$Stub$Proxy: void reportLocation(android.location.Location,boolean)> ()
<android.location.ILocationManager$Stub: void reportLocation(android.location.Location,boolean)> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: boolean onLongPress()> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: void processCommand(java.util.EventObject)> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void access$1600(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)> (2)
<com.android.server.sip.SipSessionGroup: void processDialogTerminated(javax.sip.DialogTerminatedEvent)> ()
<com.android.server.sip.SipSessionGroup: void processIOException(javax.sip.IOExceptionEvent)> ()
<com.android.server.sip.SipSessionGroup: void processResponse(javax.sip.ResponseEvent)> ()
<com.android.server.sip.SipSessionGroup: void processTimeout(javax.sip.TimeoutEvent)> ()
<com.android.server.sip.SipSessionGroup: void processTransactionTerminated(javax.sip.TransactionTerminatedEvent)> ()
<android.app.ActivityManagerNative: void updateConfiguration(android.content.res.Configuration)> (2)
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> ()
<android.view.IWindowManager$Stub: void prepareAppTransition(int,boolean)> (2)
<com.android.server.am.ActivityStack: boolean moveTaskToBackLocked(int,com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.ActivityRecord,android.os.Bundle)> (2)
<com.android.server.am.ActivityStack: void updateTransitLocked(int,android.os.Bundle)> (1)
<com.android.server.wm.WindowManagerService: void updateResizingWindows(com.android.server.wm.WindowState)> (1)
<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl createSurfaceLocked()> (1)
<com.android.server.wm.WindowManagerService: int removeStack(int)> (1)
<com.android.server.wm.WindowManagerService: void requestTraversal()> (2)
<com.android.internal.policy.impl.PhoneWindowManager$8: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void clearClearableFlagsLw()> (1)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void setNewConfiguration(android.content.res.Configuration)> ()
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<android.view.IWindowSession: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (1)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> ()
<android.view.IWindowSession$Stub: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager: void startFreezingScreen(int,int)> ()
<com.android.server.wm.WindowAnimator: void access$000(com.android.server.wm.WindowAnimator)> (1)
<com.android.server.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> (2)
<com.android.server.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> (2)
<com.android.server.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> (1)
<com.android.commands.media.Media: void runDispatch()> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyRepeatWithWakeLock(android.view.KeyEvent)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void dispatchMediaKeyWithWakeLock(android.view.KeyEvent)> (1)
<com.android.music.IMediaPlaybackService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.IMediaPlaybackService: void openFile(java.lang.String)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTrack(long)> (2)
<com.android.music.MediaPlaybackService$ServiceStub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: void doAutoShuffleUpdate()> (3)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void enqueue(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void enqueue(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void next()> ()
<com.android.music.IMediaPlaybackService$Stub: void next()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void open(long[],int)> ()
<com.android.music.IMediaPlaybackService$Stub: void open(long[],int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void prev()> ()
<com.android.music.IMediaPlaybackService$Stub: void prev()> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setQueuePosition(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setQueuePosition(int)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void setShuffleMode(int)> ()
<com.android.music.IMediaPlaybackService$Stub: void setShuffleMode(int)> (2)
<com.android.music.IMediaPlaybackService: void setRepeatMode(int)> (2)
<com.android.gallery3d.app.MovieControllerOverlay: void onClick(android.view.View)> (1)
<com.android.gallery3d.app.TrimControllerOverlay: void onClick(android.view.View)> (1)
<com.android.gallery3d.app.CommonControllerOverlay: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.app.MovieControllerOverlay: void onScrubbingEnd(int,int,int)> (1)
<com.android.gallery3d.app.TimeBar$Listener: void onScrubbingEnd(int,int,int)> (2)
<com.android.gallery3d.app.TrimControllerOverlay: void onScrubbingEnd(int,int,int)> (1)
<com.android.gallery3d.app.MovieControllerOverlay: void onScrubbingStart()> (1)
<com.android.gallery3d.app.TimeBar$Listener: void onScrubbingStart()> (2)
<com.android.gallery3d.app.TrimControllerOverlay: void onScrubbingStart()> (1)
<com.android.music.IMediaPlaybackService: void pause()> (1)
<android.filterfw.core.FinalPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> (1)
<android.filterfw.core.FinalPort: void transfer(android.filterfw.core.FilterContext)> (2)
<android.filterfw.core.InputPort: void transfer(android.filterfw.core.FilterContext)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void onPostExecute(android.filterfw.core.AsyncRunner$RunnerResult)> (2)
<android.filterfw.core.AsyncRunner: void close()> (1)
<android.filterfw.core.GraphRunner: void close()> ()
<android.media.effect.SingleFilterEffect: void release()> (28)
<android.filterfw.core.FilterContext: void tearDown()> (1)
<android.media.effect.FilterGraphEffect: void release()> (2)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.GeneralPreferences: void onCreate(android.os.Bundle)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void bindExpandArea(com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$ItemHolder,com.android.deskclock.provider.Alarm)> (1)
<com.android.email.activity.setup.AccountSettingsFragment: void onActivityResult(int,int,android.content.Intent)> (2)
<android.preference.VolumePreference$SeekBarVolumizer: void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)> (1)
<com.android.soundrecorder.SoundRecorder$1: void run()> (1)
<com.android.soundrecorder.SoundRecorder: void access$100(com.android.soundrecorder.SoundRecorder)> (1)
<com.android.soundrecorder.SoundRecorder: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: void stop()> ()
<com.android.music.IMediaPlaybackService$Stub: void stop()> (2)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (21)
<com.android.music.IMediaPlaybackService: void play()> (4)
<com.android.bluetooth.btservice.ProfileService: void doStart(android.content.Intent)> (8)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.deskclock.AlarmClockFragment$8: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.deskclock.AlarmClockFragment$9: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.deskclock.alarms.AlarmActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.deskclock.alarms.AlarmActivity: void access$300(com.android.deskclock.alarms.AlarmActivity)> (2)
<com.android.deskclock.DeskClock: void onCreate(android.os.Bundle)> (1)
<com.android.exchange.ExchangeService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.ExchangeService$1: void sendMeetingResponse(long,int)> (2)
<com.android.exchange.ExchangeService: void sendMessageRequest(com.android.emailsync.Request)> (1)
<com.android.emailsync.EmailSyncAlarmReceiver: void handleReceive(android.content.Context)> (1)
<com.android.exchange.ExchangeService: void serviceRequest(long,int)> (1)
<com.android.exchange.EasAccountService: android.os.Bundle tryAutodiscover(android.content.Context,com.android.emailcommon.provider.HostAuth)> (1)
<com.android.exchange.EasOutboxService: android.os.Bundle tryAutodiscover(android.content.Context,com.android.emailcommon.provider.HostAuth)> (1)
<com.android.exchange.ExchangeService$1: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasOutboxService: void run()> (1)
<com.android.emailsync.AbstractSyncService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.EasAccountService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validateAccount(com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasAccountService: boolean sendSettings()> (1)
<com.android.exchange.EasOutboxService: boolean sendSettings()> (1)
<com.android.exchange.EasAccountService: com.android.exchange.adapter.ProvisionParser canProvision(com.android.exchange.EasSyncService)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.adapter.ProvisionParser canProvision(com.android.exchange.EasSyncService)> (1)
<com.android.exchange.EasSyncService: boolean tryProvision(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.EasAccountService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (1)
<com.android.exchange.EasOutboxService: com.android.exchange.provider.GalResult searchGal(android.content.Context,long,java.lang.String,int)> (1)
<com.android.exchange.EasAccountService: java.lang.String acknowledgeProvisionImpl(com.android.exchange.EasSyncService,java.lang.String,java.lang.String,boolean)> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvisionImpl(com.android.exchange.EasSyncService,java.lang.String,java.lang.String,boolean)> (1)
<com.android.exchange.EasSyncService: java.lang.String acknowledgeProvision(com.android.exchange.EasSyncService,java.lang.String,java.lang.String)> (4)
<com.android.exchange.EasSyncService: void acknowledgeRemoteWipe(com.android.exchange.EasSyncService,java.lang.String)> (3)
<com.android.exchange.EasAccountService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (1)
<com.android.exchange.EasOutboxService: void messageMoveRequest(com.android.exchange.MessageMoveRequest)> (1)
<com.android.exchange.EasAccountService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (1)
<com.android.exchange.EasOutboxService: void sendMeetingResponse(com.android.exchange.MeetingResponseRequest)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.glrenderer.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> ()
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean handlePinMmi(java.lang.String)> (1)
<android.telephony.SmsManager: boolean deleteMessageFromIcc(int)> (2)
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.PhoneProxy: void exitEmergencyCallbackMode()> (1)
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()> (5)
<com.android.internal.telephony.PhoneProxy: java.util.List getAllCellInfo()> (1)
<com.android.internal.telephony.PhoneProxy: void getEnhancedVoicePrivacy(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void dispose()> (2)
<com.android.internal.telephony.PhoneBase: void dispose()> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: int[] getAdnRecordsSize(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: int[] getAdnRecordsSize(int)> ()
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (5)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (5)
<com.android.internal.telephony.gsm.GSMPhone: void setLine1Number(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.uicc.IsimUiccRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.RuimRecords: void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.uicc.IccRecords: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (2)
<com.android.internal.telephony.cat.IconLoader: void loadIcon(int,android.os.Message)> (9)
<com.android.internal.telephony.cat.IconLoader: void loadIcons(int[],android.os.Message)> (2)
<com.android.internal.telephony.cat.IconLoader: void postIcon()> (3)
<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEf(java.lang.String)> (1)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void readAdnFileAndWait(int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.gsm.GsmMmiCode: java.lang.CharSequence makeCFQueryResultMessage(com.android.internal.telephony.CallForwardInfo,int)> (1)
<com.android.internal.telephony.gsm.GsmMmiCode: void onQueryCfComplete(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void handleCfuQueryResult(com.android.internal.telephony.CallForwardInfo[])> (1)
<com.android.internal.telephony.uicc.IsimUiccRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)> (1)
<com.android.internal.telephony.uicc.RuimRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)> (1)
<com.android.internal.telephony.PhoneBase: void setVoiceMessageWaiting(int,int)> (8)
<com.android.internal.telephony.uicc.UiccCard: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)> (1)
<com.android.internal.telephony.uicc.UiccController: void onGetIccCardStatusDone(android.os.AsyncResult)> (1)
<com.android.internal.telephony.PhoneProxy: void requestIsimAuthentication(java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.CallManager: boolean sendBurstDtmf(java.lang.String,int,int,android.os.Message)> ()
<com.android.internal.telephony.PhoneProxy: void sendBurstDtmf(java.lang.String,int,int,android.os.Message)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendRetrySms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendRawPdu(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendRawPdu(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (4)
<com.android.internal.telephony.ImsSMSDispatcher: void sendRawPdu(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.RIL: void switchToRadioState(com.android.internal.telephony.CommandsInterface$RadioState)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void <init>()> ()
<com.android.internal.telephony.test.SimulatedCommands: void setRadioPower(boolean,android.os.Message)> (1)
<com.android.internal.telephony.test.SimulatedCommands: void shutdown()> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcastRange(int,int)> (2)
<com.android.internal.telephony.IntRangeManager: boolean finishUpdate()> (2)
<com.android.internal.telephony.dataconnection.DcTracker$ApnChangeObserver: void onChange(boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void disableLocationUpdates()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void enableLocationUpdates()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updateServiceLocation()> (1)
<com.android.internal.telephony.PhoneProxy: void enableEnhancedVoicePrivacy(boolean,android.os.Message)> (1)
<com.android.internal.telephony.PhoneBase: void updatePhoneObject(int)> (7)
<android.telephony.SmsManager: boolean copyMessageToIcc(byte[],byte[],int)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.server.power.Notifier$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier: void updatePendingBroadcastLocked()> (2)
<com.android.internal.content.PackageMonitor: void onPackageDisappeared(java.lang.String,int)> (14)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void reportLocation(android.location.Location,boolean)> (4)
<com.android.internal.policy.impl.GlobalActions$5: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: void access$1600(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)> (1)
<com.android.server.sip.SipSessionGroup$SipSessionImpl$1: void run()> (1)
<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)> (6)
<android.view.IWindowManager: void prepareAppTransition(int,boolean)> ()
<com.android.server.am.ActivityStack: boolean findTaskToMoveToFrontLocked(int,int,android.os.Bundle)> (1)
<com.android.server.am.ActivityStackSupervisor: void removeTask(com.android.server.am.TaskRecord)> (3)
<com.android.server.display.DisplayManagerService$WindowManagerFuncs: void requestTraversal()> (2)
<com.android.server.wm.WindowManagerService: void setAppFullscreen(android.os.IBinder,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemBarsLw(android.view.WindowManagerPolicy$WindowState,int,int)> (1)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (441)
<com.android.server.wm.Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (1)
<com.android.server.wm.WindowAnimator$1: void run()> (1)
<com.android.server.content.SyncStorageEngine: void readAndDeleteLegacyAccountInfoLocked()> (2)
<com.android.commands.media.Media: void onRun()> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackService$ServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.music.MediaPlaybackActivity: void startPlayback()> (1)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTrack(long)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService$Stub$Proxy: int removeTracks(int,int)> ()
<com.android.music.IMediaPlaybackService$Stub: int removeTracks(int,int)> (2)
<com.android.music.MediaPlaybackService: int getNextPosition(boolean)> (3)
<com.android.music.IMediaPlaybackService: void enqueue(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void next()> (3)
<com.android.music.IMediaPlaybackService: void open(long[],int)> (1)
<com.android.music.IMediaPlaybackService: void prev()> (3)
<com.android.music.IMediaPlaybackService: void setQueuePosition(int)> (1)
<com.android.music.IMediaPlaybackService: void setShuffleMode(int)> (5)
<com.android.music.MediaPlaybackActivity: void cycleRepeat()> (1)
<com.android.music.MediaPlaybackActivity: void toggleShuffle()> (2)
<com.android.gallery3d.app.TimeBar: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.TrimTimeBar: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.music.MediaPlaybackActivity: void doPauseResume()> (2)
<android.filterfw.core.FieldPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> (4)
<android.filterfw.core.Filter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (68)
<android.filterfw.core.Filter: void transferInputFrames(android.filterfw.core.FilterContext)> (69)
<android.filterfw.core.Filter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (68)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void onCancelled(android.filterfw.core.AsyncRunner$RunnerResult)> (1)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void onPostExecute(java.lang.Object)> (1)
<android.media.effect.effects.AutoFixEffect: void release()> (2)
<android.media.effect.effects.BitmapOverlayEffect: void release()> (2)
<android.media.effect.effects.BlackWhiteEffect: void release()> (2)
<android.media.effect.effects.BrightnessEffect: void release()> (2)
<android.media.effect.effects.ColorTemperatureEffect: void release()> (2)
<android.media.effect.effects.ContrastEffect: void release()> (2)
<android.media.effect.effects.CropEffect: void release()> (3)
<android.media.effect.effects.CrossProcessEffect: void release()> (2)
<android.media.effect.effects.DocumentaryEffect: void release()> (2)
<android.media.effect.effects.DuotoneEffect: void release()> (2)
<android.media.effect.effects.FillLightEffect: void release()> (2)
<android.media.effect.effects.FisheyeEffect: void release()> (2)
<android.media.effect.effects.FlipEffect: void release()> (2)
<android.media.effect.effects.GrainEffect: void release()> (2)
<android.media.effect.effects.GrayscaleEffect: void release()> (2)
<android.media.effect.effects.LomoishEffect: void release()> (2)
<android.media.effect.effects.NegativeEffect: void release()> (2)
<android.media.effect.effects.PosterizeEffect: void release()> (2)
<android.media.effect.effects.RedEyeEffect: void release()> (2)
<android.media.effect.effects.RotateEffect: void release()> (3)
<android.media.effect.effects.SaturateEffect: void release()> (2)
<android.media.effect.effects.SepiaEffect: void release()> (2)
<android.media.effect.effects.SharpenEffect: void release()> (2)
<android.media.effect.effects.StraightenEffect: void release()> (2)
<android.media.effect.effects.TintEffect: void release()> (2)
<android.media.effect.effects.VignetteEffect: void release()> (2)
<android.media.effect.SizeChangeEffect: void release()> (2)
<android.media.effect.EffectContext: void release()> ()
<android.media.effect.effects.BackDropperEffect: void release()> (2)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void expandAlarm(com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$ItemHolder,boolean)> (2)
<android.preference.VolumePreference: void onBindDialogView(android.view.View)> (2)
<com.android.music.IMediaPlaybackService: void stop()> (2)
<com.android.server.power.PowerManagerService: void access$900(com.android.server.power.PowerManagerService)> (4)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,int,int)> (1)
<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)> (2)
<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleBootCompletedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleDreamFinishedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.power.PowerManagerService: void handleScreenOnBlockerReleased()> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()> (1)
<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void napInternal(long)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)> (2)
<com.android.server.power.PowerManagerService: void wakeUpInternal(long)> (2)
<com.android.music.MediaPlaybackActivity$7: void onClick(android.view.View)> (1)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int,boolean)> (3)
<com.android.bluetooth.a2dp.A2dpService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (8)
<com.android.bluetooth.gatt.GattService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.deskclock.alarms.AlarmActivity$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.deskclock.alarms.AlarmActivity$GlowPadController: void onTrigger(android.view.View,int)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void sendMeetingResponse(long,int)> ()
<com.android.emailcommon.service.IEmailService$Stub: void sendMeetingResponse(long,int)> (2)
<com.android.emailsync.EmailSyncAlarmReceiver: void access$000(com.android.emailsync.EmailSyncAlarmReceiver,android.content.Context)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.emailsync.AbstractSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (4)
<com.android.exchange.EasAccountService: boolean tryProvision(com.android.exchange.EasSyncService)> (2)
<com.android.exchange.EasOutboxService: boolean tryProvision(com.android.exchange.EasSyncService)> (1)
<com.android.exchange.EasAccountService: java.lang.String acknowledgeProvision(com.android.exchange.EasSyncService,java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: java.lang.String acknowledgeProvision(com.android.exchange.EasSyncService,java.lang.String,java.lang.String)> (1)
<com.android.exchange.EasAccountService: void acknowledgeRemoteWipe(com.android.exchange.EasSyncService,java.lang.String)> (1)
<com.android.exchange.EasOutboxService: void acknowledgeRemoteWipe(com.android.exchange.EasSyncService,java.lang.String)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource$CheckedMediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<android.telephony.gsm.SmsManager: boolean deleteMessageFromSim(int)> ()
<com.android.providers.telephony.SmsProvider: int deleteMessageFromIcc(java.lang.String)> (1)
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> ()
<com.android.internal.telephony.PhoneBase: android.telephony.CellLocation getCellLocation()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.Phone: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void dispose()> (1)
<com.android.internal.telephony.sip.SipPhone: void dispose()> (2)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> ()
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processBIPClient(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processDisplayText(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processEventNotify(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processGetInkey(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processGetInput(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processLaunchBrowser(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processPlayTone(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSelectItem(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSetUpIdleModeText(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processSetupCall(com.android.internal.telephony.cat.CommandDetails,java.util.List)> (1)
<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()> (3)
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void refreshCache()> (1)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleVoicemailTeleservice(com.android.internal.telephony.cdma.SmsMessage)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setVoiceMessageWaiting(int,int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.Phone: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.sip.SipPhone: void setVoiceMessageWaiting(int,int)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendRetrySms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendRetrySms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendSubmitPdu(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (3)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.test.SimulatedRadioControl: void shutdown()> ()
<com.android.internal.telephony.ISms$Stub$Proxy: boolean disableCellBroadcast(int)> ()
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: boolean enableCellBroadcast(int)> ()
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcast(int)> (2)
<com.android.internal.telephony.ISms: boolean enableCellBroadcastRange(int,int)> (1)
<com.android.internal.telephony.IntRangeManager: boolean tryAddRanges(int,int,boolean)> (3)
<com.android.internal.telephony.IntRangeManager: boolean updateRanges()> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.ServiceStateTracker: void updatePhoneObject()> (6)
<com.android.internal.telephony.sip.SipPhoneBase: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.sip.SipPhone: void updatePhoneObject(int)> (2)
<android.telephony.gsm.SmsManager: boolean copyMessageToSim(byte[],byte[],int)> ()
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.server.power.Notifier: void onGoToSleepFinished()> (1)
<com.android.server.power.Notifier: void onWakeUpStarted()> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (16)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.am.UsageStatsService$2: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.pm.UserManagerService$5: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.print.PrintManagerService$3: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.ServiceWatcher$2: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageDisappeared(java.lang.String,int)> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.location.provider.LocationProviderBase: void reportLocation(android.location.Location)> ()
<com.android.server.location.GpsLocationProvider: void reportLocation(int,double,double,double,float,float,float,long)> ()
<com.android.server.location.MockProvider: void setLocation(android.location.Location)> (1)
<com.android.server.location.PassiveProvider: void updateLocation(android.location.Location)> (1)
<com.android.internal.policy.impl.GlobalActions$4: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.app.LocalePicker: void updateLocale(java.util.Locale)> ()
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String,boolean)> (4)
<com.android.server.UiModeManagerService: void sendConfigurationLocked()> (1)
<com.android.server.wm.WindowManagerService: void displayReady()> (1)
<com.android.server.wm.WindowManagerService: void sendNewConfiguration()> (11)
<com.android.server.am.ActivityStackSupervisor: void findTaskToMoveToFrontLocked(int,int,android.os.Bundle)> (1)
<com.android.server.am.ActivityRecord: void setTask(com.android.server.am.TaskRecord,com.android.server.am.ThumbnailHolder,boolean)> (3)
<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)> (10)
<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()> (5)
<com.android.server.am.ActivityManagerService$13$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<android.app.FragmentBreadCrumbs: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.app.MediaRouteButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.app.NativeActivity$NativeContentView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.app.SearchDialog$SearchBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.appwidget.AppWidgetHostView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.filterfw.core.FilterSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.gesture.GestureOverlayView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.inputmethodservice.ExtractButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.inputmethodservice.ExtractEditLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.inputmethodservice.ExtractEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.inputmethodservice.KeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.media.WebVttRenderingWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.media.WebVttRenderingWidget$CueLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.media.WebVttRenderingWidget$RegionLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.media.WebVttRenderingWidget$SpanLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.opengl.GLSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.preference.PreferenceFrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.renderscript.RSSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.renderscript.RSTextureView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v13.app.FragmentTabHost: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.app.FragmentTabHost: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.app.NoSaveStateFrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.view.PagerTabStrip: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.view.PagerTitleStrip: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.view.ViewPager: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.widget.ContentLoadingProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.widget.DrawerLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.widget.SearchViewCompatIcs$MySearchView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v4.widget.SlidingPaneLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v7.widget.GridLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.support.v7.widget.Space: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.LayoutInflater$BlinkLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.SurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.TextureView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.ViewGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.ViewOverlay$OverlayViewGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.ViewStub: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.webkit.WebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AbsListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AbsoluteLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AbsSeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AbsSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ActivityChooserView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AdapterViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AdapterView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AdapterViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AnalogClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AppSecurityPermissions$PermissionItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.Button: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.CalendarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.CalendarView$WeekView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.CheckBox: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.CheckedTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Chronometer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.CompoundButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.DatePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.DateTimeView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.DialerFilter: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.DigitalClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Editor$HandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Editor$InsertionHandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Editor$SelectionEndHandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Editor$SelectionStartHandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.EditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.ExpandableListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.FrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Gallery: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.GridLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.GridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.HorizontalScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ImageButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ImageSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.LinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ListPopupWindow$DropDownListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.MediaController: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.MultiAutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.NumberPicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.NumberPicker$CustomEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.PopupWindow$PopupViewContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.QuickContactBadge: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.RadioButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.RadioGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.RatingBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.RelativeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.SearchView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.SearchView$SearchAutoComplete: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.SeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.SlidingDrawer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Space: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Spinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.StackView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.StackView$StackFrame: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Switch: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.TabHost: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.TableLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.TableRow: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.TabWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.TextClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.TextSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.TextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.TimePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ToggleButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.TwoLineListItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.VideoView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.ViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ViewSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ZoomButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ZoomButtonsController$Container: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ZoomControls: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.addbookmark.FolderSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.AddBookmarkPage$CustomListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.AddNewBookmark: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.AutologinBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.BaseUi$FullscreenHolder: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.BookmarkItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.BreadCrumbView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.BrowserWebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.ErrorConsoleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.ErrorConsoleView$ErrorConsoleListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.GeolocationPermissionsPrompt: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.HistoryItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.NavigationBarBase: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.NavigationBarPhone: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.NavigationBarTablet: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.NavScreen: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.NavTabScroller: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.NavTabScroller$ContentLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.NavTabView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.PageProgressView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.TabBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.TabBar$TabView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.TabScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.TabScrollView$TabLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.TitleBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.UrlInputView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.BookmarkContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.BookmarkExpandableView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.CustomScreenLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.EventRedirectingFrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.PieMenu: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.ScrollerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.SnapshotGridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.browser.view.StopProgressView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calculator2.CalculatorDisplay: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calculator2.CalculatorEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calculator2.CalculatorViewPager: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calculator2.ColorButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calculator2.PanelSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.agenda.AgendaListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.ColorChipView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.DayView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.event.AttendeesView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.ExpandableTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.month.MonthListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.month.MonthWeekEventsView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.month.SimpleWeekView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.MultiStateButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.recurrencepicker.LinearLayoutWithMaxWidth: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.recurrencepicker.WeekButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.calendar.StickyHeaderListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.crop.CropView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.PanoProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ShutterButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.tinyplanet.TinyPlanetPreview: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.AbstractSettingPopup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.CameraControls: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.CameraRootView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.CheckedLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.CountdownTimerPopup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.CountDownView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.ExpandedGridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.FaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.FilmstripBottomControls: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.FilmStripView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.InLineSettingItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.InLineSettingMenu: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.ListPrefSettingPopup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.ModuleSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.MoreSettingPopup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.PieMenuButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.RenderOverlay: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.RenderOverlay$RenderView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.RotatableLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.RotateImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.RotateLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.Switch: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.TimeIntervalPopup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.TwoStateImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.camera.ui.ZoomView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.colorpicker.ColorPickerPalette: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.colorpicker.ColorPickerSwatch: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.AccessibleLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.AccessibleTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.date.AccessibleDateAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.date.DayPickerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.date.SimpleMonthView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.date.TextViewWithCircularIndicator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.date.YearPickerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.time.AmPmCirclesView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.time.CircleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.time.RadialPickerLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.time.RadialSelectorView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.datetimepicker.time.RadialTextsView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.AlarmTimelineView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.AnalogClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.AndroidClockTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.CircleButtonsLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.CircleTimerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.DontPressWithParentLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.timer.CountingTimerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.TimerSetupView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.timer.TimerListItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.timer.TimerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.widget.ActionableToastBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.widget.EllipsizeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.widget.sgv.StaggeredGridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.deskclock.widget.TextTime: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.development.LogTextBox: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.documentsui.DirectoryContainerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.documentsui.DirectoryView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.dreams.phototable.BummerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.dreams.phototable.PhotoCarousel: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.dreams.phototable.PhotoTable: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.email.view.CertificateSelector: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.ex.chips.RecipientEditTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.ex.editstyledtext.EditStyledText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.ex.photo.PhotoViewPager: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.ex.photo.views.PhotoView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.galaxy4.GalaxyView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.gallery3d.app.CommonControllerOverlay: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.app.MovieControllerOverlay: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.app.TimeBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.app.TrimControllerOverlay: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.app.TrimTimeBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.category.CategorySelected: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.category.CategoryTrack: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.category.CategoryView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.category.IconView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.CenteredLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorBrightnessView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorCompareView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorHueView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorOpacityView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorRectView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSaturationView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorSVRectView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.colorpicker.ColorValueView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.crop.CropView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.editors.SwapButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCrop: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageCurves: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageDraw: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageGrad: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageMirror: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImagePoint: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRedEye: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageRotate: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageShow: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageStraighten: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageTinyPlanet: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.imageshow.ImageVignette: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.info.HistogramView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.state.StatePanelTrack: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.state.StateView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.filtershow.ui.FramedTextButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.ingest.ui.DateTileView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.ingest.ui.IngestGridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.ingest.ui.MtpFullscreenView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.ingest.ui.MtpImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.ingest.ui.MtpThumbnailTileView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.gallery3d.ui.GLRootView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.inputmethod.dictionarypack.ButtonSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.dictionarypack.DictionaryDownloadProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.EmojiCategoryPageIndicatorView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.internal.PreviewPlacerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.internal.ScrollViewWithNotifier: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.keyboard.MoreKeysKeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.latin.InputView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$IndicatorView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.latin.setup.SetupStartIndicatorView$LabelView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.latin.setup.SetupStepIndicatorView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.pinyin.BalloonHint$BalloonView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.pinyin.CandidatesContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.pinyin.CandidateView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.pinyin.ComposingView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.pinyin.SkbContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.inputmethod.research.FeedbackLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.app.AlertController$RecycleListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.policy.impl.ImmersiveModeConfirmation$ClingWindowView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.policy.impl.RecentApplicationsBackground: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.view.menu.ActionMenuItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.view.menu.ActionMenuView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.view.menu.ExpandedMenuView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.view.menu.IconMenuItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.view.menu.IconMenuView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.view.menu.ListMenuItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.AbsActionBarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ActionBarContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ActionBarContextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ActionBarOverlayLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ActionBarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ActionBarView$HomeView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.DialogTitle: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.FaceUnlockView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.LockPatternView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.PointerLocationView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.RotarySelector: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ScrollingTabContainerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ScrollingTabContainerView$TabView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.SizeAdaptiveLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.SlidingTab: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.SubtitleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.TextProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.WaveView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.WeightedLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.BorderView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.ConversationContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.ConversationItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.mail.browse.ConversationListFooterView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.ConversationPager: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.ConversationViewHeader: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.ConversationWebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.FolderSpanTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MailWebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageAttachmentBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageAttachmentTile: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageFooterView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageHeaderView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageInviteView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MessageWebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.MultiAdapterSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.ScrollIndicatorsView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.SpamWarningView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.SuperCollapsedBlock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.browse.SwipeableConversationItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.compose.AttachmentComposeView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.compose.AttachmentsView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.compose.CcBccView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.compose.ComposeAttachmentTile: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.compose.EnterSubject: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.compose.FromAddressSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.compose.QuotedTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.MinTimeProgressView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.AccountItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ActionableToastBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.AnimatedListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.AttachmentTile: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.AttachmentTileGrid: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ButteryProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ConversationListCopy: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ConversationListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ConversationListView$HintText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ConversationLongPressTipView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ConversationPhotoTeaserView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ConversationsInOutboxTipView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.ConversationSyncDisabledTipView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.EllipsizedMultilineTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.EmptyConversationListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.FolderItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.FolderListLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.LeaveBehindItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.MailActionBarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.NestedFolderTeaserView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.SearchMailActionBarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.SwipeableListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.mail.ui.TwoPaneLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.music.CheckableRelativeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.music.RepeatingImageButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.music.TouchInterceptor: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.music.VerticalTextSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.noisefield.NoiseFieldView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.packageinstaller.CaffeinatedScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.phasebeam.PhaseBeamView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.photos.views.BlockingGLTextureView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.photos.views.GalleryThumbnailView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.photos.views.HeaderGridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.photos.views.HeaderGridView$FullWidthFixedViewLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.photos.views.SquareImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.photos.views.TiledImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.printspooler.PrintDialogFrame: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.printspooler.PrintJobConfigActivity$CustomEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.providers.downloads.ui.DownloadItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.BaseSuggestionView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.ClusteredSuggestionsView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.ContactBadge: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.CorpusView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.DefaultSuggestionView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.QueryTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.SearchActivityView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.SearchActivityViewSinglePane: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.SuggestionsView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.quicksearchbox.ui.WebSearchSuggestionView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.soundrecorder.VUMeter: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.timezonepicker.TimeZonePickerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.AudioTrackLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.AudioTrackView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.EditorRelativeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.HandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.HorizontalScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.ImageViewTouchBase: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.MediaItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.MediaLinearLayout$1: void onLongPress(android.view.View,android.view.MotionEvent)> (1)
<com.android.videoeditor.widgets.MediaLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.OverlayLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.OverlayView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.PlayheadView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.PreviewSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.videoeditor.widgets.TimelineHorizontalScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.TimelineRelativeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.TransitionView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.videoeditor.widgets.ZoomControl: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.wallpaper.fall.FallView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.wallpaper.galaxy.GalaxyView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.wallpaper.grass.GrassView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.wallpaper.holospiral.HoloSpiralView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.server.content.SyncStorageEngine: void clearAndReadState()> ()
<com.android.server.content.SyncStorageEngine: void <init>(android.content.Context,java.io.File)> (2)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<android.view.FallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackActivity: void access$1100(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.IMediaPlaybackService: int removeTrack(long)> (2)
<com.android.music.IMediaPlaybackService: int removeTracks(int,int)> (2)
<com.android.music.MusicUtils: void addToCurrentPlaylist(android.content.Context,long[])> (3)
<com.android.music.MediaPlaybackActivity$8: void onClick(android.view.View)> (1)
<com.android.music.MediaPlaybackActivity: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.music.MediaPlaybackActivity: void scanForward(int,long)> (3)
<com.android.music.MediaPlaybackActivity: void scanBackward(int,long)> (3)
<com.android.music.TrackBrowserActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.music.MusicBrowserActivity$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.music.MusicUtils: void togglePartyShuffle()> (5)
<com.android.music.MediaPlaybackActivity: void access$700(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$600(com.android.music.MediaPlaybackActivity)> (1)
<com.android.music.MediaPlaybackActivity: void access$800(com.android.music.MediaPlaybackActivity)> (1)
<android.filterfw.core.FieldPort: void pushFrame(android.filterfw.core.Frame)> (4)
<android.filterfw.core.FieldPort: void setFrame(android.filterfw.core.Frame)> (4)
<android.filterfw.core.ProgramPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> (1)
<android.filterpacks.base.CallbackFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ImageEncoder: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.StraightenFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void initProgramInputs(android.filterfw.core.Program,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.CallbackFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void transferInputFrames(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void transferInputFrames(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.CallbackFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ColorTemperatureFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.CropFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.LomoishFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.ToPackedGrayFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void transferInputPortFrame(java.lang.String,android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: void onCancelled(java.lang.Object)> (1)
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> (2)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void access$2600(com.android.deskclock.AlarmClockFragment$AlarmItemAdapter,com.android.deskclock.AlarmClockFragment$AlarmItemAdapter$ItemHolder,boolean)> (4)
<com.android.deskclock.AlarmClockFragment$AlarmItemAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (3)
<com.android.music.MediaPickerActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)> (1)
<com.android.server.power.PowerManagerService$1: void onProximityNegative()> (1)
<com.android.server.power.PowerManagerService$1: void onProximityPositive()> (1)
<com.android.server.power.PowerManagerService$1: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$DockReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void goToSleepFromNative(long,int)> ()
<com.android.server.power.PowerManagerService: void access$1300(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void checkIfBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$1900(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2000(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1600(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1800(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2300(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void userActivityFromNative(long,int,int)> ()
<com.android.server.power.PowerManagerService: void wakeUpFromNative(long)> ()
<com.android.music.MusicUtils: void playAll(android.content.Context,android.database.Cursor,int,boolean)> (3)
<com.android.music.MusicUtils: void playAll(android.content.Context,long[],int)> (7)
<com.android.music.MusicUtils: void playPlaylist(android.content.Context,long)> (2)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView$OnTriggerListener: void onTrigger(android.view.View,int)> (1)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.emailcommon.service.IEmailService: void sendMeetingResponse(long,int)> (1)
<com.android.emailsync.EmailSyncAlarmReceiver$1: void run()> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle autoDiscover(java.lang.String,java.lang.String)> (2)
<com.android.exchange.EasAccountService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasOutboxService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (2)
<com.android.exchange.EasSyncService: android.os.Bundle validate(java.lang.Class,com.android.emailcommon.provider.HostAuth,android.content.Context)> (1)
<com.android.exchange.ExchangeService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (2)
<com.android.providers.telephony.SmsProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.dataconnection.DcTracker: int getCellLocationId()> (1)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: android.telephony.SmsCbMessage handleGsmBroadcastSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.Phone: android.telephony.CellLocation getCellLocation()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)> ()
<com.android.internal.telephony.IIccPhoneBook: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)> (1)
<com.android.internal.telephony.cat.CommandParamsFactory: void make(com.android.internal.telephony.cat.BerTlv)> (1)
<android.telephony.gsm.SmsManager: java.util.ArrayList getAllMessagesFromSim()> ()
<com.android.providers.telephony.SmsProvider: android.database.Cursor getSingleMessageFromIcc(java.lang.String)> (1)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.PhoneProxy: void setVoiceMessageWaiting(int,int)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.SMSDispatcher: void sendNewSubmitPdu(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.SmsHeader,int,android.app.PendingIntent,android.app.PendingIntent,boolean)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms: boolean disableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean disableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.ISms: boolean enableCellBroadcast(int)> (1)
<android.telephony.SmsManager: boolean enableCellBroadcastRange(int,int)> ()
<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: boolean tryAddRanges(int,int,boolean)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: boolean tryAddRanges(int,int,boolean)> (1)
<com.android.internal.telephony.IntRangeManager: boolean enableRange(int,int,java.lang.String)> (2)
<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: boolean updateRanges()> (1)
<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: boolean updateRanges()> (1)
<com.android.internal.telephony.IntRangeManager: boolean disableRange(int,int,java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updatePhoneObject()> (4)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updatePhoneObject()> (3)
<com.android.server.power.PowerManagerService: void sendPendingNotificationsLocked()> (3)
<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)> (4)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.app.ResolverActivity$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.accessibility.AccessibilityManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.am.UsageStatsService$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.LocationManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.pm.UserManagerService$5: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.print.PrintManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.RecognitionManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.ServiceWatcher$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (6)
<com.android.internal.telephony.uicc.RuimRecords: void setLocaleFromCsim()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.ServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (3)
<com.android.server.UiModeManagerService: void sendConfigurationAndStartDreamOrDockAppLocked(java.lang.String)> (2)
<com.android.server.am.ActivityStack: android.app.ActivityOptions resetTargetTaskIfNeededLocked(com.android.server.am.TaskRecord,boolean)> (1)
<com.android.server.am.ActivityStack: int resetAffinityTaskIfNeededLocked(com.android.server.am.TaskRecord,com.android.server.am.TaskRecord,boolean,boolean,int)> (1)
<com.android.server.display.DisplayManagerService: void access$1400(com.android.server.display.DisplayManagerService,boolean)> (1)
<com.android.server.display.DisplayManagerService: void blankAllDisplaysFromPowerManager()> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)> (2)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)> (3)
<com.android.server.display.DisplayManagerService: void setDisplayHasContent(int,boolean,boolean)> (1)
<com.android.server.display.DisplayManagerService: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)> (2)
<com.android.server.display.DisplayManagerService: void setInputManager(com.android.server.display.DisplayManagerService$InputManagerFuncs)> (1)
<com.android.server.display.DisplayManagerService: void setWindowManager(com.android.server.display.DisplayManagerService$WindowManagerFuncs)> (1)
<com.android.server.display.DisplayManagerService: void unblankAllDisplaysFromPowerManager()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int access$900(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int finishPostLayoutPolicyLw()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int focusChangedLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void beginLayoutLw(boolean,int,int,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void requestTransientBars(android.view.WindowManagerPolicy$WindowState)> (1)
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<android.widget.Editor: boolean performLongClick(boolean)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager$Stub$Proxy: void releaseWakeLock(android.os.IBinder,int)> ()
<android.os.IPowerManager$Stub: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.IPowerManager: void releaseWakeLock(android.os.IBinder,int)> (2)
<android.os.PowerManager$WakeLock: void finalize()> ()
<android.os.PowerManager$WakeLock: void release(int)> (1)
<android.os.PowerManager$WakeLock: void release()> (118)
<android.hardware.location.GeofenceHardwareImpl: void releaseWakeLock()> (1)
<android.media.AsyncPlayer: void releaseWakeLock()> (1)
<android.media.MediaFocusControl$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.MediaFocusControl: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<android.net.DhcpStateMachine$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$RunningState: boolean processMessage(android.os.Message)> (1)
<android.net.DhcpStateMachine$WaitBeforeRenewalState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: boolean processMessage(android.os.Message)> (1)
<android.os.PowerManager$WakeLock$1: void run()> (1)
<android.support.v4.content.WakefulBroadcastReceiver: boolean completeWakefulIntent(android.content.Intent)> ()
<com.android.bluetooth.hfp.HeadsetStateMachine: void processLocalVrEvent(int)> (1)
<com.android.bluetooth.map.BluetoothMapService: void closeService()> (3)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void releaseWakeLocks()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void closeService()> (4)
<com.android.browser.Controller: void releaseWakeLock()> (2)
<com.android.calendar.alerts.AlertReceiver: void finishStartingService(android.app.Service,int)> (1)
<com.android.deskclock.AlarmAlertWakeLock: void releaseCpuLock()> (3)
<com.android.deskclock.stopwatch.StopwatchFragment: void releaseWakeLock()> (4)
<com.android.development.Connectivity: void onStopDelayedCycle()> (1)
<com.android.emailsync.SyncManager: void releaseWakeLock(long)> (5)
<com.android.emailsync.SyncManager: void shutdown()> (2)
<com.android.gallery3d.ui.WakeLockHoldingProgressListener: void onProgressComplete(int)> (1)
<com.android.internal.os.storage.ExternalStorageFormatter: void onDestroy()> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void releaseWakeLock()> (7)
<com.android.internal.telephony.cdma.CDMAPhone: void finalize()> (1)
<com.android.internal.telephony.gsm.GsmConnection: void releaseWakeLock()> (5)
<com.android.internal.telephony.InboundSmsHandler$IdleState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.InboundSmsHandler: void onQuitting()> (3)
<com.android.internal.telephony.RIL: boolean clearWakeLock()> (1)
<com.android.internal.telephony.RIL: void decrementWakeLock()> (3)
<com.android.internal.telephony.WakeLockStateMachine$IdleState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.WakeLockStateMachine: void onQuitting()> (3)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: boolean processMessage(android.os.Message)> (1)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$2: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.server.AlarmManagerService$ResultReceiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.am.ActivityStackSupervisor: com.android.server.am.ActivityRecord activityIdleInternalLocked(android.os.IBinder,boolean,android.content.res.Configuration)> (2)
<com.android.server.am.ActivityStackSupervisor: void comeOutOfSleepIfNeededLocked()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void finalizeBackup()> (1)
<com.android.server.BackupManagerService$PerformClearTask: void run()> (3)
<com.android.server.BackupManagerService$PerformFullBackupTask: void run()> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: void run()> (1)
<com.android.server.BackupManagerService$PerformInitializeTask: void run()> (2)
<com.android.server.BackupManagerService$PerformRestoreTask: void finalizeRestore()> (1)
<com.android.server.content.SyncManager$ActiveSyncContext: void close()> (1)
<com.android.server.location.GeofenceManager: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.LocationManagerService$Receiver: void clearPendingBroadcastsLocked()> (2)
<com.android.server.LocationManagerService$Receiver: void decrementPendingBroadcastsLocked()> (2)
<com.android.server.sip.SipWakeLock: void release(java.lang.Object)> (7)
<com.android.videoeditor.VideoEditorActivity$23: void onStop()> (2)
<com.android.server.ConnectivityService: void handleConnect(android.net.NetworkInfo)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<android.hardware.location.GeofenceHardwareImpl: void access$100(android.hardware.location.GeofenceHardwareImpl)> (2)
<android.media.AsyncPlayer: void access$500(android.media.AsyncPlayer)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4200(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1400(com.android.bluetooth.map.BluetoothMapService)> (1)
<com.android.bluetooth.opp.BluetoothOppObexServerSession: void onClose()> ()
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1100(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.browser.Controller: void onProgressChanged(com.android.browser.Tab)> (1)
<com.android.browser.Controller: void onResume()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void access$500(com.android.deskclock.stopwatch.StopwatchFragment)> (1)
<com.android.deskclock.stopwatch.StopwatchFragment: void onPause()> (1)
<com.android.development.Connectivity: void access$2300(com.android.development.Connectivity)> (1)
<com.android.emailsync.SyncManager: void releaseMailbox(long)> (6)
<com.android.emailsync.SyncManager: void runAsleep(long,long)> (3)
<com.android.emailsync.SyncManager: void stopManualSync(long)> (4)
<com.android.emailsync.SyncManager: void stopServiceThreads()> (3)
<com.android.exchange.ExchangeService: void releaseWakeLock(long)> (1)
<com.android.exchange.ExchangeService: void shutdown()> (1)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: boolean onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<com.android.internal.telephony.cdma.CdmaConnection: void access$000(com.android.internal.telephony.cdma.CdmaConnection)> (2)
<com.android.internal.telephony.cdma.CdmaConnection: void finalize()> ()
<com.android.internal.telephony.cdma.CdmaConnection: void onLocalDisconnect()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void finalize()> (1)
<com.android.internal.telephony.gsm.GsmConnection: boolean onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)> (3)
<com.android.internal.telephony.gsm.GsmConnection: void access$100(com.android.internal.telephony.gsm.GsmConnection)> (2)
<com.android.internal.telephony.gsm.GsmConnection: void finalize()> ()
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void onQuitting()> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void onQuitting()> (2)
<com.android.internal.util.StateMachine: void onQuitting()> (18)
<com.android.internal.telephony.RIL: boolean access$300(com.android.internal.telephony.RIL)> (2)
<com.android.internal.telephony.RIL: void access$100(com.android.internal.telephony.RIL)> (1)
<com.android.internal.telephony.RIL: void clearRequestList(int,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler: void onQuitting()> (2)
<com.android.internal.telephony.CellBroadcastHandler: void onQuitting()> (3)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.printspooler.NotificationController$NotificationBroadcastReceiver$2: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler: void activityIdleInternal(com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActivityManagerService: void comeOutOfSleepIfNeededLocked()> (3)
<com.android.server.BackupManagerService$PerformBackupTask: void execute()> (1)
<com.android.server.BackupManagerService: void clearBackupData(java.lang.String,java.lang.String)> (4)
<com.android.server.BackupManagerService$PerformRestoreTask: void execute()> (1)
<com.android.server.content.SyncManager$SyncHandler: void closeActiveSyncContext(com.android.server.content.SyncManager$ActiveSyncContext)> (3)
<com.android.server.LocationManagerService$Receiver: void access$1400(com.android.server.LocationManagerService$Receiver)> (1)
<com.android.server.LocationManagerService$Receiver: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> (1)
<com.android.server.sip.SipService$MyExecutor: void executeInternal(java.lang.Runnable)> (1)
<com.android.server.sip.SipService$SipAutoReg: boolean notCurrentSession(android.net.sip.ISipSession)> (4)
<com.android.server.sip.SipService$SipAutoReg: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onRegistrationTimeout(android.net.sip.ISipSession)> (2)
<com.android.server.sip.SipService$SipAutoReg: void stop()> (3)
<com.android.server.sip.SipWakeLock: void reset()> (1)
<com.android.server.ConnectivityService: void access$1600(com.android.server.ConnectivityService,android.net.NetworkInfo)> (1)
<android.app.backup.IRestoreSession$Stub$Proxy: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> ()
<android.app.backup.IRestoreSession$Stub: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (2)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.btservice.ProfileService: boolean stop()> (1)
<com.android.browser.WebViewController: void onProgressChanged(com.android.browser.Tab)> (1)
<com.android.browser.ActivityController: void onResume()> (1)
<com.android.deskclock.stopwatch.StopwatchFragment$1: void onClick(android.view.View)> (1)
<com.android.emailsync.SyncManager$2: void run()> (1)
<com.android.emailsync.SyncManager: void done(com.android.emailsync.AbstractSyncService)> (1)
<com.android.emailsync.SyncManager: void stopAccountSyncs(long,boolean)> (5)
<com.android.exchange.ExchangeService: void releaseMailbox(long)> (1)
<com.android.exchange.ExchangeService: void reloadFolderList(android.content.Context,long,boolean)> (3)
<com.android.exchange.ExchangeService: void runAsleep(long,long)> (3)
<com.android.emailsync.SyncManager$CalendarObserver$1: void run()> (1)
<com.android.exchange.ExchangeService$CalendarObserver: void onChangeInBackground()> (1)
<com.android.exchange.ExchangeService: void stopManualSync(long)> (1)
<com.android.exchange.ExchangeService: void stopServiceThreads()> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.internal.telephony.cdma.CdmaConnection: void onRemoteDisconnect(int)> (1)
<com.android.internal.telephony.gsm.GsmConnection: void onRemoteDisconnect(int)> (1)
<android.net.CaptivePortalTracker: void onQuitting()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void onQuitting()> (1)
<android.net.wifi.SupplicantStateTracker: void onQuitting()> (1)
<android.net.wifi.WifiApConfigStore: void onQuitting()> (1)
<android.net.wifi.WifiStateMachine: void onQuitting()> (1)
<android.net.wifi.WifiWatchdogStateMachine: void onQuitting()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void onQuitting()> (1)
<com.android.bluetooth.btservice.AdapterState: void onQuitting()> (1)
<com.android.bluetooth.btservice.BondStateMachine: void onQuitting()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void onQuitting()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder: void onQuitting()> (1)
<com.android.internal.telephony.dataconnection.DataConnection: void onQuitting()> (1)
<com.android.internal.telephony.dataconnection.DcController: void onQuitting()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void onQuitting()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM: void onQuitting()> (1)
<com.android.server.NsdService$NsdStateMachine: void onQuitting()> (1)
<com.android.server.wifi.WifiController: void onQuitting()> (1)
<com.android.internal.telephony.RIL: void access$600(com.android.internal.telephony.RIL,int,boolean)> (1)
<com.android.internal.telephony.gsm.GsmCellBroadcastHandler: void onQuitting()> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleIdleTimeoutLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleIdleLocked()> (6)
<com.android.server.am.ActivityManagerService: void wakingUp()> (1)
<com.android.server.BackupManagerService$BackupRestoreTask: void execute()> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void clearBackupData(java.lang.String,java.lang.String)> ()
<android.app.backup.IBackupManager$Stub: void clearBackupData(java.lang.String,java.lang.String)> (2)
<com.android.server.sip.SipService$SipAutoReg: void onRegistering(android.net.sip.ISipSession)> (2)
<com.android.server.sip.SipService$SipSessionGroupExt: void close()> (2)
<android.app.backup.IRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)> (3)
<android.app.backup.IRestoreSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<com.android.bluetooth.btservice.ProfileService: void doStop(android.content.Intent)> (8)
<com.android.browser.Tab$3: void onProgressChanged(android.webkit.WebView,int)> (1)
<com.android.browser.BrowserActivity: void onResume()> (1)
<com.android.exchange.ExchangeService: void done(com.android.emailsync.AbstractSyncService)> (4)
<com.android.emailsync.SyncManager$AccountObserver: void onAccountChanged()> (2)
<com.android.emailsync.SyncManager: void stopAccountSyncs(long)> (1)
<com.android.emailsync.SyncManager: void stopNonAccountMailboxSyncsForAccount(long)> ()
<com.android.exchange.ExchangeService: void stopAccountSyncs(long,boolean)> (1)
<com.android.exchange.ExchangeService: void stopNonAccountMailboxSyncsForAccount(long)> (2)
<com.android.exchange.ExchangeService$1: void updateFolderList(long)> (2)
<com.android.exchange.ExchangeService$CalendarObserver: void access$400(com.android.exchange.ExchangeService$CalendarObserver)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$900(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.server.am.ActivityStack: void clearLaunchTime(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked(java.lang.String,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.String)> (7)
<com.android.server.am.ActivityRecord: void windowsVisible()> (1)
<com.android.server.am.ActivityStack: boolean ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String,int,boolean)> (1)
<android.app.ActivityManagerNative: void wakingUp()> (2)
<com.android.server.BackupManagerService$PerformBackupTask: void executeNextState(com.android.server.BackupManagerService$BackupState)> (4)
<android.app.backup.IBackupManager: void clearBackupData(java.lang.String,java.lang.String)> (1)
<com.android.server.sip.SipService$SipKeepAliveProcessCallback: void stop()> (2)
<android.app.backup.RestoreSession: int getAvailableRestoreSets(android.app.backup.RestoreObserver)> ()
<com.android.commands.bmgr.Bmgr: void doListRestoreSets()> (1)
<com.android.commands.bmgr.Bmgr: void doRestoreAll(long,java.util.HashSet)> (1)
<com.android.server.BackupManagerService$ActiveRestoreSession: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.bluetooth.a2dp.A2dpService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.gatt.GattService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStop(android.content.Intent)> (1)
<com.android.emailsync.SyncManager$AccountObserver: void access$100(com.android.emailsync.SyncManager$AccountObserver)> (2)
<com.android.exchange.ExchangeService$2: void onAccountChanged()> (1)
<com.android.exchange.ExchangeService: void stopAccountSyncs(long)> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.exchange.ExchangeService$CalendarObserver$1: void run()> (1)
<com.android.server.am.ActivityManagerService: boolean access$300(com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (13)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked(com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked(java.lang.String,int,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void forceStopUserLocked(int,java.lang.String)> (1)
<com.android.server.am.ActivityRecord$Token: void windowsVisible()> (2)
<com.android.server.am.ActivityStack: boolean ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int,boolean)> (2)
<android.app.IActivityManager: void wakingUp()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void agentErrorCleanup()> (2)
<com.android.server.BackupManagerService$PerformBackupTask: void beginBackup()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void invokeNextAgent()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void operationComplete()> (1)
<com.android.commands.bmgr.Bmgr: void doWipe()> (1)
<com.android.server.sip.SipService$SipKeepAliveProcessCallback: void onResponse(boolean)> (1)
<com.android.server.sip.SipService: void stopPortMappingMeasurement()> (2)
<com.android.commands.bmgr.Bmgr: void doList()> (1)
<com.android.commands.bmgr.Bmgr: void doRestore()> (1)
<com.android.emailsync.SyncManager$AccountObserver$2: void run()> (1)
<com.android.exchange.ExchangeService$2: void access$100(com.android.emailsync.SyncManager$AccountObserver)> (1)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.server.am.ActivityManagerService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: int access$100(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (3)
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void finishBooting()> (2)
<com.android.server.am.ActivityManagerService: void finishUserSwitch(com.android.server.am.UserStartedState)> (1)
<com.android.server.am.ActivityManagerService: boolean inputDispatchingTimedOut(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)> (4)
<com.android.server.am.ActivityManagerService: void finishUserStop(com.android.server.am.UserStartedState)> (1)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible()> ()
<android.view.IApplicationToken$Stub: void windowsVisible()> (2)
<com.android.server.am.ActivityStack: boolean ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int)> (3)
<com.android.server.am.ActivityStackSupervisor: void ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int)> (7)
<com.android.server.BackupManagerService$PerformBackupTask: int invokeAgentForBackup(java.lang.String,android.app.IBackupAgent,com.android.internal.backup.IBackupTransport)> (2)
<com.android.server.BackupManagerService$PerformBackupTask: void handleTimeout()> (1)
<com.android.server.BackupManagerService$BackupRestoreTask: void operationComplete()> (2)
<com.android.commands.bmgr.Bmgr: void run(java.lang.String[])> (1)
<com.android.server.sip.SipService: void restartPortMappingLifetimeMeasurement(android.net.sip.SipProfile,int)> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<android.app.ActivityManagerNative: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService$26: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted()> (5)
<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (1)
<com.android.server.am.ActivityRecord: boolean keyDispatchingTimedOut(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int)> (1)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean,boolean)> (5)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (4)
<com.android.server.am.ActivityManagerService$25: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible()> (1)
<com.android.server.am.ActivityStack: void goToSleep()> (1)
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.ActivityStackSupervisor: boolean attachApplicationLocked(com.android.server.am.ProcessRecord,boolean)> (1)
<com.android.server.BackupManagerService$BackupRestoreTask: void handleTimeout()> (1)
<com.android.server.BackupManagerService: void opComplete(int)> (2)
<com.android.commands.bmgr.Bmgr: void main(java.lang.String[])> ()
<com.android.server.sip.SipService: void access$1300(com.android.server.sip.SipService,android.net.sip.SipProfile,int)> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<android.app.IActivityManager: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (1)
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> ()
<android.content.IIntentReceiver$Stub: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActiveServices: void serviceTimeout(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService$10: void run()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run()> (1)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.ActivityManagerNative: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (2)
<com.android.server.am.ActivityRecord$Token: boolean keyDispatchingTimedOut(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked(java.lang.String,int,int,int,boolean,boolean,boolean,boolean,java.lang.String)> (3)
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.BroadcastQueue: void processNextBroadcast(boolean)> (6)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied()> (1)
<com.android.server.am.ActivityRecord$Token: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.CompatModePackages: void setFrontActivityScreenCompatModeLocked(int)> (1)
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(java.lang.String,int)> (2)
<com.android.server.BackupManagerService: void handleTimeout(int,java.lang.Object)> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int)> ()
<android.app.backup.IBackupManager$Stub: void opComplete(int)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)> (4)
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (14)
<android.content.IIntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrashInner(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<android.app.IActivityManager: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (1)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut(java.lang.String)> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest(com.android.server.am.ProcessRecord,android.app.Dialog)> (4)
<com.android.server.am.ActivityManagerService: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceInnerLocked(com.android.server.am.ActiveServices$ServiceMap,android.content.Intent,com.android.server.am.ServiceRecord,boolean,boolean)> (2)
<com.android.server.am.ActiveServices: void performServiceRestartLocked(com.android.server.am.ServiceRecord)> (1)
<android.app.ActivityManagerNative: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.BroadcastQueue: void backgroundServicesFinishedLocked(int)> (1)
<com.android.server.am.BroadcastQueue: void broadcastTimeoutLocked(boolean)> (3)
<com.android.server.am.BroadcastQueue: void scheduleBroadcastsLocked()> (7)
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> (1)
<com.android.server.am.CompatModeDialog$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.server.BackupManagerService: void prepareOperationTimeout(int,long,com.android.server.BackupManagerService$BackupRestoreTask)> (5)
<android.app.backup.IBackupManager: void opComplete(int)> (4)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)> (4)
<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (5)
<com.android.server.pm.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.PendingIntent$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IntentSender$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am$IntentReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$13: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$14: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$21: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$22: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$25: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$26: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$8: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService$11: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.BroadcastQueue: void performReceiveLocked(com.android.server.am.ProcessRecord,android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener$NativeCrashReporter: void run()> (2)
<com.android.server.wm.InputMonitor: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> (1)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut(java.lang.String)> (1)
<android.app.ActivityManagerNative: void killUid(int,java.lang.String)> (2)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,int)> (2)
<com.android.server.am.ActiveServices$ServiceMap: void rescheduleDelayedStarts()> (4)
<com.android.server.am.ActiveServices$ServiceRestarter: void run()> (1)
<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: void backgroundServicesFinishedLocked(int)> (1)
<com.android.server.am.BroadcastQueue: void setBroadcastTimeoutLocked(long)> (2)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (1)
<com.android.server.am.BroadcastQueue: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipPendingBroadcastLocked(int)> (1)
<android.app.ActivityManagerNative: void setPackageScreenCompatMode(java.lang.String,int)> (2)
<com.android.server.BackupManagerService$FullBackupObbConnection: boolean backupObbs(android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask$FullBackupRunner: void run()> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void initiateOneRestore(android.content.pm.PackageInfo,int,android.app.IBackupAgent,boolean)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)> (5)
<com.android.server.pm.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void unloadMediaPackages(java.util.HashMap,int[],boolean)> (1)
<com.android.server.pm.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.am.BroadcastQueue: void deliverToRegisteredReceiverLocked(com.android.server.am.BroadcastRecord,com.android.server.am.BroadcastFilter,boolean)> (1)
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.NativeCrashListener: void consumeNativeCrashData(java.io.FileDescriptor)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> (1)
<android.app.IActivityManager: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices$ServiceMap: void ensureNotStartingBackground(com.android.server.am.ServiceRecord)> (4)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (4)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void skipPendingBroadcastLocked(int)> (1)
<android.app.IActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> (2)
<com.android.server.BackupManagerService$PerformRestoreTask: void restoreNextAgent()> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void restorePmMetadata()> (1)
<android.app.IBackupAgent$Stub$Proxy: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package access$2100(com.android.server.pm.PackageManagerService,java.io.File,int,int,long,android.os.UserHandle)> (1)
<com.android.server.pm.PackageManagerService: boolean deleteSystemPackageLI(com.android.server.pm.PackageSetting,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (1)
<com.android.server.pm.PackageManagerService: void loadMediaPackages(java.util.HashMap,int[],java.util.HashSet)> (1)
<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)> (1)
<com.android.server.pm.PackageManagerService: void installPackageLI(com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int access$4100(com.android.server.pm.PackageManagerService,java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean,boolean)> (2)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener: void run()> (2)
<com.android.server.input.InputManagerService: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> ()
<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)> (5)
<com.android.server.BackupManagerService$PerformFullBackupTask: void backupOnePackage(android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> ()
<com.android.commands.am.Am: void runScreenCompat()> (1)
<android.app.IBackupAgent$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IBackupAgent: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<com.android.server.pm.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: void <init>(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService$7: void run()> (1)
<com.android.server.pm.PackageManagerService: void access$4600(com.android.server.pm.PackageManagerService,boolean,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void scanAvailableAsecs()> (1)
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> (1)
<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()> (1)
<com.android.server.am.ActiveServices: boolean forceStopLocked(java.lang.String,int,boolean,boolean)> (1)
<com.android.server.am.ActiveServices: void bringDownServiceIfNeededLocked(com.android.server.am.ServiceRecord,boolean,boolean)> (3)
<com.android.server.am.ActiveServices: void killServicesLocked(com.android.server.am.ProcessRecord,boolean)> (1)
<com.android.server.am.ActiveServices: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register(android.app.IActivityManager)> (1)
<com.android.server.am.ActivityManagerService: void trimApplications()> (5)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void access$200(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.commands.am.Am: void onRun()> (1)
<android.app.backup.BackupAgent$BackupServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreFileRunnable: void run()> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.IPackageManager main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService$10: void run()> (1)
<com.android.server.MountService$4: void run()> (2)
<com.android.server.am.ActiveServices: void removeConnectionLocked(com.android.server.am.ConnectionRecord,com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActiveServices: void stopServiceLocked(com.android.server.am.ServiceRecord)> (4)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces()> (1)
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> (1)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (5)
<com.android.server.MountService: void onDaemonConnected()> (1)
<com.android.server.am.ActiveServices: void cleanUpRemovedTaskLocked(com.android.server.am.TaskRecord,android.content.ComponentName,android.content.Intent)> (1)
<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)> (2)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<android.app.ActivityManagerNative: void setProcessLimit(int)> (2)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,boolean)> (4)
<com.android.server.INativeDaemonConnectorCallbacks: void onDaemonConnected()> (1)
<com.android.server.am.ActivityManagerService: void cleanUpRemovedTaskLocked(com.android.server.am.TaskRecord,int)> (1)
<com.android.server.am.ActiveServices: boolean attachApplicationLocked(com.android.server.am.ProcessRecord,java.lang.String)> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
<android.app.IActivityManager: void setProcessLimit(int)> ()
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.server.power.PowerManagerService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> (3)
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> ()
<android.os.IPowerManager$Stub: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> (2)
<com.android.server.power.PowerManagerService: void updateWakeLockUids(android.os.IBinder,int[])> (2)
<android.os.IPowerManager: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)> (1)
<android.os.IPowerManager$Stub$Proxy: void updateWakeLockUids(android.os.IBinder,int[])> ()
<android.os.IPowerManager$Stub: void updateWakeLockUids(android.os.IBinder,int[])> (2)
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)> (9)
<android.os.IPowerManager: void updateWakeLockUids(android.os.IBinder,int[])> ()
<android.net.wifi.WifiStateMachine: void updateBatteryWorkSource(android.os.WorkSource)> (3)
<com.android.server.AlarmManagerService: void setWakelockWorkSource(android.app.PendingIntent,android.os.WorkSource)> (2)
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<android.net.wifi.WifiStateMachine$DriverStartedState: void exit()> (1)
<com.android.server.wifi.WifiController: void updateBatteryWorkSource()> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiverLocked(android.location.ILocationListener,int,int,java.lang.String,android.os.WorkSource,boolean)> (1)
<com.android.server.wifi.WifiController: void access$700(com.android.server.wifi.WifiController)> (2)
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver checkListenerOrIntentLocked(android.location.ILocationListener,android.app.PendingIntent,int,int,java.lang.String,android.os.WorkSource,boolean)> (2)
<com.android.server.wifi.WifiController$DefaultState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.ILocationManager: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)> (2)
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> ()
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> (6)
<com.android.camera.LocationManager: void stopReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)> (1)
<com.android.wallpaper.grass.GrassRS: void stop()> (1)
<com.android.server.TwilightService$LocationHandler: void requestLocationUpdate()> (1)
<com.android.camera.LocationManager: void recordLocation(boolean)> (8)
<com.android.server.location.LocationBasedCountryDetector: void stop()> (3)
<com.android.wallpaper.RenderScriptScene: void stop()> (6)
<com.android.server.TwilightService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.camera.PhotoModule: void initializeFirstTime()> (1)
<com.android.camera.PhotoModule: void initializeSecondTime()> (1)
<com.android.camera.PhotoModule: void onPauseAfterSuper()> (1)
<com.android.camera.PhotoModule: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoModule: void onPauseBeforeSuper()> (1)
<com.android.camera.VideoModule: void onResumeAfterSuper()> (1)
<com.android.camera.VideoModule: void onSharedPreferenceChanged()> (1)
<com.android.camera.WideAnglePanoramaModule: void onPauseBeforeSuper()> (1)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.server.location.LocationBasedCountryDetector$1: void onLocationChanged(android.location.Location)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.wallpaper.fall.FallRS: void stop()> (1)
<com.android.wallpaper.galaxy.GalaxyRS: void stop()> (1)
<com.android.wallpaper.nexus.NexusRS: void stop()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void destroyRenderer()> (2)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.camera.PhotoModule: void access$700(com.android.camera.PhotoModule)> (2)
<com.android.camera.PhotoModule: void onResumeTasks()> (2)
<com.android.camera.CameraModule: void onPauseAfterSuper()> ()
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.PhotoModule: void setLocationPreference(java.lang.String)> (1)
<com.android.camera.CameraModule: void onPauseBeforeSuper()> ()
<com.android.camera.CameraModule: void onResumeAfterSuper()> ()
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onDestroy()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceDestroyed(android.view.SurfaceHolder)> (1)
<com.android.camera.PhotoModule: void access$3800(com.android.camera.PhotoModule)> (1)
<com.android.camera.PhotoModule: void onResumeAfterSuper()> (1)
<com.android.camera.PieController: void onSettingChanged(com.android.camera.ListPreference)> (5)
<com.android.camera.PhotoModule: void enableRecordingLocation(boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.camera.PhotoModule$5: void run()> (1)
<com.android.camera.PhotoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PieController$1: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.PieController$2: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.VideoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.VideoMenu: void onSettingChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.PhotoController: void enableRecordingLocation(boolean)> (2)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.camera.PhotoMenu: void onListPrefChanged(com.android.camera.ListPreference)> (2)
<com.android.camera.ui.PieItem$OnClickListener: void onClick(com.android.camera.ui.PieItem)> (1)
<com.android.camera.ui.ListPrefSettingPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.TimeIntervalPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.MoreSettingPopup$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.PhotoUI$7: void onCancel(android.content.DialogInterface)> (1)
<com.android.camera.PhotoUI$9: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.camera.ui.CountdownTimerPopup$Listener: void onListPrefChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.PieItem: void performClick()> (1)
<com.android.camera.ui.ListPrefSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.TimeIntervalPopup: void updateInputState()> (1)
<com.android.camera.ui.MoreSettingPopup: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.CountdownTimerPopup: void updateInputState()> (1)
<com.android.camera.ui.PieRenderer$3: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.camera.ui.TimeIntervalPopup: void access$000(com.android.camera.ui.TimeIntervalPopup)> (1)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged(com.android.camera.ListPreference)> (1)
<com.android.camera.ui.CountdownTimerPopup: void access$000(com.android.camera.ui.CountdownTimerPopup)> (1)
<com.android.camera.ui.TimeIntervalPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (2)
<com.android.camera.ui.CountdownTimerPopup$2: void onClick(android.view.View)> (1)
<com.android.camera.ui.InLineSettingCheckBox: boolean changeIndex(int)> (2)
<com.android.camera.ui.InLineSettingMenu: boolean changeIndex(int)> (1)
<com.android.camera.ui.InLineSettingCheckBox$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void addSmsEntry()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpSmsTable()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpMessages()> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusDeleted(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int setMessageStatus(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onPut(javax.obex.Operation)> ()
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageSms(long)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
Permission:android.permission.CHANGE_NETWORK_STATE
288 Callers:
<com.android.server.ConnectivityService: void enforceChangePermission()> (7)
<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,byte[],java.lang.String)> (4)
<com.android.server.ConnectivityService: boolean setRadio(int,boolean)> (2)
<com.android.server.ConnectivityService: boolean setRadios(boolean)> (2)
<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (3)
<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)> (2)
<com.android.server.ConnectivityService: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[],java.lang.String)> ()
<android.net.IConnectivityManager$Stub: boolean requestRouteToHostAddress(int,byte[],java.lang.String)> (2)
<com.android.server.ConnectivityService: boolean requestRouteToHost(int,int,java.lang.String)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer isMobileOk(com.android.server.ConnectivityService$CheckMp$Params)> (1)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadio(int,boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> ()
<android.net.IConnectivityManager$Stub: boolean setRadios(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> ()
<android.net.IConnectivityManager$Stub: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> ()
<android.net.IConnectivityManager$Stub: void setMobileDataEnabled(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> ()
<android.net.IConnectivityManager$Stub: void setNetworkPreference(int)> (2)
<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[],java.lang.String)> (1)
<android.net.IConnectivityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int,java.lang.String)> ()
<android.net.IConnectivityManager$Stub: boolean requestRouteToHost(int,int,java.lang.String)> (2)
<com.android.server.ConnectivityService$CheckMp: java.lang.Integer doInBackground(com.android.server.ConnectivityService$CheckMp$Params[])> (1)
<android.net.IConnectivityManager: boolean setRadio(int,boolean)> (1)
<android.net.IConnectivityManager: boolean setRadios(boolean)> (1)
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> (2)
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<android.net.IConnectivityManager: void setMobileDataEnabled(boolean)> (1)
<android.net.IConnectivityManager: void setNetworkPreference(int)> (3)
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)> (2)
<com.android.server.ConnectivityService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.IConnectivityManager: boolean requestRouteToHost(int,int,java.lang.String)> ()
<com.android.server.ConnectivityService$CheckMp: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> ()
<android.net.ConnectivityManager: boolean setRadios(boolean)> ()
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOnUpstreamMobileConnection(int)> (3)
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean turnOffUpstreamMobileConnection()> (4)
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> ()
<android.net.ConnectivityManager: void setNetworkPreference(int)> ()
<com.android.commands.svc.DataCommand: void run(java.lang.String[])> (1)
<com.android.commands.svc.WifiCommand: void run(java.lang.String[])> (1)
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)> (2)
<com.android.development.Connectivity: void onRoutedRequest(int)> (2)
<com.android.development.Connectivity$3: void onClick(android.view.View)> (1)
<com.android.development.Connectivity: void onCrash()> (1)
<com.android.server.location.GpsLocationProvider: void reportAGpsStatus(int,int,int)> ()
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOnUpstreamMobileConnection(int)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void chooseUpstreamType(boolean)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOnUpstreamMobileConnection(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean turnOffUpstreamMobileConnection()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean turnOffUpstreamMobileConnection()> (2)
<com.android.commands.svc.Svc$Command: void run(java.lang.String[])> (1)
<com.android.server.location.GpsLocationProvider: void handleUpdateNetworkState(int,android.net.NetworkInfo)> (1)
<com.android.development.Connectivity: void onRoutedHttpRequest()> (1)
<com.android.development.Connectivity: void onRoutedSocketRequest()> (1)
<com.android.development.Connectivity: void access$3800(com.android.development.Connectivity)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void chooseUpstreamType(boolean)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void chooseUpstreamType(boolean)> (3)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: boolean processMessage(android.os.Message)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void exit()> (1)
<com.android.commands.svc.Svc: void main(java.lang.String[])> ()
<com.android.server.location.GpsLocationProvider: void access$2500(com.android.server.location.GpsLocationProvider,int,android.net.NetworkInfo)> (1)
<com.android.development.Connectivity: void access$3300(com.android.development.Connectivity)> (1)
<com.android.development.Connectivity: void access$3200(com.android.development.Connectivity)> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void enter()> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: void exit()> (106)
<com.android.internal.util.State: void enter()> (36)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void exit()> (1)
<android.net.CaptivePortalTracker$DefaultState: void exit()> (1)
<android.net.CaptivePortalTracker$DelayedCaptiveCheckState: void exit()> (1)
<android.net.CaptivePortalTracker$NoActiveNetworkState: void exit()> (1)
<android.net.DhcpStateMachine$RunningState: void exit()> (1)
<android.net.DhcpStateMachine$StoppedState: void exit()> (1)
<android.net.DhcpStateMachine$WaitBeforeStartState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$OngoingGroupRemovalState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void exit()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$ProvisionDiscoveryState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$CompletedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DefaultState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$HandshakeState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: void exit()> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$ActiveState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void exit()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void exit()> (1)
<android.net.wifi.WifiStateMachine$CaptivePortalCheckState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$InitialState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ObtainingIpState: void exit()> (1)
<android.net.wifi.WifiStateMachine$ScanModeState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void exit()> (1)
<android.net.wifi.WifiStateMachine$TetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$UntetheringState: void exit()> (1)
<android.net.wifi.WifiStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$ConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$DefaultState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$LinkMonitoringState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$VerifyingLinkState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState: void exit()> (1)
<android.net.wifi.WifiWatchdogStateMachine$WatchdogEnabledState: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OffState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$OnState: void exit()> (1)
<com.android.bluetooth.btservice.AdapterState$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: void exit()> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void exit()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void exit()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void exit()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcRetryingState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void exit()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void exit()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void exit()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void exit()> (1)
<com.android.internal.util.IState: void exit()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void exit()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeExitMethods(com.android.internal.util.StateMachine$SmHandler$StateInfo)> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void exit()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void exit()> (1)
<com.android.server.NsdService$NsdStateMachine$DisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void exit()> (1)
<com.android.server.wifi.WifiController$ApStaDisabledState: void exit()> (1)
<com.android.server.wifi.WifiController$DefaultState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceActiveState: void exit()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void exit()> (1)
<com.android.server.wifi.WifiController$EcmState: void exit()> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: void exit()> (1)
<com.android.server.wifi.WifiController$StaDisabledWithScanState: void exit()> (1)
<com.android.server.wifi.WifiController$StaEnabledState: void exit()> (1)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.server.ConnectivityService: void enforceTetherChangePermission()> (3)
<com.android.server.ConnectivityService: int setUsbTethering(boolean)> (2)
<com.android.server.ConnectivityService: int tether(java.lang.String)> (2)
<com.android.server.ConnectivityService: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> ()
<android.net.IConnectivityManager$Stub: int setUsbTethering(boolean)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int tether(java.lang.String)> (2)
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> ()
<android.net.IConnectivityManager$Stub: int untether(java.lang.String)> (2)
<android.net.IConnectivityManager: int setUsbTethering(boolean)> (1)
<android.net.IConnectivityManager: int tether(java.lang.String)> (1)
<android.net.IConnectivityManager: int untether(java.lang.String)> (1)
<android.net.ConnectivityManager: int setUsbTethering(boolean)> ()
<android.net.ConnectivityManager: int tether(java.lang.String)> (2)
<android.net.ConnectivityManager: int untether(java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: boolean startTethering(java.util.ArrayList)> (1)
<com.android.bluetooth.pan.PanService: java.lang.String enableTethering(java.lang.String)> (1)
<android.net.wifi.WifiStateMachine: void stopTethering()> (1)
<android.net.wifi.WifiStateMachine: boolean access$23000(android.net.wifi.WifiStateMachine,java.util.ArrayList)> (1)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<android.net.wifi.WifiStateMachine: void access$24200(android.net.wifi.WifiStateMachine)> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> ()
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> ()
Permission:android.permission.SET_WALLPAPER
1111 Callers:
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager$Stub$Proxy: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> ()
<android.app.IWallpaperManager$Stub: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (2)
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)> (3)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)> (2)
<android.app.WallpaperManager: void setResource(int)> (1)
<android.app.WallpaperManager: void setStream(java.io.InputStream)> (3)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)> (1)
<com.android.browser.WallpaperHandler: void run()> (2)
<android.app.WallpaperManager: void clear()> (1)
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)> (1)
<com.android.camera.crop.CropActivity$BitmapIOTask: java.lang.Boolean doInBackground(android.graphics.Bitmap[])> (1)
<com.android.gallery3d.filtershow.crop.CropActivity$BitmapIOTask: java.lang.Boolean doInBackground(android.graphics.Bitmap[])> (1)
<android.content.Context: void setWallpaper(android.graphics.Bitmap)> (1)
<com.android.browser.WallpaperHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<android.app.ContextImpl: void clearWallpaper()> (1)
<android.content.Context: void setWallpaper(java.io.InputStream)> (1)
<com.android.camera.crop.CropActivity$BitmapIOTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.gallery3d.filtershow.crop.CropActivity$BitmapIOTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> (363)
<android.content.Context: void clearWallpaper()> (1)
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> (363)
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.accounts.CantAddAccountActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.accounts.ChooseAccountActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.accounts.ChooseAccountTypeActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)> (4)
<android.app.Activity: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.app.Application: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.backup.BackupAgent: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.backup.FullBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.app.IntentService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.LauncherActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.app.NativeActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.app.Presentation$1: void setWallpaper(android.graphics.Bitmap)> (3)
<android.app.ReceiverRestrictedContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.Service: void setWallpaper(android.graphics.Bitmap)> (2)
<android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)> (2)
<android.content.SyncActivityTooManyDeletes: void setWallpaper(android.graphics.Bitmap)> (4)
<android.hardware.location.GeofenceHardwareService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.inputmethodservice.InputMethodService: void setWallpaper(android.graphics.Bitmap)> (3)
<android.location.SettingInjectorService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.net.VpnService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.nfc.cardemulation.HostApduService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.nfc.cardemulation.OffHostApduService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.preference.PreferenceActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<android.printservice.PrintService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.dreams.DreamService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.notification.NotificationListenerService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.textservice.SpellCheckerService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.wallpaper.WallpaperService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<android.speech.RecognitionService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.speech.tts.TextToSpeechService: void setWallpaper(android.graphics.Bitmap)> (2)
<android.support.v4.app.FragmentActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<android.test.ActivityUnitTestCase$MockParent: void setWallpaper(android.graphics.Bitmap)> (4)
<android.test.IsolatedContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.test.mock.MockApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<android.test.RenamingDelegatingContext: void setWallpaper(android.graphics.Bitmap)> (2)
<android.view.ContextThemeWrapper: void setWallpaper(android.graphics.Bitmap)> (2)
<android.widget.RemoteViewsService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.a2dp.A2dpService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.btservice.AdapterApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.btservice.AdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.bluetooth.btservice.ProfileService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.bluetooth.gatt.GattService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.hdp.HealthService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.hfp.HeadsetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.hid.HidService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.map.BluetoothMapService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.bluetooth.opp.TestActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.bluetooth.pan.PanService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.browser.AddBookmarkPage: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.browser.BookmarkSearch: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.browser.BrowserActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.browser.BrowserBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.BrowserPreferencesPage: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.browser.Browser: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.ComboViewActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.browser.ShortcutActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.calculator2.Calculator: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.AbstractCalendarActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.alerts.AlertActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.alerts.AlertService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.alerts.InitAlarmsService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.AllInOneActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.CalendarApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.calendar.CalendarBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.CalendarSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.calendar.event.EditEventActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.EventInfoActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.SearchActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.camera.app.CameraApp: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.camera.CameraActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.camera.CameraBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.camera.crop.CropActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.camera.MediaSaveService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.camera.ProxyLauncher: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.camera.SecureCameraActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.certinstaller.CertInstallerMain: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.certinstaller.CertInstaller: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.alarms.AlarmActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.alarms.AlarmService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.deskclock.DeskClock: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.HandleApiCalls: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.ScreensaverActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.deskclock.Screensaver: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.deskclock.SettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.deskclock.TimerRingService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.AccountsTester: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.AppHwConfigList: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.development.AppHwPref: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.BadBehaviorActivity$BadService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.development.BadBehaviorActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.CacheAbuser: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.ConfigurationViewer: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.Connectivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.DataList: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.development.Details: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.Development: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.development.InstrumentationList: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.development.LogViewer: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.MediaScannerActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.PackageBrowser: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.development.PackageSummary: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.PermissionDetails: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.PointerLocation: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.ProcessInfo: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.RunningProcesses: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.development.ShowActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.SyncAdapterDriver: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.development.UnderdevelopedSettings: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.documentsui.DocumentsActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.documentsui.DocumentsApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.documentsui.SettingsActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.documentsui.TestActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.dreams.basic.Colors: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.dreams.phototable.FlipperDream: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.dreams.phototable.PhotoTableDream: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email2.ui.MailActivityEmail: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.email.activity.ComposeActivityEmail: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.email.activity.EventViewer: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSecurity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSettings: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.email.activity.setup.AccountSetupNames: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.email.activity.setup.AccountSetupType: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.email.activity.setup.MailboxSettings: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.EmailApplication: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.EmailIntentService: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.provider.FolderPickerActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.email.service.AccountService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.AttachmentDownloadService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.AuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.EasAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.EasTestAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.ImapAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.ImapService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.PolicyService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.Pop3AuthenticatorService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.Pop3Service: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.email.service.Pop3SyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.email.service.PopImapSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.emailsync.SyncManager: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.EasCertificateRequestor: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.exchange.ExchangeService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.exchange.Exchange: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.exchange.service.EasService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.exchange.SettingsRedirector: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.ex.photo.PhotoViewActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.galaxy4.Galaxy4: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.app.AlbumPicker: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.gallery3d.app.BatchService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.gallery3d.app.DialogPicker: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.gallery3d.app.GalleryActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.gallery3d.app.Gallery: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.app.MovieActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.gallery3d.app.PickerActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.gallery3d.app.TrimVideo: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.app.Wallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.gadget.WidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.ingest.IngestActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.gallery3d.ingest.IngestService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.gallery3d.settings.GallerySettings: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.latin.BackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.latin.LatinIME: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.inputmethod.research.FeedbackActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.inputmethod.research.ReplayerService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.inputmethod.research.UploaderService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.internal.app.AlertActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.internal.app.ChooserActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.internal.app.DisableCarModeActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.internal.app.NetInitiatedActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.internal.app.PlatLogoActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.internal.app.ResolverActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.internal.app.RestrictionsPinActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.internal.backup.LocalTransportService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.internal.util.AsyncService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.keychain.KeyChainActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.magicsmoke.MagicSmoke: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mail.browse.EmlViewerActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.mail.compose.AutoSendActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.mail.compose.ComposeActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.mail.compose.EmptyService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.mail.MailIntentService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mail.MailLogService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.mail.NotificationActionIntentService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void setWallpaper(android.graphics.Bitmap)> (6)
<com.android.mail.ui.AbstractMailActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.mail.ui.CreateShortcutActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.mail.ui.FolderSelectionActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.mail.ui.MailActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.mail.ui.ShortcutNameActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.mail.widget.WidgetService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.music.AlbumBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.music.AudioPreview: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.CreatePlaylist: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.DeleteItems: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.MediaPickerActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.music.MediaPlaybackActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.MediaPlaybackService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.music.MusicBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.MusicPicker: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.music.PlaylistBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.music.QueryBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.music.RenamePlaylist: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.ScanningProgress: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.TrackBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.music.VideoBrowserActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.musicvis.RenderScriptWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.vis1.Visualization1: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.musicvis.vis2.Visualization2: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.musicvis.vis3.Visualization3: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.musicvis.vis4.Visualization4: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.musicvis.vis5.Visualization5: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.music.WeekSelector: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.noisefield.NoiseField: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.packageinstaller.GrantActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.packageinstaller.InstallAppProgress: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.packageinstaller.UninstallAppProgress: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.packageinstaller.UninstallerActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.pacprocessor.PacService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.phasebeam.PhaseBeam: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.photos.AlbumActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.photos.FullscreenViewer: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.photos.GalleryActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.printspooler.PrintJobConfigActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.printspooler.PrintSpoolerService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.printspooler.SelectPrinterActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.providers.downloads.ui.DownloadList: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.provision.DefaultActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.quicksearchbox.DialogActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.quicksearchbox.SearchActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.server.PackageManagerBackupAgent: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.server.ShutdownActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.server.SystemBackupAgent: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.smspush.WapPushManager: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.soundrecorder.SoundRecorder: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.tts.compat.CompatTtsService: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.videoeditor.KenBurnsActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.videoeditor.NoSearchActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.videoeditor.OverlayTitleEditor: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.videoeditor.ProjectsActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.videoeditor.service.ApiService: void setWallpaper(android.graphics.Bitmap)> (2)
<com.android.videoeditor.TransitionsActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.videoeditor.VideoEditorActivity: void setWallpaper(android.graphics.Bitmap)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.fall.Fall: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.fall.FallWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.galaxy.Galaxy: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.grass.Grass: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void setWallpaper(android.graphics.Bitmap)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void setWallpaper(android.graphics.Bitmap)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void setWallpaper(android.graphics.Bitmap)> (3)
<com.svox.pico.CheckVoiceData: void setWallpaper(android.graphics.Bitmap)> (4)
<com.svox.pico.DownloadVoiceData: void setWallpaper(android.graphics.Bitmap)> (4)
<com.svox.pico.EngineSettings: void setWallpaper(android.graphics.Bitmap)> (6)
<com.svox.pico.GetSampleText: void setWallpaper(android.graphics.Bitmap)> (4)
<com.svox.pico.PicoService: void setWallpaper(android.graphics.Bitmap)> (4)
<com.svox.pico.Pico: void setWallpaper(android.graphics.Bitmap)> (4)
<android.content.ContextWrapper: void clearWallpaper()> (363)
<android.accessibilityservice.AccessibilityService: void setWallpaper(java.io.InputStream)> (2)
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> (4)
<android.accounts.CantAddAccountActivity: void setWallpaper(java.io.InputStream)> (4)
<android.accounts.ChooseAccountActivity: void setWallpaper(java.io.InputStream)> (4)
<android.accounts.ChooseAccountTypeActivity: void setWallpaper(java.io.InputStream)> (4)
<android.accounts.ChooseTypeAndAccountActivity: void setWallpaper(java.io.InputStream)> (4)
<android.accounts.GrantCredentialsPermissionActivity: void setWallpaper(java.io.InputStream)> (4)
<android.app.ActivityGroup: void setWallpaper(java.io.InputStream)> (4)
<android.app.Activity: void setWallpaper(java.io.InputStream)> (3)
<android.app.AliasActivity: void setWallpaper(java.io.InputStream)> (4)
<android.app.Application: void setWallpaper(java.io.InputStream)> (2)
<android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)> (3)
<android.app.backup.BackupAgent: void setWallpaper(java.io.InputStream)> (2)
<android.app.backup.FullBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)> (4)
<android.app.IntentService: void setWallpaper(java.io.InputStream)> (2)
<android.app.LauncherActivity: void setWallpaper(java.io.InputStream)> (5)
<android.app.ListActivity: void setWallpaper(java.io.InputStream)> (4)
<android.app.NativeActivity: void setWallpaper(java.io.InputStream)> (4)
<android.app.Presentation$1: void setWallpaper(java.io.InputStream)> (3)
<android.app.ReceiverRestrictedContext: void setWallpaper(java.io.InputStream)> (2)
<android.app.Service: void setWallpaper(java.io.InputStream)> (2)
<android.app.TabActivity: void setWallpaper(java.io.InputStream)> (5)
<android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)> (2)
<android.content.SyncActivityTooManyDeletes: void setWallpaper(java.io.InputStream)> (4)
<android.hardware.location.GeofenceHardwareService: void setWallpaper(java.io.InputStream)> (2)
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(java.io.InputStream)> (2)
<android.inputmethodservice.InputMethodService: void setWallpaper(java.io.InputStream)> (3)
<android.location.SettingInjectorService: void setWallpaper(java.io.InputStream)> (2)
<android.net.VpnService: void setWallpaper(java.io.InputStream)> (2)
<android.nfc.cardemulation.HostApduService: void setWallpaper(java.io.InputStream)> (2)
<android.nfc.cardemulation.OffHostApduService: void setWallpaper(java.io.InputStream)> (2)
<android.preference.PreferenceActivity: void setWallpaper(java.io.InputStream)> (5)
<android.printservice.PrintService: void setWallpaper(java.io.InputStream)> (2)
<android.service.dreams.DreamService: void setWallpaper(java.io.InputStream)> (2)
<android.service.notification.NotificationListenerService: void setWallpaper(java.io.InputStream)> (2)
<android.service.textservice.SpellCheckerService: void setWallpaper(java.io.InputStream)> (2)
<android.service.wallpaper.WallpaperService: void setWallpaper(java.io.InputStream)> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<android.speech.RecognitionService: void setWallpaper(java.io.InputStream)> (2)
<android.speech.tts.TextToSpeechService: void setWallpaper(java.io.InputStream)> (2)
<android.support.v4.app.FragmentActivity: void setWallpaper(java.io.InputStream)> (4)
<android.test.ActivityUnitTestCase$MockParent: void setWallpaper(java.io.InputStream)> (4)
<android.test.IsolatedContext: void setWallpaper(java.io.InputStream)> (2)
<android.test.mock.MockApplication: void setWallpaper(java.io.InputStream)> (3)
<android.test.RenamingDelegatingContext: void setWallpaper(java.io.InputStream)> (2)
<android.view.ContextThemeWrapper: void setWallpaper(java.io.InputStream)> (2)
<android.widget.RemoteViewsService: void setWallpaper(java.io.InputStream)> (2)
<com.android.alarmclock.DigitalAppWidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.a2dp.A2dpService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.btservice.AdapterApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.btservice.AdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.bluetooth.btservice.ProfileService: void setWallpaper(java.io.InputStream)> (2)
<com.android.bluetooth.gatt.GattService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.hdp.HealthService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.hfp.HeadsetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.hid.HidService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.map.BluetoothMapService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void setWallpaper(java.io.InputStream)> (4)
<com.android.bluetooth.opp.BluetoothOppService: void setWallpaper(java.io.InputStream)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void setWallpaper(java.io.InputStream)> (4)
<com.android.bluetooth.opp.TestActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.bluetooth.pan.PanService: void setWallpaper(java.io.InputStream)> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void setWallpaper(java.io.InputStream)> (2)
<com.android.browser.AddBookmarkPage: void setWallpaper(java.io.InputStream)> (4)
<com.android.browser.BookmarkSearch: void setWallpaper(java.io.InputStream)> (4)
<com.android.browser.BrowserActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.browser.BrowserBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.BrowserPreferencesPage: void setWallpaper(java.io.InputStream)> (6)
<com.android.browser.Browser: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.ComboViewActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.browser.ShortcutActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void setWallpaper(java.io.InputStream)> (5)
<com.android.calculator2.Calculator: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.AbstractCalendarActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.alerts.AlertActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.alerts.AlertService: void setWallpaper(java.io.InputStream)> (2)
<com.android.calendar.alerts.DismissAlarmsService: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.alerts.InitAlarmsService: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.alerts.QuickResponseActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.AllInOneActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.AsyncQueryServiceHelper: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.CalendarApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.calendar.CalendarBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.CalendarSettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.calendar.event.EditEventActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.EventInfoActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.SearchActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.camera.app.CameraApp: void setWallpaper(java.io.InputStream)> (3)
<com.android.camera.CameraActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.camera.CameraBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.camera.crop.CropActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.camera.MediaSaveService: void setWallpaper(java.io.InputStream)> (2)
<com.android.camera.ProxyLauncher: void setWallpaper(java.io.InputStream)> (4)
<com.android.camera.SecureCameraActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.certinstaller.CertInstallerMain: void setWallpaper(java.io.InputStream)> (6)
<com.android.certinstaller.CertInstaller: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.alarms.AlarmActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.alarms.AlarmService: void setWallpaper(java.io.InputStream)> (2)
<com.android.deskclock.DeskClock: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.HandleApiCalls: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.ScreensaverActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.deskclock.Screensaver: void setWallpaper(java.io.InputStream)> (3)
<com.android.deskclock.SettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.deskclock.stopwatch.StopwatchService: void setWallpaper(java.io.InputStream)> (2)
<com.android.deskclock.TimerRingService: void setWallpaper(java.io.InputStream)> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void setWallpaper(java.io.InputStream)> (4)
<com.android.deskclock.worldclock.CitiesActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.AccountsTester: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.AppHwConfigList: void setWallpaper(java.io.InputStream)> (5)
<com.android.development.AppHwPref: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.BadBehaviorActivity$BadService: void setWallpaper(java.io.InputStream)> (2)
<com.android.development.BadBehaviorActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.CacheAbuser: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.ConfigurationViewer: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.Connectivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.DataList: void setWallpaper(java.io.InputStream)> (5)
<com.android.development.Details: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.Development: void setWallpaper(java.io.InputStream)> (6)
<com.android.development.InstrumentationList: void setWallpaper(java.io.InputStream)> (5)
<com.android.development.LogViewer: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.MediaScannerActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.PackageBrowser: void setWallpaper(java.io.InputStream)> (5)
<com.android.development.PackageSummary: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.PermissionDetails: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.PointerLocation: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.ProcessInfo: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.RunningProcesses: void setWallpaper(java.io.InputStream)> (5)
<com.android.development.ShowActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.SyncAdapterDriver: void setWallpaper(java.io.InputStream)> (4)
<com.android.development.UnderdevelopedSettings: void setWallpaper(java.io.InputStream)> (6)
<com.android.documentsui.DocumentsActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.documentsui.DocumentsApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.documentsui.SettingsActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.documentsui.TestActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.dreams.basic.Colors: void setWallpaper(java.io.InputStream)> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void setWallpaper(java.io.InputStream)> (5)
<com.android.dreams.phototable.FlipperDream: void setWallpaper(java.io.InputStream)> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void setWallpaper(java.io.InputStream)> (6)
<com.android.dreams.phototable.PhotoTableDream: void setWallpaper(java.io.InputStream)> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void setWallpaper(java.io.InputStream)> (4)
<com.android.email2.ui.MailActivityEmail: void setWallpaper(java.io.InputStream)> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void setWallpaper(java.io.InputStream)> (6)
<com.android.email.activity.ComposeActivityEmail: void setWallpaper(java.io.InputStream)> (5)
<com.android.email.activity.EventViewer: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSecurity: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSettings: void setWallpaper(java.io.InputStream)> (6)
<com.android.email.activity.setup.AccountSetupActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.activity.setup.AccountSetupBasics: void setWallpaper(java.io.InputStream)> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void setWallpaper(java.io.InputStream)> (5)
<com.android.email.activity.setup.AccountSetupNames: void setWallpaper(java.io.InputStream)> (5)
<com.android.email.activity.setup.AccountSetupOptions: void setWallpaper(java.io.InputStream)> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void setWallpaper(java.io.InputStream)> (5)
<com.android.email.activity.setup.AccountSetupType: void setWallpaper(java.io.InputStream)> (5)
<com.android.email.activity.setup.MailboxSettings: void setWallpaper(java.io.InputStream)> (6)
<com.android.emailcommon.utility.CertificateRequestor: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.EmailApplication: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.EmailIntentService: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.provider.FolderPickerActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.email.service.AccountService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.AttachmentDownloadService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.AuthenticatorService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.EasAuthenticatorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.EasTestAuthenticatorService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.EmailBroadcastProcessorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.ImapAuthenticatorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.ImapService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.PolicyService: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.Pop3AuthenticatorService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.Pop3Service: void setWallpaper(java.io.InputStream)> (2)
<com.android.email.service.Pop3SyncAdapterService: void setWallpaper(java.io.InputStream)> (3)
<com.android.email.service.PopImapSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.emailsync.SyncManager: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.EasCertificateRequestor: void setWallpaper(java.io.InputStream)> (5)
<com.android.exchange.ExchangeService: void setWallpaper(java.io.InputStream)> (3)
<com.android.exchange.Exchange: void setWallpaper(java.io.InputStream)> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void setWallpaper(java.io.InputStream)> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void setWallpaper(java.io.InputStream)> (3)
<com.android.exchange.service.EasService: void setWallpaper(java.io.InputStream)> (2)
<com.android.exchange.service.EmailSyncAdapterService: void setWallpaper(java.io.InputStream)> (3)
<com.android.exchange.SettingsRedirector: void setWallpaper(java.io.InputStream)> (4)
<com.android.ex.photo.PhotoViewActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.galaxy4.Galaxy4: void setWallpaper(java.io.InputStream)> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.app.AlbumPicker: void setWallpaper(java.io.InputStream)> (6)
<com.android.gallery3d.app.BatchService: void setWallpaper(java.io.InputStream)> (2)
<com.android.gallery3d.app.DialogPicker: void setWallpaper(java.io.InputStream)> (6)
<com.android.gallery3d.app.GalleryActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.gallery3d.app.GalleryAppImpl: void setWallpaper(java.io.InputStream)> (3)
<com.android.gallery3d.app.Gallery: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.app.MovieActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void setWallpaper(java.io.InputStream)> (3)
<com.android.gallery3d.app.PickerActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.gallery3d.app.TrimVideo: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.app.Wallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void setWallpaper(java.io.InputStream)> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.gadget.WidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.ingest.IngestActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.gallery3d.ingest.IngestService: void setWallpaper(java.io.InputStream)> (2)
<com.android.gallery3d.settings.GallerySettings: void setWallpaper(java.io.InputStream)> (6)
<com.android.htmlviewer.HTMLViewerActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void setWallpaper(java.io.InputStream)> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.latin.BackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.latin.LatinIME: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void setWallpaper(java.io.InputStream)> (2)
<com.android.inputmethod.pinyin.PinyinIME: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.inputmethod.research.FeedbackActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.inputmethod.research.ReplayerService: void setWallpaper(java.io.InputStream)> (3)
<com.android.inputmethod.research.UploaderService: void setWallpaper(java.io.InputStream)> (3)
<com.android.internal.app.AlertActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.internal.app.ChooserActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.internal.app.DisableCarModeActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.internal.app.NetInitiatedActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.internal.app.PlatLogoActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.internal.app.ResolverActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.internal.app.RestrictionsPinActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.internal.backup.LocalTransportService: void setWallpaper(java.io.InputStream)> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void setWallpaper(java.io.InputStream)> (2)
<com.android.internal.util.AsyncService: void setWallpaper(java.io.InputStream)> (2)
<com.android.keychain.KeyChainActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.magicsmoke.MagicSmokeSelector: void setWallpaper(java.io.InputStream)> (4)
<com.android.magicsmoke.MagicSmoke: void setWallpaper(java.io.InputStream)> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void setWallpaper(java.io.InputStream)> (3)
<com.android.mail.browse.EmlViewerActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.mail.compose.AutoSendActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.mail.compose.ComposeActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.mail.compose.EmptyService: void setWallpaper(java.io.InputStream)> (2)
<com.android.mail.MailIntentService: void setWallpaper(java.io.InputStream)> (3)
<com.android.mail.MailLogService: void setWallpaper(java.io.InputStream)> (2)
<com.android.mail.NotificationActionIntentService: void setWallpaper(java.io.InputStream)> (3)
<com.android.mail.photo.MailPhotoViewActivity: void setWallpaper(java.io.InputStream)> (6)
<com.android.mail.ui.AbstractMailActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.mail.ui.CreateShortcutActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.mail.ui.FolderSelectionActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.mail.ui.MailActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.mail.ui.MailboxSelectionActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.mail.ui.ShortcutNameActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.mail.widget.WidgetService: void setWallpaper(java.io.InputStream)> (3)
<com.android.music.AlbumBrowserActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.music.ArtistAlbumBrowserActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.music.AudioPreview: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.CreatePlaylist: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.DeleteItems: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.MediaPickerActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.music.MediaPlaybackActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.MediaPlaybackService: void setWallpaper(java.io.InputStream)> (2)
<com.android.music.MusicBrowserActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.MusicPicker: void setWallpaper(java.io.InputStream)> (5)
<com.android.music.PlaylistBrowserActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.music.QueryBrowserActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.music.RenamePlaylist: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.ScanningProgress: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.TrackBrowserActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.music.VideoBrowserActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.musicvis.RenderScriptWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.vis1.Visualization1: void setWallpaper(java.io.InputStream)> (3)
<com.android.musicvis.vis2.Visualization2: void setWallpaper(java.io.InputStream)> (4)
<com.android.musicvis.vis3.Visualization3: void setWallpaper(java.io.InputStream)> (4)
<com.android.musicvis.vis4.Visualization4: void setWallpaper(java.io.InputStream)> (4)
<com.android.musicvis.vis5.Visualization5: void setWallpaper(java.io.InputStream)> (4)
<com.android.music.WeekSelector: void setWallpaper(java.io.InputStream)> (4)
<com.android.noisefield.NoiseField: void setWallpaper(java.io.InputStream)> (4)
<com.android.noisefield.NoiseFieldWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.packageinstaller.GrantActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.packageinstaller.InstallAppProgress: void setWallpaper(java.io.InputStream)> (4)
<com.android.packageinstaller.PackageInstallerActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.packageinstaller.UninstallAppProgress: void setWallpaper(java.io.InputStream)> (4)
<com.android.packageinstaller.UninstallerActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.pacprocessor.PacService: void setWallpaper(java.io.InputStream)> (2)
<com.android.phasebeam.PhaseBeam: void setWallpaper(java.io.InputStream)> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.photos.AlbumActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.photos.FullscreenViewer: void setWallpaper(java.io.InputStream)> (4)
<com.android.photos.GalleryActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.printspooler.PrintJobConfigActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.printspooler.PrintSpoolerService: void setWallpaper(java.io.InputStream)> (2)
<com.android.printspooler.SelectPrinterActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.providers.downloads.ui.DownloadList: void setWallpaper(java.io.InputStream)> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.provision.DefaultActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.quicksearchbox.DialogActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.quicksearchbox.google.GoogleSearch: void setWallpaper(java.io.InputStream)> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void setWallpaper(java.io.InputStream)> (3)
<com.android.quicksearchbox.SearchActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.server.PackageManagerBackupAgent: void setWallpaper(java.io.InputStream)> (3)
<com.android.server.ShutdownActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.server.SystemBackupAgent: void setWallpaper(java.io.InputStream)> (4)
<com.android.smspush.WapPushManager: void setWallpaper(java.io.InputStream)> (2)
<com.android.soundrecorder.SoundRecorder: void setWallpaper(java.io.InputStream)> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.tts.compat.CompatTtsService: void setWallpaper(java.io.InputStream)> (3)
<com.android.videoeditor.KenBurnsActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.videoeditor.NoSearchActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.videoeditor.OverlayTitleEditor: void setWallpaper(java.io.InputStream)> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void setWallpaper(java.io.InputStream)> (5)
<com.android.videoeditor.ProjectsActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.videoeditor.service.ApiService: void setWallpaper(java.io.InputStream)> (2)
<com.android.videoeditor.TransitionsActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.videoeditor.VideoEditorActivity: void setWallpaper(java.io.InputStream)> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.fall.Fall: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.fall.FallWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.galaxy.Galaxy: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.grass.Grass: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.grass.GrassWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void setWallpaper(java.io.InputStream)> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void setWallpaper(java.io.InputStream)> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.RenderScriptWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void setWallpaper(java.io.InputStream)> (3)
<com.svox.pico.CheckVoiceData: void setWallpaper(java.io.InputStream)> (4)
<com.svox.pico.DownloadVoiceData: void setWallpaper(java.io.InputStream)> (4)
<com.svox.pico.EngineSettings: void setWallpaper(java.io.InputStream)> (6)
<com.svox.pico.GetSampleText: void setWallpaper(java.io.InputStream)> (4)
<com.svox.pico.PicoService: void setWallpaper(java.io.InputStream)> (4)
<com.svox.pico.Pico: void setWallpaper(java.io.InputStream)> (4)
<android.accessibilityservice.AccessibilityService: void clearWallpaper()> (2)
<android.accounts.AccountAuthenticatorActivity: void clearWallpaper()> (4)
<android.accounts.CantAddAccountActivity: void clearWallpaper()> (4)
<android.accounts.ChooseAccountActivity: void clearWallpaper()> (4)
<android.accounts.ChooseAccountTypeActivity: void clearWallpaper()> (4)
<android.accounts.ChooseTypeAndAccountActivity: void clearWallpaper()> (4)
<android.accounts.GrantCredentialsPermissionActivity: void clearWallpaper()> (4)
<android.app.ActivityGroup: void clearWallpaper()> (4)
<android.app.Activity: void clearWallpaper()> (3)
<android.app.AliasActivity: void clearWallpaper()> (4)
<android.app.Application: void clearWallpaper()> (2)
<android.app.backup.BackupAgentHelper: void clearWallpaper()> (3)
<android.app.backup.BackupAgent: void clearWallpaper()> (2)
<android.app.backup.FullBackupAgent: void clearWallpaper()> (3)
<android.app.ExpandableListActivity: void clearWallpaper()> (4)
<android.app.IntentService: void clearWallpaper()> (2)
<android.app.LauncherActivity: void clearWallpaper()> (5)
<android.app.ListActivity: void clearWallpaper()> (4)
<android.app.NativeActivity: void clearWallpaper()> (4)
<android.app.Presentation$1: void clearWallpaper()> (3)
<android.app.ReceiverRestrictedContext: void clearWallpaper()> (2)
<android.app.Service: void clearWallpaper()> (2)
<android.app.TabActivity: void clearWallpaper()> (5)
<android.content.MutableContextWrapper: void clearWallpaper()> (2)
<android.content.SyncActivityTooManyDeletes: void clearWallpaper()> (4)
<android.hardware.location.GeofenceHardwareService: void clearWallpaper()> (2)
<android.inputmethodservice.AbstractInputMethodService: void clearWallpaper()> (2)
<android.inputmethodservice.InputMethodService: void clearWallpaper()> (3)
<android.location.SettingInjectorService: void clearWallpaper()> (2)
<android.net.VpnService: void clearWallpaper()> (2)
<android.nfc.cardemulation.HostApduService: void clearWallpaper()> (2)
<android.nfc.cardemulation.OffHostApduService: void clearWallpaper()> (2)
<android.preference.PreferenceActivity: void clearWallpaper()> (5)
<android.printservice.PrintService: void clearWallpaper()> (2)
<android.service.dreams.DreamService: void clearWallpaper()> (2)
<android.service.notification.NotificationListenerService: void clearWallpaper()> (2)
<android.service.textservice.SpellCheckerService: void clearWallpaper()> (2)
<android.service.wallpaper.WallpaperService: void clearWallpaper()> (2)
<android.service.wallpaper.WallpaperSettingsActivity: void clearWallpaper()> (6)
<android.speech.RecognitionService: void clearWallpaper()> (2)
<android.speech.tts.TextToSpeechService: void clearWallpaper()> (2)
<android.support.v4.app.FragmentActivity: void clearWallpaper()> (4)
<android.test.ActivityUnitTestCase$MockParent: void clearWallpaper()> (4)
<android.test.IsolatedContext: void clearWallpaper()> (2)
<android.test.mock.MockApplication: void clearWallpaper()> (3)
<android.test.RenamingDelegatingContext: void clearWallpaper()> (2)
<android.view.ContextThemeWrapper: void clearWallpaper()> (2)
<android.widget.RemoteViewsService: void clearWallpaper()> (2)
<com.android.alarmclock.DigitalAppWidgetService: void clearWallpaper()> (3)
<com.android.bluetooth.a2dp.A2dpService: void clearWallpaper()> (3)
<com.android.bluetooth.btservice.AdapterApp: void clearWallpaper()> (3)
<com.android.bluetooth.btservice.AdapterService: void clearWallpaper()> (2)
<com.android.bluetooth.btservice.ProfileService: void clearWallpaper()> (2)
<com.android.bluetooth.gatt.GattService: void clearWallpaper()> (3)
<com.android.bluetooth.hdp.HealthService: void clearWallpaper()> (3)
<com.android.bluetooth.hfp.HeadsetService: void clearWallpaper()> (3)
<com.android.bluetooth.hid.HidService: void clearWallpaper()> (3)
<com.android.bluetooth.map.BluetoothMapService: void clearWallpaper()> (3)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void clearWallpaper()> (5)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void clearWallpaper()> (5)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void clearWallpaper()> (5)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void clearWallpaper()> (5)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void clearWallpaper()> (4)
<com.android.bluetooth.opp.BluetoothOppLiveFolder: void clearWallpaper()> (4)
<com.android.bluetooth.opp.BluetoothOppService: void clearWallpaper()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void clearWallpaper()> (5)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearWallpaper()> (4)
<com.android.bluetooth.opp.TestActivity: void clearWallpaper()> (4)
<com.android.bluetooth.pan.PanService: void clearWallpaper()> (3)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void clearWallpaper()> (5)
<com.android.bluetooth.pbap.BluetoothPbapService: void clearWallpaper()> (2)
<com.android.browser.AddBookmarkPage: void clearWallpaper()> (4)
<com.android.browser.BookmarkSearch: void clearWallpaper()> (4)
<com.android.browser.BrowserActivity: void clearWallpaper()> (4)
<com.android.browser.BrowserBackupAgent: void clearWallpaper()> (3)
<com.android.browser.BrowserPreferencesPage: void clearWallpaper()> (6)
<com.android.browser.Browser: void clearWallpaper()> (3)
<com.android.browser.ComboViewActivity: void clearWallpaper()> (4)
<com.android.browser.ShortcutActivity: void clearWallpaper()> (4)
<com.android.browser.widget.BookmarkThumbnailWidgetService: void clearWallpaper()> (3)
<com.android.browser.widget.BookmarkWidgetConfigure: void clearWallpaper()> (5)
<com.android.calculator2.Calculator: void clearWallpaper()> (4)
<com.android.calendar.AbstractCalendarActivity: void clearWallpaper()> (4)
<com.android.calendar.alerts.AlertActivity: void clearWallpaper()> (4)
<com.android.calendar.alerts.AlertService: void clearWallpaper()> (2)
<com.android.calendar.alerts.DismissAlarmsService: void clearWallpaper()> (3)
<com.android.calendar.alerts.InitAlarmsService: void clearWallpaper()> (3)
<com.android.calendar.alerts.QuickResponseActivity: void clearWallpaper()> (5)
<com.android.calendar.alerts.SnoozeAlarmsService: void clearWallpaper()> (3)
<com.android.calendar.AllInOneActivity: void clearWallpaper()> (4)
<com.android.calendar.AsyncQueryServiceHelper: void clearWallpaper()> (3)
<com.android.calendar.CalendarApplication: void clearWallpaper()> (3)
<com.android.calendar.CalendarBackupAgent: void clearWallpaper()> (4)
<com.android.calendar.CalendarSettingsActivity: void clearWallpaper()> (6)
<com.android.calendar.event.EditEventActivity: void clearWallpaper()> (4)
<com.android.calendar.EventInfoActivity: void clearWallpaper()> (4)
<com.android.calendar.GoogleCalendarUriIntentFilter: void clearWallpaper()> (4)
<com.android.calendar.SearchActivity: void clearWallpaper()> (4)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void clearWallpaper()> (5)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity: void clearWallpaper()> (4)
<com.android.calendar.widget.CalendarAppWidgetService: void clearWallpaper()> (3)
<com.android.camera.app.CameraApp: void clearWallpaper()> (3)
<com.android.camera.CameraActivity: void clearWallpaper()> (4)
<com.android.camera.CameraBackupAgent: void clearWallpaper()> (4)
<com.android.camera.crop.CropActivity: void clearWallpaper()> (4)
<com.android.camera.MediaSaveService: void clearWallpaper()> (2)
<com.android.camera.ProxyLauncher: void clearWallpaper()> (4)
<com.android.camera.SecureCameraActivity: void clearWallpaper()> (5)
<com.android.certinstaller.CertInstallerMain: void clearWallpaper()> (6)
<com.android.certinstaller.CertInstaller: void clearWallpaper()> (4)
<com.android.deskclock.alarms.AlarmActivity: void clearWallpaper()> (4)
<com.android.deskclock.alarms.AlarmService: void clearWallpaper()> (2)
<com.android.deskclock.DeskClock: void clearWallpaper()> (4)
<com.android.deskclock.HandleApiCalls: void clearWallpaper()> (4)
<com.android.deskclock.ScreensaverActivity: void clearWallpaper()> (4)
<com.android.deskclock.ScreensaverSettingsActivity: void clearWallpaper()> (6)
<com.android.deskclock.Screensaver: void clearWallpaper()> (3)
<com.android.deskclock.SettingsActivity: void clearWallpaper()> (6)
<com.android.deskclock.stopwatch.StopwatchService: void clearWallpaper()> (2)
<com.android.deskclock.TimerRingService: void clearWallpaper()> (2)
<com.android.deskclock.timer.TimerAlertFullScreen: void clearWallpaper()> (4)
<com.android.deskclock.worldclock.CitiesActivity: void clearWallpaper()> (4)
<com.android.development.AccountsTester: void clearWallpaper()> (4)
<com.android.development.AppHwConfigList: void clearWallpaper()> (5)
<com.android.development.AppHwPref: void clearWallpaper()> (4)
<com.android.development.BadBehaviorActivity$BadService: void clearWallpaper()> (2)
<com.android.development.BadBehaviorActivity: void clearWallpaper()> (4)
<com.android.development.CacheAbuser: void clearWallpaper()> (4)
<com.android.development.ConfigurationViewer: void clearWallpaper()> (4)
<com.android.development.Connectivity: void clearWallpaper()> (4)
<com.android.development.DataList: void clearWallpaper()> (5)
<com.android.development.Details: void clearWallpaper()> (4)
<com.android.development.Development: void clearWallpaper()> (6)
<com.android.development.InstrumentationList: void clearWallpaper()> (5)
<com.android.development.LogViewer: void clearWallpaper()> (4)
<com.android.development.MediaScannerActivity: void clearWallpaper()> (4)
<com.android.development.PackageBrowser: void clearWallpaper()> (5)
<com.android.development.PackageSummary: void clearWallpaper()> (4)
<com.android.development.PermissionDetails: void clearWallpaper()> (4)
<com.android.development.PointerLocation: void clearWallpaper()> (4)
<com.android.development.ProcessInfo: void clearWallpaper()> (4)
<com.android.development.RunningProcesses: void clearWallpaper()> (5)
<com.android.development.ShowActivity: void clearWallpaper()> (4)
<com.android.development.SyncAdapterDriver: void clearWallpaper()> (4)
<com.android.development.UnderdevelopedSettings: void clearWallpaper()> (6)
<com.android.documentsui.DocumentsActivity: void clearWallpaper()> (4)
<com.android.documentsui.DocumentsApplication: void clearWallpaper()> (3)
<com.android.documentsui.SettingsActivity: void clearWallpaper()> (4)
<com.android.documentsui.TestActivity: void clearWallpaper()> (4)
<com.android.dreams.basic.Colors: void clearWallpaper()> (3)
<com.android.dreams.phototable.FlipperDreamSettings: void clearWallpaper()> (5)
<com.android.dreams.phototable.FlipperDream: void clearWallpaper()> (3)
<com.android.dreams.phototable.PhotoTableDreamSettings: void clearWallpaper()> (6)
<com.android.dreams.phototable.PhotoTableDream: void clearWallpaper()> (3)
<com.android.email2.ui.CreateShortcutActivityEmail: void clearWallpaper()> (4)
<com.android.email2.ui.MailActivityEmail: void clearWallpaper()> (6)
<com.android.email2.ui.MailboxSelectionActivityEmail: void clearWallpaper()> (6)
<com.android.email.activity.ComposeActivityEmail: void clearWallpaper()> (5)
<com.android.email.activity.EventViewer: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSecurity: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSettings: void clearWallpaper()> (6)
<com.android.email.activity.setup.AccountSetupActivity: void clearWallpaper()> (4)
<com.android.email.activity.setup.AccountSetupBasics: void clearWallpaper()> (5)
<com.android.email.activity.setup.AccountSetupIncoming: void clearWallpaper()> (5)
<com.android.email.activity.setup.AccountSetupNames: void clearWallpaper()> (5)
<com.android.email.activity.setup.AccountSetupOptions: void clearWallpaper()> (5)
<com.android.email.activity.setup.AccountSetupOutgoing: void clearWallpaper()> (5)
<com.android.email.activity.setup.AccountSetupType: void clearWallpaper()> (5)
<com.android.email.activity.setup.MailboxSettings: void clearWallpaper()> (6)
<com.android.emailcommon.utility.CertificateRequestor: void clearWallpaper()> (4)
<com.android.email.EmailApplication: void clearWallpaper()> (3)
<com.android.email.EmailIntentService: void clearWallpaper()> (4)
<com.android.email.provider.FolderPickerActivity: void clearWallpaper()> (4)
<com.android.email.service.AccountService: void clearWallpaper()> (2)
<com.android.email.service.AttachmentDownloadService: void clearWallpaper()> (2)
<com.android.email.service.AuthenticatorService: void clearWallpaper()> (2)
<com.android.email.service.EasAuthenticatorServiceAlternate: void clearWallpaper()> (3)
<com.android.email.service.EasAuthenticatorService: void clearWallpaper()> (3)
<com.android.email.service.EasTestAuthenticatorService: void clearWallpaper()> (2)
<com.android.email.service.EmailBroadcastProcessorService: void clearWallpaper()> (3)
<com.android.email.service.ImapAuthenticatorService: void clearWallpaper()> (3)
<com.android.email.service.ImapService: void clearWallpaper()> (2)
<com.android.email.service.LegacyEasAuthenticatorService: void clearWallpaper()> (3)
<com.android.email.service.LegacyEmailAuthenticatorService: void clearWallpaper()> (3)
<com.android.email.service.LegacyImapAuthenticatorService: void clearWallpaper()> (3)
<com.android.email.service.LegacyImapSyncAdapterService: void clearWallpaper()> (3)
<com.android.email.service.PolicyService: void clearWallpaper()> (2)
<com.android.email.service.Pop3AuthenticatorService: void clearWallpaper()> (3)
<com.android.email.service.Pop3Service: void clearWallpaper()> (2)
<com.android.email.service.Pop3SyncAdapterService: void clearWallpaper()> (3)
<com.android.email.service.PopImapSyncAdapterService: void clearWallpaper()> (2)
<com.android.emailsync.SyncManager: void clearWallpaper()> (2)
<com.android.exchange.EasCertificateRequestor: void clearWallpaper()> (5)
<com.android.exchange.ExchangeService: void clearWallpaper()> (3)
<com.android.exchange.Exchange: void clearWallpaper()> (3)
<com.android.exchange.service.AbstractSyncAdapterService: void clearWallpaper()> (2)
<com.android.exchange.service.CalendarSyncAdapterService: void clearWallpaper()> (3)
<com.android.exchange.service.ContactsSyncAdapterService: void clearWallpaper()> (3)
<com.android.exchange.service.EasService: void clearWallpaper()> (2)
<com.android.exchange.service.EmailSyncAdapterService: void clearWallpaper()> (3)
<com.android.exchange.SettingsRedirector: void clearWallpaper()> (4)
<com.android.ex.photo.PhotoViewActivity: void clearWallpaper()> (5)
<com.android.galaxy4.Galaxy4: void clearWallpaper()> (4)
<com.android.galaxy4.Galaxy4Wallpaper: void clearWallpaper()> (3)
<com.android.gallery3d.app.AbstractGalleryActivity: void clearWallpaper()> (4)
<com.android.gallery3d.app.AlbumPicker: void clearWallpaper()> (6)
<com.android.gallery3d.app.BatchService: void clearWallpaper()> (2)
<com.android.gallery3d.app.DialogPicker: void clearWallpaper()> (6)
<com.android.gallery3d.app.GalleryActivity: void clearWallpaper()> (5)
<com.android.gallery3d.app.GalleryAppImpl: void clearWallpaper()> (3)
<com.android.gallery3d.app.Gallery: void clearWallpaper()> (4)
<com.android.gallery3d.app.MovieActivity: void clearWallpaper()> (4)
<com.android.gallery3d.app.PackagesMonitor$AsyncService: void clearWallpaper()> (3)
<com.android.gallery3d.app.PickerActivity: void clearWallpaper()> (5)
<com.android.gallery3d.app.TrimVideo: void clearWallpaper()> (4)
<com.android.gallery3d.app.Wallpaper: void clearWallpaper()> (4)
<com.android.gallery3d.filtershow.crop.CropActivity: void clearWallpaper()> (4)
<com.android.gallery3d.filtershow.FilterShowActivity: void clearWallpaper()> (5)
<com.android.gallery3d.filtershow.pipeline.ProcessingService: void clearWallpaper()> (2)
<com.android.gallery3d.gadget.WidgetClickHandler: void clearWallpaper()> (4)
<com.android.gallery3d.gadget.WidgetConfigure: void clearWallpaper()> (4)
<com.android.gallery3d.gadget.WidgetService: void clearWallpaper()> (3)
<com.android.gallery3d.gadget.WidgetTypeChooser: void clearWallpaper()> (4)
<com.android.gallery3d.ingest.IngestActivity: void clearWallpaper()> (4)
<com.android.gallery3d.ingest.IngestService: void clearWallpaper()> (2)
<com.android.gallery3d.settings.GallerySettings: void clearWallpaper()> (6)
<com.android.htmlviewer.HTMLViewerActivity: void clearWallpaper()> (4)
<com.android.inputmethodcommon.InputMethodSettingsActivity: void clearWallpaper()> (6)
<com.android.inputmethod.dictionarypack.DictionaryService: void clearWallpaper()> (2)
<com.android.inputmethod.dictionarypack.DictionarySettingsActivity: void clearWallpaper()> (6)
<com.android.inputmethod.dictionarypack.DownloadOverMeteredDialog: void clearWallpaper()> (4)
<com.android.inputmethod.latin.BackupAgent: void clearWallpaper()> (4)
<com.android.inputmethod.latin.LatinIME: void clearWallpaper()> (3)
<com.android.inputmethod.latin.settings.DebugSettingsActivity: void clearWallpaper()> (6)
<com.android.inputmethod.latin.settings.SettingsActivity: void clearWallpaper()> (6)
<com.android.inputmethod.latin.setup.SetupActivity: void clearWallpaper()> (4)
<com.android.inputmethod.latin.setup.SetupWizardActivity: void clearWallpaper()> (4)
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void clearWallpaper()> (3)
<com.android.inputmethod.latin.spellcheck.SpellCheckerSettingsActivity: void clearWallpaper()> (6)
<com.android.inputmethod.pinyin.PinyinDecoderService: void clearWallpaper()> (2)
<com.android.inputmethod.pinyin.PinyinIME: void clearWallpaper()> (3)
<com.android.inputmethod.pinyin.SettingsActivity: void clearWallpaper()> (6)
<com.android.inputmethod.research.FeedbackActivity: void clearWallpaper()> (4)
<com.android.inputmethod.research.ReplayerService: void clearWallpaper()> (3)
<com.android.inputmethod.research.UploaderService: void clearWallpaper()> (3)
<com.android.internal.app.AlertActivity: void clearWallpaper()> (4)
<com.android.internal.app.ChooserActivity: void clearWallpaper()> (6)
<com.android.internal.app.DisableCarModeActivity: void clearWallpaper()> (4)
<com.android.internal.app.ExternalMediaFormatActivity: void clearWallpaper()> (5)
<com.android.internal.app.HeavyWeightSwitcherActivity: void clearWallpaper()> (4)
<com.android.internal.app.NetInitiatedActivity: void clearWallpaper()> (5)
<com.android.internal.app.PlatLogoActivity: void clearWallpaper()> (4)
<com.android.internal.app.ResolverActivity: void clearWallpaper()> (5)
<com.android.internal.app.RestrictionsPinActivity: void clearWallpaper()> (5)
<com.android.internal.backup.LocalTransportService: void clearWallpaper()> (2)
<com.android.internal.os.storage.ExternalStorageFormatter: void clearWallpaper()> (2)
<com.android.internal.util.AsyncService: void clearWallpaper()> (2)
<com.android.keychain.KeyChainActivity: void clearWallpaper()> (4)
<com.android.magicsmoke.MagicSmokeSelector: void clearWallpaper()> (4)
<com.android.magicsmoke.MagicSmoke: void clearWallpaper()> (4)
<com.android.magicsmoke.RenderScriptWallpaper: void clearWallpaper()> (3)
<com.android.mail.browse.EmlTempFileDeletionService: void clearWallpaper()> (3)
<com.android.mail.browse.EmlViewerActivity: void clearWallpaper()> (4)
<com.android.mail.compose.AutoSendActivity: void clearWallpaper()> (5)
<com.android.mail.compose.ComposeActivity: void clearWallpaper()> (4)
<com.android.mail.compose.EmptyService: void clearWallpaper()> (2)
<com.android.mail.MailIntentService: void clearWallpaper()> (3)
<com.android.mail.MailLogService: void clearWallpaper()> (2)
<com.android.mail.NotificationActionIntentService: void clearWallpaper()> (3)
<com.android.mail.photo.MailPhotoViewActivity: void clearWallpaper()> (6)
<com.android.mail.ui.AbstractMailActivity: void clearWallpaper()> (4)
<com.android.mail.ui.CreateShortcutActivity: void clearWallpaper()> (4)
<com.android.mail.ui.FolderSelectionActivity: void clearWallpaper()> (4)
<com.android.mail.ui.MailActivity: void clearWallpaper()> (5)
<com.android.mail.ui.MailboxSelectionActivity: void clearWallpaper()> (5)
<com.android.mail.ui.ShortcutNameActivity: void clearWallpaper()> (4)
<com.android.mail.widget.WidgetService: void clearWallpaper()> (3)
<com.android.music.AlbumBrowserActivity: void clearWallpaper()> (5)
<com.android.music.ArtistAlbumBrowserActivity: void clearWallpaper()> (5)
<com.android.music.AudioPreview: void clearWallpaper()> (4)
<com.android.music.CreatePlaylist: void clearWallpaper()> (4)
<com.android.music.DeleteItems: void clearWallpaper()> (4)
<com.android.music.MediaPickerActivity: void clearWallpaper()> (5)
<com.android.music.MediaPlaybackActivity: void clearWallpaper()> (4)
<com.android.music.MediaPlaybackService: void clearWallpaper()> (2)
<com.android.music.MusicBrowserActivity: void clearWallpaper()> (4)
<com.android.music.MusicPicker: void clearWallpaper()> (5)
<com.android.music.PlaylistBrowserActivity: void clearWallpaper()> (5)
<com.android.music.QueryBrowserActivity: void clearWallpaper()> (5)
<com.android.music.RenamePlaylist: void clearWallpaper()> (4)
<com.android.music.ScanningProgress: void clearWallpaper()> (4)
<com.android.music.TrackBrowserActivity: void clearWallpaper()> (5)
<com.android.music.VideoBrowserActivity: void clearWallpaper()> (5)
<com.android.musicvis.RenderScriptWallpaper: void clearWallpaper()> (3)
<com.android.musicvis.vis1.Visualization1: void clearWallpaper()> (3)
<com.android.musicvis.vis2.Visualization2: void clearWallpaper()> (4)
<com.android.musicvis.vis3.Visualization3: void clearWallpaper()> (4)
<com.android.musicvis.vis4.Visualization4: void clearWallpaper()> (4)
<com.android.musicvis.vis5.Visualization5: void clearWallpaper()> (4)
<com.android.music.WeekSelector: void clearWallpaper()> (4)
<com.android.noisefield.NoiseField: void clearWallpaper()> (4)
<com.android.noisefield.NoiseFieldWallpaper: void clearWallpaper()> (3)
<com.android.packageinstaller.GrantActivity: void clearWallpaper()> (4)
<com.android.packageinstaller.InstallAppProgress: void clearWallpaper()> (4)
<com.android.packageinstaller.PackageInstallerActivity: void clearWallpaper()> (4)
<com.android.packageinstaller.UninstallAppProgress: void clearWallpaper()> (4)
<com.android.packageinstaller.UninstallerActivity: void clearWallpaper()> (4)
<com.android.pacprocessor.PacService: void clearWallpaper()> (2)
<com.android.phasebeam.PhaseBeam: void clearWallpaper()> (4)
<com.android.phasebeam.PhaseBeamWallpaper: void clearWallpaper()> (3)
<com.android.photos.AlbumActivity: void clearWallpaper()> (4)
<com.android.photos.FullscreenViewer: void clearWallpaper()> (4)
<com.android.photos.GalleryActivity: void clearWallpaper()> (4)
<com.android.printspooler.PrintJobConfigActivity: void clearWallpaper()> (4)
<com.android.printspooler.PrintSpoolerService: void clearWallpaper()> (2)
<com.android.printspooler.SelectPrinterActivity: void clearWallpaper()> (4)
<com.android.providers.downloads.ui.DownloadList: void clearWallpaper()> (4)
<com.android.providers.downloads.ui.TrampolineActivity: void clearWallpaper()> (4)
<com.android.providers.userdictionary.DictionaryBackupAgent: void clearWallpaper()> (4)
<com.android.provision.DefaultActivity: void clearWallpaper()> (4)
<com.android.quicksearchbox.DialogActivity: void clearWallpaper()> (4)
<com.android.quicksearchbox.google.GoogleSearch: void clearWallpaper()> (4)
<com.android.quicksearchbox.QsbApplicationWrapper: void clearWallpaper()> (3)
<com.android.quicksearchbox.SearchActivity: void clearWallpaper()> (4)
<com.android.server.PackageManagerBackupAgent: void clearWallpaper()> (3)
<com.android.server.ShutdownActivity: void clearWallpaper()> (4)
<com.android.server.SystemBackupAgent: void clearWallpaper()> (4)
<com.android.smspush.WapPushManager: void clearWallpaper()> (2)
<com.android.soundrecorder.SoundRecorder: void clearWallpaper()> (4)
<com.android.speechrecorder.SpeechRecorderActivity: void clearWallpaper()> (4)
<com.android.tts.compat.CompatTtsService: void clearWallpaper()> (3)
<com.android.videoeditor.KenBurnsActivity: void clearWallpaper()> (4)
<com.android.videoeditor.NoSearchActivity: void clearWallpaper()> (4)
<com.android.videoeditor.OverlayTitleEditor: void clearWallpaper()> (5)
<com.android.videoeditor.OverlayTitleTemplatePicker: void clearWallpaper()> (5)
<com.android.videoeditor.ProjectsActivity: void clearWallpaper()> (5)
<com.android.videoeditor.service.ApiService: void clearWallpaper()> (2)
<com.android.videoeditor.TransitionsActivity: void clearWallpaper()> (5)
<com.android.videoeditor.VideoEditorActivity: void clearWallpaper()> (5)
<com.android.videoeditor.VideoEditorBaseActivity: void clearWallpaper()> (4)
<com.android.wallpaper.fall.Fall: void clearWallpaper()> (4)
<com.android.wallpaper.fall.FallWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.galaxy.Galaxy: void clearWallpaper()> (4)
<com.android.wallpaper.galaxy.GalaxyWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.grass.Grass: void clearWallpaper()> (4)
<com.android.wallpaper.grass.GrassWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.holospiral.HoloSpiralTestActivity: void clearWallpaper()> (4)
<com.android.wallpaper.holospiral.HoloSpiralWallpaper: void clearWallpaper()> (3)
<com.android.wallpaper.livepicker.LiveWallpaperActivity: void clearWallpaper()> (4)
<com.android.wallpaper.livepicker.LiveWallpaperChange: void clearWallpaper()> (4)
<com.android.wallpaper.livepicker.LiveWallpaperPreview: void clearWallpaper()> (4)
<com.android.wallpaper.nexus.NexusWallpaper: void clearWallpaper()> (4)
<com.android.wallpaper.polarclock.PolarClockSettings: void clearWallpaper()> (7)
<com.android.wallpaper.polarclock.PolarClockWallpaper: void clearWallpaper()> (3)
<com.android.wallpaper.RenderScriptWallpaper: void clearWallpaper()> (3)
<com.android.wallpaper.walkaround.WalkAroundWallpaper: void clearWallpaper()> (3)
<com.svox.pico.CheckVoiceData: void clearWallpaper()> (4)
<com.svox.pico.DownloadVoiceData: void clearWallpaper()> (4)
<com.svox.pico.EngineSettings: void clearWallpaper()> (6)
<com.svox.pico.GetSampleText: void clearWallpaper()> (4)
<com.svox.pico.PicoService: void clearWallpaper()> (4)
<com.svox.pico.Pico: void clearWallpaper()> (4)
Permission:android.permission.READ_CONTACTS
496 Callers:
<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (5)
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: java.util.List getAdnRecordsInEf(int)> ()
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook$Stub: java.util.List getAdnRecordsInEf(int)> (2)
<com.android.internal.telephony.IIccPhoneBook: java.util.List getAdnRecordsInEf(int)> (1)
<com.android.internal.telephony.IIccPhoneBook$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (5)
<com.android.internal.telephony.IccProvider: android.database.MatrixCursor loadFromEf(int)> (1)
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.IccProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (1)
<com.android.providers.telephony.SmsProvider: android.net.Uri insertInner(android.net.Uri,android.content.ContentValues)> (1)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<com.android.bluetooth.map.BluetoothMapContent: void setVCardFromPhoneNumber(com.android.bluetooth.map.BluetoothMapbMessage,java.lang.String,boolean)> (2)
<com.android.bluetooth.map.BluetoothMapContent: byte[] getSmsMessage(long,int)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void extractMmsAddresses(long,com.android.bluetooth.map.BluetoothMapbMessageMmsEmail)> (1)
<com.android.bluetooth.map.BluetoothMapContent: byte[] getMessage(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: byte[] getMmsMessage(long,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int sendGetMessageRsp(javax.obex.Operation,java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> (1)
<com.android.internal.telephony.CallerInfo: java.lang.String getCallerId(android.content.Context,java.lang.String)> ()
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)> ()
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getPhonebookNameList(int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int createList(int,int,java.lang.String,java.lang.StringBuilder,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int sendVcardListingXml(int,javax.obex.Operation,int,int,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardListing(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int onGet(javax.obex.Operation)> ()
<com.android.exchange.service.ContactsSyncAdapterService: void performSync(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.ContactsSyncAdapterService: void access$000(android.content.Context,android.accounts.Account,android.os.Bundle)> (1)
<com.android.exchange.service.ContactsSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (3)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (4)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.event.AttendeesView: android.view.View updateAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (3)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.mail.browse.MessageHeaderView: void updateContactInfo()> (2)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromEmail(java.lang.String,boolean)> (1)
<com.android.calendar.event.AttendeesView: android.view.View access$100(com.android.calendar.event.AttendeesView,com.android.calendar.event.EditEventHelper$AttendeeItem)> (2)
<com.android.calendar.event.AttendeesView: android.view.View constructAttendeeView(com.android.calendar.event.EditEventHelper$AttendeeItem)> (1)
<com.android.calendar.event.AttendeesView: void onClick(android.view.View)> (1)
<com.android.mail.browse.MessageHeaderView: void access$000(com.android.mail.browse.MessageHeaderView)> (1)
<com.android.mail.browse.MessageHeaderView: void render(boolean)> (3)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler$1: void run()> (1)
<com.android.calendar.event.AttendeesView$PresenceQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.AttendeesView: void addOneAttendee(com.android.calendar.CalendarEventModel$Attendee)> (3)
<com.android.mail.browse.MessageHeaderView$1: void onChanged()> (1)
<com.android.mail.browse.MessageHeaderView: void bind(com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem,boolean)> (2)
<com.android.mail.browse.MessageHeaderView: void rebind(com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem)> (1)
<com.android.mail.browse.MessageHeaderView: void refresh()> (2)
<com.android.calendar.event.AttendeesView: void addAttendees(java.lang.String)> ()
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.ArrayList)> (1)
<com.android.calendar.event.AttendeesView: void addAttendees(java.util.HashMap)> ()
<com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem: void bindView(android.view.View,boolean)> (1)
<com.android.mail.ui.SecureConversationViewController: void renderMessage(com.android.mail.browse.ConversationMessage)> (2)
<com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem: void rebindView(android.view.View)> (1)
<com.android.mail.browse.ConversationContainer: void onOverlayModelUpdate(java.util.List)> (1)
<com.android.mail.browse.ConversationViewAdapter$MessageHeaderItem: void onModelUpdated(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void updateAttendees(android.view.View)> (1)
<com.android.mail.browse.ConversationOverlayItem: void bindView(android.view.View,boolean)> (2)
<com.android.mail.browse.EmlMessageViewFragment$MessageLoadCallbacks: void onLoadFinished(android.content.Loader,com.android.mail.browse.ConversationMessage)> (1)
<com.android.mail.ui.SecureConversationViewFragment: void renderMessage(com.android.mail.browse.MessageCursor)> (2)
<com.android.mail.browse.ConversationOverlayItem: void rebindView(android.view.View)> (4)
<com.android.mail.ui.ConversationViewFragment: boolean processInPlaceUpdates(com.android.mail.browse.MessageCursor,com.android.mail.browse.MessageCursor)> (1)
<com.android.mail.browse.ConversationOverlayItem: void onModelUpdated(android.view.View)> (5)
<com.android.calendar.EventInfoFragment: void initAttendeesCursor(android.view.View)> (1)
<com.android.mail.browse.ConversationContainer: void positionSnapHeader(int)> (1)
<com.android.mail.browse.ConversationViewAdapter: android.view.View getView(com.android.mail.browse.ConversationOverlayItem,android.view.View,android.view.ViewGroup,boolean)> (2)
<com.android.mail.browse.EmlMessageViewFragment$MessageLoadCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mail.ui.SecureConversationViewFragment: void onAccountChanged(com.android.mail.providers.Account,com.android.mail.providers.Account)> (1)
<com.android.mail.ui.SecureConversationViewFragment: void onMessageCursorLoadFinished(android.content.Loader,com.android.mail.browse.MessageCursor,com.android.mail.browse.MessageCursor)> (1)
<com.android.mail.browse.ConversationContainer: void positionOverlay(int,int,int)> (1)
<com.android.mail.browse.ConversationViewAdapter$ConversationHeaderItem: void rebindView(android.view.View)> (1)
<com.android.mail.browse.ConversationViewAdapter$MessageFooterItem: void rebindView(android.view.View)> (1)
<com.android.mail.browse.ConversationViewAdapter$SuperCollapsedBlockItem: void rebindView(android.view.View)> (1)
<com.android.mail.ui.ConversationViewFragment: void onMessageCursorLoadFinished(android.content.Loader,com.android.mail.browse.MessageCursor,com.android.mail.browse.MessageCursor)> (1)
<com.android.mail.browse.ConversationViewAdapter$BorderItem: void onModelUpdated(android.view.View)> (1)
<com.android.mail.browse.ConversationViewAdapter$ConversationHeaderItem: void onModelUpdated(android.view.View)> (1)
<com.android.mail.browse.ConversationViewAdapter$MessageFooterItem: void onModelUpdated(android.view.View)> (1)
<com.android.mail.browse.ConversationViewAdapter$SuperCollapsedBlockItem: void onModelUpdated(android.view.View)> (1)
<com.android.calendar.EventInfoFragment: void access$3000(com.android.calendar.EventInfoFragment,android.view.View)> (1)
<com.android.mail.browse.ConversationContainer: void positionOverlays(int,int)> (4)
<com.android.mail.browse.ConversationViewAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (2)
<com.android.mail.ui.ConversationViewFragment: int measureOverlayHeight(com.android.mail.browse.ConversationOverlayItem)> (2)
<com.android.mail.ui.AbstractConversationViewFragment: void onAccountChanged(com.android.mail.providers.Account,com.android.mail.providers.Account)> (1)
<com.android.mail.ui.AbstractConversationViewFragment: void onMessageCursorLoadFinished(android.content.Loader,com.android.mail.browse.MessageCursor,com.android.mail.browse.MessageCursor)> (1)
<com.android.calendar.EventInfoFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mail.browse.ConversationContainer: void onDataSetChanged()> (1)
<com.android.mail.browse.ConversationContainer: void onGeometryChange(com.android.mail.browse.ConversationContainer$OverlayPosition[])> (1)
<com.android.mail.browse.ConversationContainer: void onLayout(boolean,int,int,int,int)> (2)
<com.android.mail.browse.ConversationContainer: void onNotifierScroll(int,int)> (1)
<com.android.mail.browse.ConversationContainer: android.view.View addOverlayView(int)> (1)
<com.android.mail.ui.ConversationViewFragment: int measureOverlayHeight(int)> (4)
<com.android.mail.ui.ConversationViewFragment: java.lang.String renderCollapsedHeaders(com.android.mail.browse.MessageCursor,com.android.mail.browse.ConversationViewAdapter$SuperCollapsedBlockItem)> (1)
<com.android.mail.ui.AbstractConversationViewFragment$1: void onChanged(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.AbstractConversationViewFragment$MessageLoaderCallbacks: void onLoadFinished(android.content.Loader,com.android.mail.content.ObjectCursor)> (1)
<com.android.calendar.AsyncQueryService: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.mail.browse.ConversationContainer: void access$200(com.android.mail.browse.ConversationContainer)> (1)
<com.android.mail.ui.ConversationViewFragment$MailJsBridge$1: void go()> (1)
<com.android.mail.browse.ScrollNotifier$ScrollListener: void onNotifierScroll(int,int)> (1)
<com.android.mail.ui.ConversationViewFragment: java.lang.String renderMessageBodies(com.android.mail.browse.MessageCursor,boolean)> (1)
<com.android.mail.ui.ConversationViewFragment: void renderBorder(boolean,boolean,boolean,boolean)> (4)
<com.android.mail.ui.ConversationViewFragment: void renderMessage(com.android.mail.browse.ConversationMessage,boolean,boolean,boolean,boolean,boolean)> (2)
<com.android.mail.ui.ConversationViewFragment: void renderSuperCollapsedBlock(int,int)> (1)
<com.android.mail.ui.ConversationViewFragment: void onSuperCollapsedClick(com.android.mail.browse.ConversationViewAdapter$SuperCollapsedBlockItem)> (1)
<com.android.mail.providers.AccountObserver: void onChanged(com.android.mail.providers.Account)> (1)
<com.android.mail.ui.AbstractConversationViewFragment$MessageLoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)> (1)
<com.android.mail.browse.ConversationContainer$AdapterObserver: void onChanged()> (1)
<com.android.mail.ui.FragmentRunnable: void go()> (1)
<com.android.mail.browse.ConversationWebView: void onScrollChanged(int,int,int,int)> (3)
<com.android.mail.ui.ConversationViewFragment: void renderConversation(com.android.mail.browse.MessageCursor)> (5)
<com.android.mail.ui.ConversationViewFragment: void processNewOutgoingMessage(com.android.mail.browse.ConversationMessage)> (1)
<com.android.mail.ui.ConversationViewFragment: void renderMessage(com.android.mail.browse.ConversationMessage,boolean,boolean,boolean,boolean)> (1)
<com.android.mail.browse.SuperCollapsedBlock$OnClickListener: void onSuperCollapsedClick(com.android.mail.browse.ConversationViewAdapter$SuperCollapsedBlockItem)> (1)
<com.android.mail.providers.AccountObserver: void onChanged()> (9)
<com.android.mail.ui.FragmentRunnable: void run()> (10)
<com.android.mail.browse.MailWebView: void onScrollChanged(int,int,int,int)> (3)
<com.android.mail.ui.ConversationViewFragment: void onAccountChanged(com.android.mail.providers.Account,com.android.mail.providers.Account)> (1)
<com.android.mail.ui.ConversationViewFragment: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)> (1)
<com.android.mail.ui.ConversationViewFragment: void onNewMessageBarClick()> (1)
<com.android.mail.ui.ConversationViewFragment: void renderContent(com.android.mail.browse.MessageCursor)> (1)
<com.android.mail.ui.ConversationViewFragment: void showUntransformedConversation()> (1)
<com.android.mail.browse.SuperCollapsedBlock$1: void run()> (1)
<com.android.mail.browse.SelectedConversationsActionMenu$1: void onChanged()> (2)
<com.android.mail.ui.AbstractConversationViewFragment$1: void onChanged()> (2)
<com.android.mail.ui.AnimatedAdapter$3: void onChanged()> (2)
<com.android.mail.ui.ConversationListFragment$1: void onChanged()> (2)
<com.android.mail.ui.FolderListFragment$2: void onChanged()> (2)
<com.android.mail.ui.MailActionBarView$1: void onChanged()> (2)
<com.android.mail.ui.RecentFolderList$1: void onChanged()> (2)
<com.android.mail.utils.VeiledAddressMatcher$1: void onChanged()> (2)
<com.android.mail.ui.AbstractConversationViewFragment$2: void run()> (1)
<com.android.mail.ui.AbstractConversationViewFragment$3: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$1$1: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$2: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$3: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$MailJsBridge$1: void run()> (1)
<com.android.mail.ui.ConversationViewFragment$MailJsBridge$2: void run()> (1)
<com.android.mail.ui.ConversationViewProgressController$1: void run()> (1)
<com.android.mail.ui.ConversationViewProgressController$2: void run()> (1)
<com.android.mail.ui.ConversationViewFragment: void access$400(com.android.mail.ui.ConversationViewFragment)> (1)
<com.android.mail.ui.AbstractConversationViewFragment: void showUntransformedConversation()> (3)
<com.android.mail.ui.ConversationViewFragment$4: void onClick(android.view.View)> (1)
<com.android.mail.ui.AbstractConversationViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.mail.ui.SecureConversationViewFragment: void showUntransformedConversation()> (1)
<com.android.mail.ui.ConversationViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.mail.ui.SecureConversationViewFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.bluetooth.pbap.BluetoothPbapUtils: boolean isProfileSet(android.content.Context)> ()
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result getContactInfo(android.content.Context,java.lang.String)> (1)
<com.android.email.activity.ContactStatusLoader: com.android.email.activity.ContactStatusLoader$Result loadInBackground()> (1)
<com.android.email.activity.ContactStatusLoader: java.lang.Object loadInBackground()> (1)
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<android.widget.QuickContactBadge: void onClick(android.view.View)> (3)
<com.android.calendar.selectcalendars.CalendarColorSquare: void onClick(android.view.View)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void onClick(android.view.View)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.util.ArrayList getContactNamesByNumber(java.lang.String)> (1)
<com.android.mail.utils.NotificationUtils: android.graphics.Bitmap getContactIcon(android.content.Context,java.lang.String,java.lang.String,com.android.mail.providers.Folder)> (1)
<com.android.mail.utils.NotificationUtils: void configureLatestEventInfoFromConversation(android.content.Context,com.android.mail.providers.Account,com.android.mail.preferences.FolderPreferences,android.support.v4.app.NotificationCompat$Builder,android.database.Cursor,android.app.PendingIntent,android.content.Intent,int,int,com.android.mail.providers.Folder,long)> (1)
<com.android.mail.utils.NotificationUtils: void validateNotifications(android.content.Context,com.android.mail.providers.Folder,com.android.mail.providers.Account,boolean,boolean,com.android.mail.utils.NotificationUtils$NotificationKey)> (2)
<com.android.mail.utils.NotificationUtils: void resendNotifications(android.content.Context,boolean,android.net.Uri,com.android.mail.utils.FolderUri)> (3)
<com.android.mail.utils.NotificationUtils: void setNewEmailIndicator(android.content.Context,int,int,com.android.mail.providers.Account,com.android.mail.providers.Folder,boolean)> (1)
<com.android.email.NotificationController: void refreshAllNotificationsInternal(android.content.Context)> (2)
<com.android.mail.MailIntentService: void onHandleIntent(android.content.Intent)> (2)
<com.android.mail.utils.NotificationUtils: void cancelAndResendNotifications(android.content.Context)> (1)
<com.android.email.NotificationController: void refreshNotificationsForAccountInternal(android.content.Context,long)> (2)
<com.android.email.NotificationController: void access$800(android.content.Context)> (1)
<com.android.email.NotificationController: void refreshAllNotifications(android.content.Context)> (1)
<com.android.email.EmailIntentService: void onHandleIntent(android.content.Intent)> (2)
<com.android.email.NotificationController: void access$1000(android.content.Context,long)> (1)
<com.android.email.NotificationController: void refreshNotificationsForAccount(android.content.Context,long)> (1)
<com.android.email.NotificationController: void access$1600(android.content.Context)> (1)
<com.android.email.NotificationController: void access$1200(android.content.Context,long)> (1)
<com.android.email.NotificationController$AccountContentObserver: void onChange(boolean)> (1)
<com.android.email.NotificationController$MessageContentObserver: void onChange(boolean)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getContactsSize()> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int getPhonebookSize(int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullPhonebook(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.HeaderSet,javax.obex.Operation,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: int pullVcardEntry(byte[],com.android.bluetooth.pbap.BluetoothPbapObexServer$AppParamValue,javax.obex.Operation,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.pbap.BluetoothPbapObexServer: void <init>(android.os.Handler,android.content.Context)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.vcard.VCardComposer: boolean init(java.lang.String,java.lang.String[])> (1)
<com.android.vcard.VCardComposer: boolean init()> ()
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$13: void run()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void writeBinaryDictionary()> (9)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (10)
<com.android.inputmethod.latin.personalization.DecayingExpandableBinaryDictionaryBase: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.personalization.PersonalizationDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.personalization.PersonalizationPredictionDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.personalization.UserHistoryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$12: void run()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$14: void run()> (1)
<com.android.inputmethod.latin.personalization.DecayingExpandableBinaryDictionaryBase: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.personalization.PersonalizationDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.personalization.PersonalizationPredictionDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.personalization.UserHistoryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> ()
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (3)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (2)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.CalendarColorSquare: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.quicksearchbox.ui.ContactBadge: void assignContactFromPhone(java.lang.String,boolean)> (1)
<com.android.internal.notification.DemoContactNotificationScorer: boolean hasStarredContact(android.os.Bundle)> (1)
<com.android.internal.notification.DemoContactNotificationScorer: int getScore(android.app.Notification,int)> (1)
<com.android.internal.notification.NotificationScorer: int getScore(android.app.Notification,int)> (1)
<com.android.server.NotificationManagerService$6: void run()> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithAddress(java.util.Collection)> (2)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithRfc822Address(java.util.Collection)> ()
<com.android.mail.compose.ComposeActivity$SendOrSaveTask: void incrementRecipientsTimesContacted(android.content.Context,java.lang.String)> (1)
<com.android.mail.compose.ComposeActivity$SendOrSaveTask: void run()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: int getContactCount()> (3)
<com.android.inputmethod.latin.ContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: int getContactCount()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean hasContentChanged()> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: boolean hasContentChanged()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void loadDictionaryAsyncForUri(android.net.Uri)> (1)
<com.android.common.contacts.DataUsageStatUpdater: boolean updateWithPhoneNumber(java.util.Collection)> ()
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String createProfileVCard(android.content.Context,int,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcardFromProfile(boolean,byte[])> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: java.lang.String getOwnerPhoneNumberVcard(boolean,byte[])> (2)
<com.android.bluetooth.map.BluetoothMapContent: java.lang.String getContactNameFromPhone(java.lang.String)> (6)
<com.android.bluetooth.map.BluetoothMapContent: boolean matchOriginatorMms(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean matchOriginatorSms(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean matchRecipientMms(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean matchRecipientSms(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,java.lang.String)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void setRecipientName(com.android.bluetooth.map.BluetoothMapMessageListingElement,android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void setSenderName(com.android.bluetooth.map.BluetoothMapMessageListingElement,android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean matchOriginator(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean matchRecipient(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: com.android.bluetooth.map.BluetoothMapMessageListingElement element(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: boolean matchAddresses(android.database.Cursor,com.android.bluetooth.map.BluetoothMapContent$FilterInfo,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapContent: com.android.bluetooth.map.BluetoothMapMessageListing msgListing(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (2)
<com.android.bluetooth.map.BluetoothMapContent: void dumpMessages()> ()
<com.android.bluetooth.map.BluetoothMapObexServer: int sendMessageListingRsp(javax.obex.Operation,com.android.bluetooth.map.BluetoothMapAppParams,java.lang.String)> (1)
<com.android.bluetooth.hfp.AtPhonebook: boolean queryPhonebook(java.lang.String,com.android.bluetooth.hfp.AtPhonebook$PhonebookResult)> (1)
<com.android.bluetooth.hfp.AtPhonebook: com.android.bluetooth.hfp.AtPhonebook$PhonebookResult getPhonebookResult(java.lang.String,boolean)> (3)
<com.android.bluetooth.hfp.AtPhonebook: int processCpbrCommand()> (2)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbrCommand(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.AtPhonebook: void handleCpbsCommand(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void handleAccessPermissionResult(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbr(java.lang.String,int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processAtCpbs(java.lang.String,int)> (1)
<com.android.bluetooth.hfp.HeadsetService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processUnknownAt(java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$6000(com.android.bluetooth.hfp.HeadsetStateMachine,java.lang.String)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.email.activity.setup.AccountSetupNames: android.net.Uri access$200()> (1)
<com.android.email.activity.setup.AccountSetupNames$3: java.lang.String doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountSetupNames$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$InnerTask: java.lang.Object doInBackground(java.lang.Object[])> (2)
<com.android.emailcommon.utility.EmailAsyncTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (4)
<com.android.email.activity.setup.AccountSetupNames$3: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$2: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.email.activity.setup.MailboxSettings$LoadMailboxTask: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.emailcommon.utility.EmailAsyncTask$1: java.lang.Object callDoInBackgroundForTest(java.lang.Object[])> (1)
<com.android.bluetooth.map.BluetoothMapContent: java.lang.String setWhereFilterPhones(java.lang.String)> (2)
<com.android.bluetooth.map.BluetoothMapContent: java.lang.String setWhereFilterOriginator(com.android.bluetooth.map.BluetoothMapAppParams,com.android.bluetooth.map.BluetoothMapContent$FilterInfo)> ()
<com.android.bluetooth.map.BluetoothMapContent: java.lang.String setWhereFilterRecipient(com.android.bluetooth.map.BluetoothMapAppParams,com.android.bluetooth.map.BluetoothMapContent$FilterInfo)> ()
<com.android.calendar.event.EventLocationAdapter: java.util.List queryContacts(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter: java.util.List access$700(android.content.ContentResolver,java.lang.String,java.util.HashSet)> (1)
<com.android.calendar.event.EventLocationAdapter$LocationFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookVcards(javax.obex.Operation,int,int,boolean,java.lang.String)> (1)
<com.android.vcard.VCardComposer: boolean initWithRawContactsEntityUri(android.net.Uri)> ()
<com.android.mail.SenderInfoLoader: com.google.common.collect.ImmutableMap loadContactPhotos(android.content.ContentResolver,java.util.Set,boolean)> (2)
<com.android.mail.photomanager.ContactPhotoManager$ContactPhotoLoaderThread: java.util.Map loadPhotos(java.util.Collection)> (1)
<com.android.mail.SenderInfoLoader: com.google.common.collect.ImmutableMap loadInBackground()> (1)
<com.android.mail.photomanager.PhotoManager$PhotoLoaderThread: java.util.Map loadPhotos(java.util.Collection)> (1)
<com.android.mail.SenderInfoLoader: java.lang.Object loadInBackground()> (1)
<com.android.mail.photomanager.PhotoManager$PhotoLoaderThread: void loadPhotosInBackground()> (2)
<com.android.mail.photomanager.ContactPhotoManager$ContactPhotoLoaderThread: void loadPhotosInBackground()> (1)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,com.android.ex.chips.BaseRecipientAdapter,java.util.ArrayList,int,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (1)
<com.android.ex.chips.RecipientAlternatesAdapter: void getMatchingRecipients(android.content.Context,com.android.ex.chips.BaseRecipientAdapter,java.util.ArrayList,android.accounts.Account,com.android.ex.chips.RecipientAlternatesAdapter$RecipientMatchCallback)> (2)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Void doInBackground(java.util.ArrayList[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.ex.chips.RecipientEditTextView$IndividualReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.ex.chips.RecipientEditTextView$RecipientReplacementTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.mail.providers.SuggestionsProvider$ContactsCursor: com.android.mail.providers.SuggestionsProvider$ContactsCursor query(java.lang.String)> (1)
<com.android.mail.providers.SuggestionsProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendVCards(javax.obex.Operation,java.lang.String,boolean,java.lang.String,boolean)> (3)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendCallLogVcards(int,javax.obex.Operation,int,int,boolean)> (2)
<com.android.bluetooth.pbap.BluetoothPbapVcardManager: int composeAndSendPhonebookOneVcard(javax.obex.Operation,int,boolean,java.lang.String,int)> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (5)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> (2)
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.EventInfoFragment: void showContactInfo(com.android.calendar.CalendarEventModel$Attendee,android.graphics.Rect)> ()
<com.android.exchange.adapter.ContactsSyncParser: void changeParser(com.android.exchange.adapter.ContactsSyncParser$ContactOperations)> (1)
<com.android.exchange.adapter.ContactsSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (6)
<com.android.exchange.adapter.CalendarSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.ContactsSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.eas.EasSyncBase: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasSync: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.eas.EasOperation: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.common.contacts.BaseEmailAddressAdapter$DirectoryPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.ex.chips.BaseRecipientAdapter$DefaultFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<com.android.bluetooth.pbap.BluetoothPbapUtils: java.lang.String getProfileName(android.content.Context)> (1)
<com.android.mail.utils.NotificationUtils: java.util.ArrayList findContacts(android.content.Context,java.util.Collection)> (1)
<com.android.exchange.eas.EasSyncContacts: void setUpsyncCommands(com.android.exchange.adapter.Serializer,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,double)> (1)
<com.android.exchange.eas.EasSyncContacts: void setSyncOptions(android.content.Context,com.android.exchange.adapter.Serializer,double,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,int)> (1)
<com.android.exchange.eas.EasSyncCollectionTypeBase: void setSyncOptions(android.content.Context,com.android.exchange.adapter.Serializer,double,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox,boolean,int)> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.eas.EasOperation: org.apache.http.HttpEntity getRequestEntity()> (1)
<com.android.exchange.eas.EasOperation: org.apache.http.client.methods.HttpUriRequest makeRequest()> (12)
<com.android.exchange.eas.EasFolderSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasLoadAttachment: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasMoveItems: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOptions: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasOutboxSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasPing: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasProvision: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSearch: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSettings: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSyncBase: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.exchange.eas.EasSync: org.apache.http.client.methods.HttpUriRequest makeRequest()> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> ()
<com.android.common.contacts.BaseEmailAddressAdapter$DefaultPartitionFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusRead(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int setMessageStatus(java.lang.String,com.android.bluetooth.map.BluetoothMapAppParams)> (1)
<com.android.bluetooth.map.BluetoothMapObexServer: int onPut(javax.obex.Operation)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean deleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean setMessageStatusDeleted(long,com.android.bluetooth.map.BluetoothMapUtils$TYPE,int)> (1)
<com.android.bluetooth.map.BluetoothMapContentObserver: boolean unDeleteMessageSms(long)> (1)
<com.android.bluetooth.map.BluetoothMapContent: void addSmsEntry()> (1)
<com.android.bluetooth.map.BluetoothMapContent: void dumpSmsTable()> (1)
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.WRITE_CALENDAR
303 Callers:
<com.android.calendar.agenda.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int,java.lang.String)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void doQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (3)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$2600(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean access$1800(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$QuerySpec)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: boolean queueQuery(int,int,android.text.format.Time,java.lang.String,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter$QueryHandler$1: void onClick(android.view.View)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void refresh(android.text.format.Time,long,java.lang.String,boolean,boolean)> (2)
<com.android.calendar.agenda.AgendaListView: void goTo(android.text.format.Time,long,java.lang.String,boolean,boolean)> (3)
<com.android.calendar.agenda.AgendaListView: void refresh(boolean)> (3)
<com.android.calendar.agenda.AgendaFragment: void goTo(com.android.calendar.CalendarController$EventInfo,boolean)> (1)
<com.android.calendar.agenda.AgendaFragment: void onResume()> (1)
<com.android.calendar.agenda.AgendaFragment: void search(java.lang.String,android.text.format.Time)> (1)
<com.android.calendar.agenda.AgendaFragment: void eventsChanged()> (2)
<com.android.calendar.agenda.AgendaListView$2: void run()> (1)
<com.android.calendar.agenda.AgendaListView$3: void run()> (1)
<com.android.calendar.agenda.AgendaFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.CalendarController$EventHandler: void eventsChanged()> ()
<com.android.calendar.CalendarController$EventHandler: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,com.android.calendar.CalendarController$EventInfo)> (3)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (10)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtraWithTitleWithCalendarId(java.lang.Object,long,long,long,long,int,int,long,long,java.lang.String,long)> (2)
<com.android.calendar.SearchActivity: void search(java.lang.String,android.text.format.Time)> (2)
<com.android.calendar.agenda.AgendaFragment$2: void run()> (1)
<com.android.calendar.AllInOneActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.AllInOneActivity: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.AllInOneActivity: void handleSelectSyncedCalendarsClicked(android.view.View)> ()
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int,long,java.lang.String,android.content.ComponentName)> (5)
<com.android.calendar.CalendarController: void sendEvent(java.lang.Object,long,android.text.format.Time,android.text.format.Time,long,int)> (16)
<com.android.calendar.DayView$GotoBroadcaster: void onAnimationEnd(android.view.animation.Animation)> (1)
<com.android.calendar.DayView: void doSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void updateTitle()> (3)
<com.android.calendar.month.MonthByWeekFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (1)
<com.android.calendar.CalendarController: void sendEventRelatedEventWithExtra(java.lang.Object,long,long,long,long,int,int,long,long)> (7)
<com.android.calendar.event.CreateEventDialogFragment$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.SearchActivity: void handleIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void initFragments(long,java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: void onResume()> (1)
<com.android.calendar.month.MonthByWeekAdapter: void onDayTapped(android.text.format.Time)> (2)
<com.android.calendar.SearchActivity: boolean onQueryTextSubmit(java.lang.String)> (1)
<com.android.calendar.AllInOneActivity: boolean onNavigationItemSelected(int,long)> (1)
<com.android.calendar.AllInOneActivity: void eventsChanged()> (2)
<com.android.calendar.AllInOneActivity: void initFragments(long,int,android.os.Bundle)> (3)
<com.android.calendar.AllInOneActivity: void onBackPressed()> (1)
<com.android.calendar.AllInOneActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.AllInOneActivity: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)> (1)
<com.android.calendar.AllInOneActivity: void onUserLeaveHint()> (1)
<com.android.calendar.DayView: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView$ContextMenuHandler: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.SearchActivity: void eventsChanged()> (3)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsActivity$1: void onChange(boolean)> (1)
<com.android.calendar.DayView: void access$4500(com.android.calendar.DayView,android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> (1)
<com.android.calendar.DayFragment: void goTo(android.text.format.Time,boolean,boolean)> (1)
<com.android.calendar.DayView: android.view.View switchViews(boolean,float,float,float)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void setMonthDisplayed(android.text.format.Time,boolean)> (4)
<com.android.calendar.agenda.AgendaListView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.agenda.AgendaWindowAdapter: void sendViewEvent(com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (2)
<com.android.calendar.CalendarController: void sendEventRelatedEvent(java.lang.Object,long,long,long,long,int,int,long)> (4)
<com.android.calendar.DayView$8: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.DayView: void switchViews(boolean)> (3)
<com.android.calendar.SearchActivity: void onNewIntent(android.content.Intent)> (1)
<com.android.calendar.SearchActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekAdapter$2: void run()> (1)
<com.android.calendar.month.SimpleWeeksAdapter: void onDayTapped(android.text.format.Time)> (1)
<com.android.calendar.AllInOneActivity$4: void onChange(boolean)> (1)
<com.android.calendar.AllInOneActivity: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.AllInOneActivity: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)> (1)
<com.android.calendar.SearchActivity$1: void onChange(boolean)> (1)
<com.android.calendar.SearchActivity: void onResume()> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.calendar.DayFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.DayView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.calendar.DayView: void doFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: boolean goTo(long,boolean,boolean,boolean)> (5)
<com.android.calendar.month.SimpleDayPickerFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void updateMonthHighlight(android.widget.AbsListView)> (2)
<com.android.calendar.agenda.AgendaWindowAdapter: void access$1500(com.android.calendar.agenda.AgendaWindowAdapter,com.android.calendar.agenda.AgendaWindowAdapter$AgendaItem,long)> (1)
<com.android.calendar.DayView$3: void run()> (1)
<com.android.calendar.DayView: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.calendar.DayView: void onClick(android.view.View)> (1)
<com.android.calendar.month.SimpleWeeksAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (2)
<com.android.calendar.DayView: void access$5000(com.android.calendar.DayView,android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: boolean goTo(long,boolean,boolean,boolean)> (3)
<com.android.calendar.month.SimpleDayPickerFragment$2: void onChanged()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void <init>(long)> (2)
<com.android.calendar.month.SimpleDayPickerFragment: void onCreate(android.os.Bundle)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onActivityCreated(android.os.Bundle)> (2)
<com.android.calendar.month.MonthByWeekFragment: void updateMonthHighlight(android.widget.AbsListView)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.month.MonthByWeekAdapter: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.calendar.DayView$CalendarGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.calendar.month.MonthByWeekFragment: void doResumeUpdates()> (1)
<com.android.calendar.month.MonthByWeekFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.month.SimpleDayPickerFragment: void onResume()> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long,boolean)> (3)
<com.android.calendar.month.MonthByWeekFragment: void <init>(long)> (1)
<com.android.calendar.month.MonthByWeekFragment: void onCreate(android.os.Bundle)> (3)
<com.android.calendar.month.MonthByWeekFragment: void onScroll(android.widget.AbsListView,int,int,int)> (2)
<com.android.calendar.month.MonthByWeekFragment: void onResume()> (3)
<com.android.calendar.AllInOneActivity: void setMainPane(android.app.FragmentTransaction,int,int,long,boolean)> (2)
<com.android.calendar.month.MonthByWeekFragment: void <init>()> (2)
<com.android.calendar.DeleteEventHelper: void deleteExceptionEvent()> (1)
<com.android.calendar.DeleteEventHelper: void access$900(com.android.calendar.DeleteEventHelper)> (1)
<com.android.calendar.DeleteEventHelper$3: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.alerts.AlertService: int processQuery(android.database.Cursor,android.content.Context,long,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<com.android.calendar.alerts.AlertService: boolean generateAlerts(android.content.Context,com.android.calendar.alerts.NotificationMgr,com.android.calendar.alerts.AlarmManagerInterface,android.content.SharedPreferences,android.database.Cursor,long,int)> (1)
<com.android.calendar.alerts.AlertService: boolean updateAlertNotification(android.content.Context)> (6)
<com.android.calendar.alerts.AlertActivity$3: java.lang.Void doInBackground(android.content.Context[])> (1)
<com.android.calendar.alerts.AlertReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.calendar.alerts.AlertService: void doTimeChanged()> (1)
<com.android.calendar.alerts.AlertService: void processMessage(android.os.Message)> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Void doInBackground(android.util.Pair[])> (1)
<com.android.calendar.alerts.SnoozeAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.alerts.AlertActivity$3: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.alerts.GlobalDismissManager$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.service.EmailServiceUtils: void moveCalendarData(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.email.service.EmailServiceUtils: void updateAccountManagerType(android.content.Context,android.accounts.Account,java.util.Map)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void updateAccountManagerAccountsOfType(java.lang.String,java.util.Map)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onAppUpgrade()> (2)
<com.android.email.service.EmailBroadcastProcessorService: void onHandleIntent(android.content.Intent)> (1)
<com.android.email.service.EmailBroadcastProcessorService: void reconcileAndStartServices()> (2)
<com.android.email.service.EmailBroadcastProcessorService: void onBootCompleted()> (1)
<com.android.email.service.EmailBroadcastProcessorService: void onSystemAccountChanged()> (1)
<com.android.calendar.EventInfoFragment: boolean saveReminders()> (1)
<com.android.calendar.EventInfoFragment: void onStop()> (2)
<com.android.calendar.alerts.DismissAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.selectcalendars.SelectCalendarsSyncFragment: void onPause()> (2)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri updateUri()> (2)
<com.android.calendar.month.MonthByWeekFragment: android.content.Loader onCreateLoader(int,android.os.Bundle)> (1)
<com.android.calendar.month.MonthByWeekFragment: android.net.Uri access$600(com.android.calendar.month.MonthByWeekFragment)> (1)
<com.android.calendar.month.MonthByWeekFragment$3: void run()> (1)
<com.android.calendar.DeleteEventHelper: void deleteRepeatingEvent(int)> (1)
<com.android.calendar.DeleteEventHelper: void access$1200(com.android.calendar.DeleteEventHelper,int)> (1)
<com.android.calendar.DeleteEventHelper$5: void onClick(android.content.DialogInterface,int)> (1)
<com.android.exchange.adapter.CalendarSyncParser: void addEvent(com.android.exchange.adapter.CalendarSyncParser$CalendarOperations,java.lang.String,boolean)> (2)
<com.android.exchange.adapter.CalendarSyncParser: void addParser(com.android.exchange.adapter.CalendarSyncParser$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncParser: void changeParser(com.android.exchange.adapter.CalendarSyncParser$CalendarOperations)> (1)
<com.android.exchange.adapter.CalendarSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: void commandsParser()> (1)
<com.android.exchange.adapter.AbstractSyncParser: boolean parse()> (6)
<com.android.exchange.adapter.CalendarSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.ContactsSyncParser: boolean parse()> (2)
<com.android.exchange.adapter.EmailSyncAdapter$EasEmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.EmailSyncParser: boolean parse()> (3)
<com.android.exchange.adapter.Parser: boolean parse()> ()
<com.android.exchange.eas.EasSyncBase: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.EmailSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasSync: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.eas.EasOperation: int handleResponse(com.android.exchange.EasResponse)> (1)
<com.android.exchange.adapter.AbstractSyncAdapter: boolean parse(java.io.InputStream)> (1)
<com.android.exchange.eas.EasOperation: int performOperation()> (15)
<com.android.exchange.EasSyncService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (3)
<com.android.exchange.eas.EasFolderSync: int doFolderSync()> (1)
<com.android.exchange.eas.EasFolderSync: int performOperation()> (1)
<com.android.exchange.eas.EasFolderSync: int validate()> (2)
<com.android.exchange.eas.EasLoadAttachment: int performOperation()> (2)
<com.android.exchange.eas.EasMoveItems: int performOperation()> (2)
<com.android.exchange.eas.EasOptions: int performOperation()> (2)
<com.android.exchange.eas.EasOutboxSync: int performOperation()> (1)
<com.android.exchange.eas.EasPing: int performOperation()> (2)
<com.android.exchange.eas.EasProvision: int performOperation()> (4)
<com.android.exchange.eas.EasSearch: int performOperation()> (3)
<com.android.exchange.eas.EasSettings: int performOperation()> (2)
<com.android.exchange.eas.EasSyncBase: int performOperation()> (2)
<com.android.exchange.eas.EasSync: int performOperation()> (2)
<com.android.exchange.service.EasService: int doOperation(com.android.exchange.eas.EasOperation,java.lang.String)> (4)
<com.android.exchange.service.EmailSyncAdapterService: int syncOutbox(android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.EasAccountService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasOutboxService: void sync(com.android.exchange.adapter.AbstractSyncAdapter)> (1)
<com.android.exchange.EasSyncService: void run()> ()
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)> (1)
<com.android.exchange.eas.EasFolderSync: android.os.Bundle doValidate()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.eas.EasMoveItems: int upsyncMovedMessages()> (1)
<com.android.exchange.eas.EasOptions: int getProtocolVersionFromServer()> (1)
<com.android.exchange.eas.EasPing: int doPing()> (1)
<com.android.exchange.eas.EasProvision: int performAckRequest(boolean)> (2)
<com.android.exchange.eas.EasProvision: int performInitialRequest()> (2)
<com.android.exchange.eas.EasProvision: void performAckRequestForWipe()> (1)
<com.android.exchange.ExchangeService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.eas.EasSettings: boolean sendDeviceInformation()> (1)
<com.android.exchange.service.EmailSyncAdapterService$SyncAdapterImpl: int syncMailbox(android.content.Context,android.content.ContentResolver,android.accounts.Account,com.android.emailcommon.provider.Account,long,android.os.Bundle,android.content.SyncResult,java.util.HashSet,boolean)> (1)
<com.android.exchange.eas.EasSync: int upsync()> (1)
<com.android.exchange.service.EasService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.exchange.service.EasService$1: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.exchange.service.EasService$1: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.EasService$1: void updateFolderList(long)> (2)
<com.android.exchange.service.EmailSyncAdapterService: int access$800(com.android.exchange.service.EmailSyncAdapterService,android.content.Context,android.content.ContentResolver,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Mailbox)> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> ()
<com.android.emailcommon.service.IEmailService$Stub: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (2)
<com.android.exchange.service.PingTask: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.exchange.eas.EasProvision: boolean provision()> (1)
<com.android.exchange.eas.EasProvision: com.android.emailcommon.provider.Policy test()> (1)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> ()
<com.android.emailcommon.service.IEmailService$Stub: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> ()
<com.android.emailcommon.service.IEmailService$Stub: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (2)
<com.android.emailcommon.service.IEmailService$Stub$Proxy: void updateFolderList(long)> ()
<com.android.emailcommon.service.IEmailService$Stub: void updateFolderList(long)> (2)
<com.android.emailcommon.service.IEmailService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (7)
<com.android.emailcommon.service.IEmailService: void loadAttachment(com.android.emailcommon.service.IEmailServiceCallback,long,long,boolean)> (1)
<com.android.exchange.service.PingTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.exchange.eas.EasOperation: boolean handleProvisionError()> (11)
<com.android.exchange.eas.EasFolderSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.IEmailService: int searchMessages(long,com.android.emailcommon.service.SearchParams,long)> (1)
<com.android.emailcommon.service.IEmailService: android.os.Bundle validate(com.android.emailcommon.provider.HostAuth)> (3)
<com.android.emailcommon.service.IEmailService: void updateFolderList(long)> (2)
<com.android.email.service.EmailServiceStub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.ImapService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.email.service.Pop3Service$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.ExchangeService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EasService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.exchange.service.EmailSyncAdapterService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.emailcommon.service.EmailServiceProxy$1: void run()> (1)
<com.android.exchange.eas.EasLoadAttachment: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasMoveItems: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOptions: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasOutboxSync: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasPing: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSearch: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSettings: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSyncBase: boolean handleProvisionError()> (1)
<com.android.exchange.eas.EasSync: boolean handleProvisionError()> (1)
<com.android.emailcommon.service.EmailServiceProxy$8: void run()> (1)
<com.android.emailcommon.service.EmailServiceProxy$2: void run()> (1)
<com.android.email.mail.store.ServiceStore: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.EmailServiceProxy$4: void run()> (1)
<com.android.exchange.service.EmailSyncAdapterService$1: void updateFolderList(long)> (2)
<com.android.emailcommon.service.ServiceProxy$ProxyTask: void run()> (1)
<com.android.email.mail.Store: android.os.Bundle checkSettings()> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Void doInBackground(java.lang.Void[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: com.android.emailcommon.mail.MessagingException doInBackground(java.lang.Void[])> (1)
<com.android.emailcommon.service.ServiceProxy$ProxyConnection$1: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.email.activity.setup.AccountCheckSettingsFragment$AccountCheckTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<com.android.calendar.event.EditEventHelper: boolean saveEvent(com.android.calendar.CalendarEventModel,com.android.calendar.CalendarEventModel,int)> (2)
<com.android.calendar.event.CreateEventDialogFragment: void createAllDayEvent()> (1)
<com.android.calendar.event.EditEventFragment$Done: void run()> (6)
<com.android.calendar.event.CreateEventDialogFragment: void access$500(com.android.calendar.event.CreateEventDialogFragment)> (1)
<com.android.calendar.event.EditEventFragment: boolean onActionBarItemSelected(int)> (2)
<com.android.calendar.event.EditEventFragment$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.calendar.event.EditEventFragment: void handleEvent(com.android.calendar.CalendarController$EventInfo)> (1)
<com.android.calendar.event.EditEventFragment: void onPause()> (1)
<com.android.calendar.event.EditEventHelper$EditDoneRunnable: void run()> (3)
<com.android.calendar.event.CreateEventDialogFragment$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventFragment: boolean access$000(com.android.calendar.event.EditEventFragment,int)> (1)
<com.android.calendar.event.EditEventFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
<com.android.calendar.event.EditEventView: void onCancel(android.content.DialogInterface)> (1)
<com.android.calendar.event.EditEventView: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.event.EditEventView: void setCalendarsCursor(android.database.Cursor,boolean,long)> (1)
<com.android.calendar.event.EditEventFragment$1: void onClick(android.view.View)> (1)
<com.android.calendar.GoogleCalendarUriIntentFilter: void updateSelfAttendeeStatus(int,java.lang.String,int,android.content.Intent)> (1)
<com.android.calendar.GoogleCalendarUriIntentFilter: void onCreate(android.os.Bundle)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void toggleVisibility(int)> (1)
<com.android.calendar.selectcalendars.SelectVisibleCalendarsFragment: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissAlarm(long,long,long)> (1)
<com.android.calendar.alerts.AlertActivity: void access$400(com.android.calendar.alerts.AlertActivity,long,long,long)> (1)
<com.android.calendar.alerts.AlertActivity$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri createLoaderUri()> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: android.net.Uri access$200(com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory)> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void initLoader(java.lang.String)> (2)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$2: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory$3$1: void run()> (1)
<com.android.calendar.widget.CalendarAppWidgetService$CalendarFactory: void onCreate()> (1)
<com.android.calendar.alerts.GlobalDismissManager: void syncReceiverDismissCache(android.content.Context)> (1)
<com.android.calendar.DeleteEventHelper$2: void onClick(android.content.DialogInterface,int)> (1)
<com.android.calendar.EventInfoFragment: void updateResponse(long,long,int)> (1)
<com.android.calendar.EventInfoFragment: boolean saveResponse()> (1)
<com.android.calendar.EventInfoFragment: void createExceptionResponse(long,int)> (1)
<com.android.calendar.alerts.AlertActivity: void dismissFiredAlarms()> (1)
<com.android.calendar.alerts.AlertActivity: void onClick(android.view.View)> (1)
<com.android.calendar.alerts.InitAlarmsService: void onHandleIntent(android.content.Intent)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveReminders(java.util.ArrayList,long,java.util.ArrayList,java.util.ArrayList,boolean)> (3)
<com.android.calendar.event.EditEventFragment: void saveReminders()> (1)
<com.android.calendar.CalendarUtils$TimeZoneUtils: void setTimeZone(android.content.Context,java.lang.String)> (1)
<com.android.calendar.Utils: void setTimeZone(android.content.Context,java.lang.String)> (2)
<com.android.calendar.GeneralPreferences: boolean onPreferenceChange(android.preference.Preference,java.lang.Object)> (1)
<com.android.calendar.GeneralPreferences: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZonePickerDialog$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZonePickerDialog: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZonePickerView$OnTimeZoneSetListener: void onTimeZoneSet(com.android.timezonepicker.TimeZoneInfo)> (1)
<com.android.timezonepicker.TimeZoneResultAdapter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountAdapter: void doSaveAction()> (1)
<com.android.calendar.selectcalendars.SelectSyncedCalendarsMultiAccountActivity: void onClick(android.view.View)> (1)
<com.android.calendar.event.EditEventHelper: boolean saveRemindersWithBackRef(java.util.ArrayList,int,java.util.ArrayList,java.util.ArrayList,boolean)> (1)
<com.android.calendar.CalendarColorPickerDialog$OnCalendarColorSelectedListener: void onColorSelected(int)> (1)
<com.android.colorpicker.ColorPickerSwatch$OnColorSelectedListener: void onColorSelected(int)> (2)
<com.android.colorpicker.ColorPickerDialog: void onColorSelected(int)> (3)
<com.android.colorpicker.ColorPickerSwatch: void onClick(android.view.View)> (1)
<com.android.calendar.CalendarColorPickerDialog: void onColorSelected(int)> (1)
<com.android.calendar.event.EventColorPickerDialog: void onColorSelected(int)> (2)
<com.android.calendar.event.EventColorPickerDialog$1: void onClick(android.content.DialogInterface,int)> (1)
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> ()
<com.android.calendar.EventInfoFragment: boolean saveEventColor()> (1)
<com.android.calendar.alerts.AlertService: void dismissOldAlerts(android.content.Context)> (1)
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.VIBRATE
237 Callers:
<com.android.server.VibratorService: void vibrate(int,java.lang.String,long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibrate(int,java.lang.String,long,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibrate(int,java.lang.String,long,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IVibratorService: void vibrate(int,java.lang.String,long,android.os.IBinder)> (1)
<com.android.server.VibratorService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.SystemVibrator: void vibrate(int,java.lang.String,long)> (2)
<android.os.SystemVibrator: void vibrate(long)> (1)
<android.os.Vibrator: void vibrate(int,java.lang.String,long)> (1)
<android.os.Vibrator: void vibrate(long)> (11)
<com.android.internal.policy.impl.PhoneWindowManager: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (6)
<android.view.VolumePanel: void onVibrate()> (2)
<com.android.datetimepicker.HapticFeedbackController: void tryVibrate()> (3)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void vibrate()> (2)
<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void vibrate(long)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void vibrate()> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void vibrate()> (2)
<com.android.internal.widget.RotarySelector: void vibrate(long)> (2)
<com.android.internal.widget.SlidingTab: void vibrate(long)> (2)
<com.android.internal.widget.WaveView: void vibrate(long)> (1)
<com.android.server.power.ShutdownThread: void rebootOrShutdown(boolean,java.lang.String)> (2)
<com.android.server.VibratorService: void doVibratorOn(long,int)> (2)
<android.view.WindowManagerPolicy: boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void handleLongPressOnHome()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void launchAssistLongPressAction()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void setSafeMode(boolean)> (1)
<android.view.VolumePanel: void onShowVolumeChanged(int,int)> (3)
<com.android.datetimepicker.date.DatePickerDialog: void tryVibrate()> (3)
<com.android.datetimepicker.time.RadialPickerLayout: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.datetimepicker.time.TimePickerDialog: void tryVibrate()> (4)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void performHapticFeedback(android.view.View)> (2)
<com.android.inputmethod.latin.settings.SettingsFragment$2: void feedbackValue(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void setGrabbedState(int)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void setGrabbedState(int)> (2)
<com.android.internal.widget.RotarySelector: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.RotarySelector: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.SlidingTab: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.SlidingTab: void dispatchTriggerEvent(int)> (1)
<com.android.internal.widget.WaveView: void dispatchTriggerEvent(int)> (1)
<com.android.server.power.ShutdownThread: void run()> (2)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.VibratorService: void access$1300(com.android.server.VibratorService,long,int)> (1)
<com.android.server.VibratorService: void startVibrationLocked(com.android.server.VibratorService$Vibration)> (3)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (2)
<android.view.WindowManagerPolicy: void setSafeMode(boolean)> (1)
<android.view.VolumePanel: void onRemoteVolumeChanged(int,int)> (1)
<android.view.VolumePanel: void onRemoteVolumeUpdateIfShown()> (1)
<android.view.VolumePanel: void onVolumeChanged(int,int)> (2)
<com.android.datetimepicker.date.DatePickerController: void tryVibrate()> (2)
<com.android.datetimepicker.date.DatePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.date.DatePickerDialog: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$1: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$2: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$3: void onClick(android.view.View)> (1)
<com.android.datetimepicker.time.TimePickerDialog$4: void onClick(android.view.View)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.inputmethod.latin.AudioAndHapticFeedbackManager: void performHapticAndAudioFeedback(int,android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void hapticAndAudioFeedback(int,int)> (1)
<com.android.inputmethod.latin.settings.SeekBarDialogPreference$ValueProxy: void feedbackValue(int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.multiwaveview.MultiWaveView: void doFinish()> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void switchToState(int,float,float)> (6)
<com.android.internal.widget.SlidingTab: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: void waveUpdateFrame(float,float,boolean)> (2)
<com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.VibratorService$VibrateThread: void run()> (2)
<com.android.server.VibratorService: void startNextVibrationLocked()> (4)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: long interceptKeyBeforeDispatching(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.WindowManagerService: boolean detectSafeMode()> (1)
<android.view.VolumePanel: void onMuteChanged(int,int)> (1)
<com.android.datetimepicker.date.SimpleMonthAdapter: void onDayTapped(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.datetimepicker.date.YearPickerView: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void access$300(com.android.deskclock.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: boolean onLongClick(android.view.View)> (1)
<com.android.inputmethod.latin.LatinIME: void onPressKey(int,int,boolean)> (1)
<com.android.inputmethod.latin.settings.SeekBarDialogPreference: void onStopTrackingTouch(android.widget.SeekBar)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void access$300(com.android.internal.widget.multiwaveview.GlowPadView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean trySwitchToFirstTouchState(float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void access$300(com.android.internal.widget.multiwaveview.MultiWaveView,int,float,float)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleCancel(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleDown(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleMove(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: void handleUp(android.view.MotionEvent)> (1)
<com.android.internal.widget.WaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: void onDraw(android.graphics.Canvas)> (1)
<com.android.server.power.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)> (3)
<com.android.server.VibratorService: void access$300(com.android.server.VibratorService)> (3)
<com.android.server.VibratorService: void updateInputDeviceVibrators()> (5)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.wm.InputMonitor: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.datetimepicker.date.SimpleMonthAdapter: void onDayClick(com.android.datetimepicker.date.SimpleMonthView,com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.keyboard.KeyboardActionListener: void onPressKey(int,int,boolean)> (4)
<com.android.internal.widget.multiwaveview.GlowPadView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.multiwaveview.MultiWaveView$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView$2: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.WaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.power.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)> (1)
<com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)> (2)
<com.android.server.VibratorService$3: void run()> (1)
<com.android.server.VibratorService$Vibration: void binderDied()> (1)
<com.android.server.VibratorService: void access$400(com.android.server.VibratorService)> (2)
<com.android.server.VibratorService: void onInputDeviceAdded(int)> (1)
<com.android.server.VibratorService: void onInputDeviceChanged(int)> (1)
<com.android.server.VibratorService: void onInputDeviceRemoved(int)> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.datetimepicker.date.SimpleMonthView$OnDayClickListener: void onDayClick(com.android.datetimepicker.date.SimpleMonthView,com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.deskclock.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener: void pressDelete(int)> (2)
<com.android.inputmethod.keyboard.EmojiPalettesView: void registerCode(int)> (2)
<com.android.inputmethod.keyboard.MainKeyboardView: void onLongPress(com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.PointerTracker: boolean callListenerOnPressAndCheckKeyboardLayoutChange(com.android.inputmethod.keyboard.Key,int)> (3)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.internal.widget.multiwaveview.MultiWaveView: boolean onHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.power.PowerManagerService$2: void run()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: void shutdown(boolean)> (1)
<com.android.server.VibratorService$1: void onChange(boolean)> (1)
<com.android.server.VibratorService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.input.InputManagerService: long interceptKeyBeforeDispatching(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.datetimepicker.date.SimpleMonthView: void onDayClick(int)> (2)
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener$DummyRepeatKeyRepeatTimer: void run()> (2)
<com.android.inputmethod.keyboard.EmojiPalettesView: void onClick(android.view.View)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView: void onKeyClick(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: void access$000(com.android.inputmethod.keyboard.MainKeyboardView,com.android.inputmethod.keyboard.PointerTracker)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void onKeyRepeat(int,int)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void processSlidingKeyInput(com.android.inputmethod.keyboard.Key,int,int,long)> (2)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)> (2)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.datetimepicker.date.SimpleMonthView: boolean onTouchEvent(android.view.MotionEvent)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void access$000(com.android.datetimepicker.date.SimpleMonthView,int)> (1)
<com.android.inputmethod.keyboard.EmojiPalettesView$DeleteKeyOnTouchListener: void startRepeat()> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView$OnKeyClickListener: void onKeyClick(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processPhantomSuddenMoveHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processProximateBogusDownMoveUpEventHack(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView$KeyTimerHandler: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,int,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEventInternal(int,int,long)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void slideFromOldKeyToNewKey(com.android.inputmethod.keyboard.Key,int,int,long,com.android.inputmethod.keyboard.Key,int,int)> (1)
<com.android.internal.policy.impl.GlobalActions$2: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewTouchHelper: boolean onPerformActionForVirtualView(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.keyboard.internal.ScrollKeyboardView: boolean onSingleTapUp(android.view.MotionEvent)> (1)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startLongPressTimer(com.android.inputmethod.keyboard.PointerTracker,int)> (1)
<com.android.inputmethod.keyboard.PointerTracker: void processMotionEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (3)
<com.android.inputmethod.keyboard.PointerTracker$TimerProxy: void startKeyRepeatTimer(com.android.inputmethod.keyboard.PointerTracker,int,int)> (2)
<com.android.inputmethod.keyboard.PointerTracker: void onMoveEvent(int,int,long,android.view.MotionEvent)> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: boolean onLongPress()> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.keyboard.internal.NonDistinctMultitouchHelper: void injectMotionEvent(int,float,float,long,long,com.android.inputmethod.keyboard.PointerTracker,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.internal.NonDistinctMultitouchHelper: void processMotionEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker$KeyEventHandler)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean processMotionEvent(android.view.MotionEvent)> (3)
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)> (2)
<com.android.internal.policy.impl.GlobalActions$5: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.Replayer: void replay(com.android.inputmethod.research.MotionEventReader$ReplayData,java.lang.Runnable)> (2)
<com.android.internal.policy.impl.GlobalActions$4: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.research.ReplayerService: void onHandleIntent(android.content.Intent)> (1)
<com.android.inputmethod.research.ResearchLogger$3: void run()> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<com.android.server.VibratorService: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> (2)
<android.os.IVibratorService: void vibratePattern(int,java.lang.String,long[],int,android.os.IBinder)> (1)
<android.os.SystemVibrator: void vibrate(int,java.lang.String,long[],int)> (2)
<android.os.SystemVibrator: void vibrate(long[],int)> (1)
<android.os.Vibrator: void vibrate(int,java.lang.String,long[],int)> (2)
<android.os.Vibrator: void vibrate(long[],int)> (2)
<com.android.deskclock.alarms.AlarmKlaxon: void start(android.content.Context,com.android.deskclock.provider.AlarmInstance,boolean)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: void tryVibrate()> (1)
<com.android.deskclock.alarms.AlarmService: void startAlarm(com.android.deskclock.provider.AlarmInstance)> (1)
<com.android.inputmethod.pinyin.SoftKeyboardView: com.android.inputmethod.pinyin.SoftKey onKeyPress(int,int,com.android.inputmethod.pinyin.SkbContainer$LongPressTimer,boolean)> (2)
<com.android.deskclock.alarms.AlarmService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.inputmethod.pinyin.SkbContainer: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.inputmethod.pinyin.SoftKeyboardView: com.android.inputmethod.pinyin.SoftKey onKeyMove(int,int)> (1)
<com.android.inputmethod.pinyin.SkbContainer: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService$Stub$Proxy: void cancelVibrate(android.os.IBinder)> ()
<android.os.IVibratorService$Stub: void cancelVibrate(android.os.IBinder)> (2)
<android.os.IVibratorService: void cancelVibrate(android.os.IBinder)> (1)
<android.os.SystemVibrator: void cancel()> (1)
<android.os.Vibrator: void cancel()> (5)
<com.android.deskclock.alarms.AlarmKlaxon: void stop(android.content.Context)> (3)
<com.android.server.VibratorService: void doVibratorOff()> (1)
<com.android.deskclock.alarms.AlarmKlaxon$1: boolean onError(android.media.MediaPlayer,int,int)> (1)
<com.android.deskclock.alarms.AlarmService: void stopCurrentAlarm()> (2)
<com.android.server.VibratorService: void doCancelVibrateLocked()> (5)
<com.android.deskclock.alarms.AlarmService: void onDestroy()> (1)
<com.android.server.VibratorService: void access$200(com.android.server.VibratorService)> (3)
<com.android.server.VibratorService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
Permission:android.permission.RECEIVE_BOOT_COMPLETED
387 Callers:
<com.android.server.search.SearchManagerService: void <init>(android.content.Context)> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.WiredAccessoryManager: void <init>(android.content.Context,com.android.server.input.InputManagerService)> (1)
<android.net.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String)> (1)
<com.android.server.wifi.WifiService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityManagerService: void finishBooting()> (2)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted()> (5)
<com.android.server.am.ActivityStackSupervisor: com.android.server.am.ActivityRecord activityIdleInternalLocked(android.os.IBinder,boolean,android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (3)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler: void activityIdleInternal(com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActiveServices: void serviceTimeout(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService$10: void run()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run()> (1)
<com.android.server.am.ActivityManagerService$13$1: void run()> (1)
<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrashInner(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleIdleTimeoutLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleIdleLocked()> (6)
<android.app.ActivityManagerNative: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: android.content.Context main(int)> (1)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener$NativeCrashReporter: void run()> (2)
<com.android.server.am.ActivityStack: void clearLaunchTime(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked(java.lang.String,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.String)> (7)
<com.android.server.am.ActivityRecord: void windowsVisible()> (1)
<com.android.server.am.ActivityStack: boolean ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,java.lang.String,int,boolean)> (1)
<com.android.server.am.ActivityStackSupervisor: void checkReadyForSleepLocked()> (9)
<com.android.server.am.ActivityStack: void completePauseLocked()> (1)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ()
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.NativeCrashListener: void consumeNativeCrashData(java.io.FileDescriptor)> (1)
<com.android.server.am.ActivityStack: void startPausingLocked(boolean,boolean)> (4)
<com.android.server.am.ActivityManagerService: boolean access$300(com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (13)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked(com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked(java.lang.String,int,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void forceStopUserLocked(int,java.lang.String)> (1)
<com.android.server.am.ActivityRecord$Token: void windowsVisible()> (2)
<com.android.server.am.ActivityStack: boolean ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int,boolean)> (2)
<com.android.server.am.ActivityStackSupervisor: boolean shutdownLocked(int)> (1)
<com.android.server.am.ActivityStackSupervisor: void activitySleptLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStackSupervisor: void goingToSleepLocked()> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleSleepTimeout()> (1)
<com.android.server.am.ActivityStack: void activityPausedLocked(android.os.IBinder,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener: void run()> (2)
<com.android.server.am.ActivityStack: boolean checkReadyForSleepLocked()> (2)
<com.android.server.am.ActivityStackSupervisor: boolean pauseBackStacks(boolean)> (1)
<com.android.server.am.ActivityManagerService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<com.android.server.am.ActivityManagerService: int access$100(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (3)
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void finishUserSwitch(com.android.server.am.UserStartedState)> (1)
<com.android.server.am.ActivityManagerService: boolean inputDispatchingTimedOut(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)> (4)
<com.android.server.am.ActivityManagerService: void finishUserStop(com.android.server.am.UserStartedState)> (1)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible()> ()
<android.view.IApplicationToken$Stub: void windowsVisible()> (2)
<com.android.server.am.ActivityStack: boolean ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int)> (3)
<com.android.server.am.ActivityStackSupervisor: void ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int)> (7)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (2)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> (1)
<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()> (1)
<android.app.ActivityManagerNative: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<com.android.server.am.ActivityManagerService$26: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (1)
<com.android.server.am.ActivityRecord: boolean keyDispatchingTimedOut(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int)> (1)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean,boolean)> (5)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (4)
<com.android.server.am.ActivityManagerService$25: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible()> (1)
<com.android.server.am.ActivityStack: void goToSleep()> (1)
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.ActivityStackSupervisor: boolean attachApplicationLocked(com.android.server.am.ProcessRecord,boolean)> (1)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<com.android.server.am.ActivityManagerService$12: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.app.ActivityManagerNative: void goingToSleep()> (2)
<com.android.server.ServerThread$2: void run()> (1)
<android.app.IActivityManager: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (1)
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> ()
<android.content.IIntentReceiver$Stub: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.ActivityManagerNative: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (2)
<com.android.server.am.ActivityRecord$Token: boolean keyDispatchingTimedOut(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked(java.lang.String,int,int,int,boolean,boolean,boolean,boolean,java.lang.String)> (3)
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.BroadcastQueue: void processNextBroadcast(boolean)> (6)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied()> (1)
<com.android.server.am.ActivityRecord$Token: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.CompatModePackages: void setFrontActivityScreenCompatModeLocked(int)> (1)
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(java.lang.String,int)> (2)
<android.app.IActivityManager: boolean shutdown(int)> (1)
<android.app.IActivityManager: void goingToSleep()> (1)
<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)> (4)
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (14)
<android.content.IIntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.IActivityManager: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (1)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut(java.lang.String)> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest(com.android.server.am.ProcessRecord,android.app.Dialog)> (4)
<com.android.server.am.ActivityManagerService: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceInnerLocked(com.android.server.am.ActiveServices$ServiceMap,android.content.Intent,com.android.server.am.ServiceRecord,boolean,boolean)> (2)
<com.android.server.am.ActiveServices: void performServiceRestartLocked(com.android.server.am.ServiceRecord)> (1)
<android.app.ActivityManagerNative: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.BroadcastQueue: void backgroundServicesFinishedLocked(int)> (1)
<com.android.server.am.BroadcastQueue: void broadcastTimeoutLocked(boolean)> (3)
<com.android.server.am.BroadcastQueue: void scheduleBroadcastsLocked()> (7)
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> (1)
<com.android.server.am.CompatModeDialog$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.server.power.ShutdownThread: void run()> (2)
<com.android.server.power.Notifier: void sendGoToSleepBroadcast(int)> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)> (4)
<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (5)
<com.android.server.pm.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.PendingIntent$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IntentSender$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am$IntentReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$13: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$14: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$21: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$22: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$25: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$26: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$8: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService$11: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.BroadcastQueue: void performReceiveLocked(com.android.server.am.ProcessRecord,android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.wm.InputMonitor: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> (1)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut(java.lang.String)> (1)
<android.app.ActivityManagerNative: void killUid(int,java.lang.String)> (2)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,int)> (2)
<com.android.server.am.ActiveServices$ServiceMap: void rescheduleDelayedStarts()> (4)
<com.android.server.am.ActiveServices$ServiceRestarter: void run()> (1)
<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: void backgroundServicesFinishedLocked(int)> (1)
<com.android.server.am.BroadcastQueue: void setBroadcastTimeoutLocked(long)> (2)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (1)
<com.android.server.am.BroadcastQueue: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipPendingBroadcastLocked(int)> (1)
<android.app.ActivityManagerNative: void setPackageScreenCompatMode(java.lang.String,int)> (2)
<com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<com.android.server.power.Notifier: void sendNextBroadcast()> (3)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)> (5)
<com.android.server.pm.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void unloadMediaPackages(java.util.HashMap,int[],boolean)> (1)
<com.android.server.pm.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.am.BroadcastQueue: void deliverToRegisteredReceiverLocked(com.android.server.am.BroadcastRecord,com.android.server.am.BroadcastFilter,boolean)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> (1)
<android.app.IActivityManager: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices$ServiceMap: void ensureNotStartingBackground(com.android.server.am.ServiceRecord)> (4)
<com.android.server.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (4)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void skipPendingBroadcastLocked(int)> (1)
<android.app.IActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> (2)
<com.android.server.power.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)> (3)
<com.android.server.power.Notifier: void access$500(com.android.server.power.Notifier)> (4)
<com.android.server.power.Notifier: void sendWakeUpBroadcast()> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package access$2100(com.android.server.pm.PackageManagerService,java.io.File,int,int,long,android.os.UserHandle)> (1)
<com.android.server.pm.PackageManagerService: boolean deleteSystemPackageLI(com.android.server.pm.PackageSetting,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (1)
<com.android.server.pm.PackageManagerService: void loadMediaPackages(java.util.HashMap,int[],java.util.HashSet)> (1)
<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)> (1)
<com.android.server.pm.PackageManagerService: void installPackageLI(com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: int access$4100(com.android.server.pm.PackageManagerService,java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean,boolean)> (2)
<com.android.server.input.InputManagerService: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> ()
<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)> (5)
<com.android.server.BackupManagerService$PerformBackupTask: void invokeNextAgent()> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask: void backupOnePackage(android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void restoreNextAgent()> (1)
<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: void cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> ()
<com.android.commands.am.Am: void runScreenCompat()> (1)
<com.android.server.power.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)> (1)
<com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)> (2)
<com.android.server.power.Notifier$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier: void updatePendingBroadcastLocked()> (2)
<com.android.server.pm.PackageManagerService$AppDirObserver: void onEvent(int,java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: void <init>(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,boolean,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService$7: void run()> (1)
<com.android.server.pm.PackageManagerService: void access$4600(com.android.server.pm.PackageManagerService,boolean,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void scanAvailableAsecs()> (1)
<com.android.server.am.ActiveServices: boolean forceStopLocked(java.lang.String,int,boolean,boolean)> (1)
<com.android.server.am.ActiveServices: void bringDownServiceIfNeededLocked(com.android.server.am.ServiceRecord,boolean,boolean)> (3)
<com.android.server.am.ActiveServices: void killServicesLocked(com.android.server.am.ProcessRecord,boolean)> (1)
<com.android.server.am.ActiveServices: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void execute()> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask: void run()> (1)
<com.android.server.BackupManagerService$PerformFullRestoreTask: void run()> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void execute()> (1)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register(android.app.IActivityManager)> (1)
<com.android.server.am.ActivityManagerService: void trimApplications()> (5)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void access$200(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.commands.am.Am: void onRun()> (1)
<com.android.server.power.PowerManagerService$2: void run()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: void shutdown(boolean)> (1)
<com.android.server.power.Notifier: void onGoToSleepFinished()> (1)
<com.android.server.power.Notifier: void onWakeUpStarted()> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.IPackageManager main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService$5: void run()> (1)
<com.android.server.pm.PackageManagerService$10: void run()> (1)
<com.android.server.MountService$4: void run()> (2)
<com.android.server.am.ActiveServices: void removeConnectionLocked(com.android.server.am.ConnectionRecord,com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActiveServices: void stopServiceLocked(com.android.server.am.ServiceRecord)> (4)
<com.android.server.BackupManagerService$BackupRestoreTask: void execute()> (2)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces()> (1)
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> (1)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (5)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)> (2)
<com.android.server.power.PowerManagerService: void sendPendingNotificationsLocked()> (3)
<com.android.server.power.PowerManagerService: boolean wakeUpNoUpdateLocked(long)> (4)
<com.android.server.MountService: void onDaemonConnected()> (1)
<com.android.server.am.ActiveServices: void cleanUpRemovedTaskLocked(com.android.server.am.TaskRecord,android.content.ComponentName,android.content.Intent)> (1)
<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)> (2)
<com.android.server.BackupManagerService$PerformBackupTask: void executeNextState(com.android.server.BackupManagerService$BackupState)> (4)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<android.app.ActivityManagerNative: void setProcessLimit(int)> (2)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,boolean)> (4)
<com.android.internal.os.BaseCommand: void run(java.lang.String[])> (3)
<com.android.internal.policy.impl.GlobalActions$2: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$2: void onPress()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.server.power.PowerManagerService: boolean goToSleepNoUpdateLocked(long,int)> (3)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (21)
<com.android.server.power.PowerManagerService: void applyWakeLockFlagsOnAcquireLocked(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void handleDreamFinishedLocked()> (1)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.server.power.PowerManagerService: void wakeUpInternal(long)> (2)
<com.android.server.INativeDaemonConnectorCallbacks: void onDaemonConnected()> (1)
<com.android.server.am.ActivityManagerService: void cleanUpRemovedTaskLocked(com.android.server.am.TaskRecord,int)> (1)
<com.android.server.am.ActiveServices: boolean attachApplicationLocked(com.android.server.am.ProcessRecord,java.lang.String)> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void agentErrorCleanup()> (2)
<com.android.server.BackupManagerService$PerformBackupTask: void beginBackup()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: void operationComplete()> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
<android.app.IActivityManager: void setProcessLimit(int)> ()
<com.android.commands.am.Am: void run(java.lang.String[])> (2)
<com.android.commands.media.Media: void run(java.lang.String[])> (2)
<com.android.commands.wm.Wm: void run(java.lang.String[])> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: boolean onLongPress()> (2)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (1)
<com.android.server.power.PowerManagerService: boolean updateWakefulnessLocked(int)> (1)
<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int)> (2)
<com.android.server.power.PowerManagerService: void access$900(com.android.server.power.PowerManagerService)> (4)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,int,int)> (1)
<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleBootCompletedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.power.PowerManagerService: void handleScreenOnBlockerReleased()> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()> (1)
<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void napInternal(long)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.server.TwilightService,com.android.server.dreams.DreamManagerService)> (1)
<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)> (2)
<com.android.server.power.PowerManagerService: void wakeUpFromNative(long)> ()
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.server.BackupManagerService$PerformBackupTask: int invokeAgentForBackup(java.lang.String,android.app.IBackupAgent,com.android.internal.backup.IBackupTransport)> (2)
<com.android.server.BackupManagerService$PerformBackupTask: void handleTimeout()> (1)
<com.android.server.BackupManagerService$BackupRestoreTask: void operationComplete()> (2)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.commands.media.Media: void main(java.lang.String[])> ()
<com.android.commands.wm.Wm: void main(java.lang.String[])> ()
<com.android.internal.policy.impl.GlobalActions$5: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.server.power.PowerManagerService: void goToSleepFromNative(long,int)> ()
<com.android.server.power.PowerManagerService$1: void onProximityNegative()> (1)
<com.android.server.power.PowerManagerService$1: void onProximityPositive()> (1)
<com.android.server.power.PowerManagerService$1: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$DockReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$1300(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void checkIfBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$1900(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2000(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1600(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$1800(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2300(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void userActivityFromNative(long,int,int)> ()
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.server.BackupManagerService$BackupRestoreTask: void handleTimeout()> (1)
<com.android.server.BackupManagerService: void opComplete(int)> (2)
<com.android.internal.policy.impl.GlobalActions$4: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityNegative()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onProximityPositive()> (1)
<com.android.server.power.DisplayPowerController$Callbacks: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$BatteryReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$2100(com.android.server.power.PowerManagerService)> (3)
<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()> (2)
<com.android.server.power.PowerManagerService$ScreenOnBlockerImpl: void release()> (1)
<com.android.server.power.PowerManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)> (1)
<com.android.server.power.PowerManagerService$WakeLock: void binderDied()> (1)
<com.android.server.BackupManagerService: void handleTimeout(int,java.lang.Object)> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int)> ()
<android.app.backup.IBackupManager$Stub: void opComplete(int)> (2)
<com.android.server.power.DisplayPowerController$5: void run()> (1)
<com.android.server.power.DisplayPowerController$4: void run()> (1)
<com.android.server.power.DisplayPowerController$3: void run()> (1)
<com.android.server.power.PowerManagerService: void startWatchingForBootAnimationFinished()> (1)
<com.android.server.power.PowerManagerService: void access$1500(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void updateDreamLocked(int)> (1)
<com.android.server.power.ScreenOnBlocker: void release()> (1)
<com.android.server.BackupManagerService: void prepareOperationTimeout(int,long,com.android.server.BackupManagerService$BackupRestoreTask)> (5)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void opComplete(int)> (4)
<com.android.server.power.PowerManagerService: void access$1400(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService$DreamReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.Notifier$1: void onScreenOn()> (1)
<com.android.server.BackupManagerService$FullBackupObbConnection: boolean backupObbs(android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<com.android.server.BackupManagerService$PerformFullBackupTask$FullBackupRunner: void run()> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void initiateOneRestore(android.content.pm.PackageInfo,int,android.app.IBackupAgent,boolean)> (2)
<com.android.server.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<com.android.server.power.PowerManagerService$BootCompletedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BackupManagerService$PerformRestoreTask: void restorePmMetadata()> (1)
<android.app.IBackupAgent$Stub$Proxy: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IBackupAgent: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreFileRunnable: void run()> (1)
<com.android.server.AppWidgetService: void systemRunning(boolean)> (1)
<com.android.server.RecognitionManagerService: void <init>(android.content.Context)> (1)
<com.android.server.content.SyncManager: void <init>(android.content.Context,boolean)> (1)
<com.android.server.content.ContentService: com.android.server.content.SyncManager getSyncManager()> (21)
<com.android.server.content.ContentService: void systemReady()> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbService: void <init>(android.content.Context)> (1)
Permission:android.permission.RESTART_PACKAGES
18 Callers:
<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)> (1)
<android.app.ActivityManagerNative: void killBackgroundProcesses(java.lang.String,int)> (2)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void killBackgroundProcesses(java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> (2)
<com.android.commands.am.Am: void runKill()> (1)
<android.app.ActivityManager: void restartPackage(java.lang.String)> ()
<com.android.development.PackageSummary$1: void onClick(android.view.View)> (1)
<com.android.commands.am.Am: void onRun()> (1)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<com.android.internal.os.BaseCommand: void run(java.lang.String[])> (3)
<com.android.commands.am.Am: void run(java.lang.String[])> (2)
<com.android.commands.media.Media: void run(java.lang.String[])> (2)
<com.android.commands.wm.Wm: void run(java.lang.String[])> (2)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.commands.media.Media: void main(java.lang.String[])> ()
<com.android.commands.wm.Wm: void main(java.lang.String[])> ()
Permission:android.permission.MODIFY_AUDIO_SETTINGS
131 Callers:
<android.media.AudioService: boolean checkAudioSettingsPermission(java.lang.String)> (5)
<android.media.AudioService: void setBluetoothScoOn(boolean)> (2)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (2)
<android.media.AudioService: void setSpeakerphoneOn(boolean)> (2)
<android.media.AudioService: void startBluetoothSco(android.os.IBinder,int)> (2)
<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setBluetoothScoOn(boolean)> ()
<android.media.IAudioService$Stub: void setBluetoothScoOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<android.media.IAudioService$Stub$Proxy: void setSpeakerphoneOn(boolean)> ()
<android.media.IAudioService$Stub: void setSpeakerphoneOn(boolean)> (2)
<android.media.IAudioService$Stub$Proxy: void startBluetoothSco(android.os.IBinder,int)> ()
<android.media.IAudioService$Stub: void startBluetoothSco(android.os.IBinder,int)> (2)
<android.media.IAudioService$Stub$Proxy: void stopBluetoothSco(android.os.IBinder)> ()
<android.media.IAudioService$Stub: void stopBluetoothSco(android.os.IBinder)> (2)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setBluetoothScoOn(boolean)> (1)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<android.media.IAudioService: void setSpeakerphoneOn(boolean)> (1)
<android.media.IAudioService: void startBluetoothSco(android.os.IBinder,int)> (1)
<android.media.IAudioService: void stopBluetoothSco(android.os.IBinder)> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setBluetoothScoOn(boolean)> (3)
<android.media.AudioManager: void setMode(int)> (2)
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> (1)
<android.media.AudioManager: void startBluetoothSco()> ()
<android.media.AudioManager: void stopBluetoothSco()> ()
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processAudioEvent(int,android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processAudioEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.internal.telephony.CallManager: void acceptCall(com.android.internal.telephony.Call)> ()
<com.android.internal.telephony.CallManager: void setAudioMode()> ()
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> ()
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<android.media.AudioManager: boolean isBluetoothA2dpOn()> (2)
<android.inputmethodservice.KeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (2)
<com.android.inputmethod.accessibility.AccessibilityUtils: boolean shouldObscureInput(android.view.inputmethod.EditorInfo)> (2)
<android.inputmethodservice.KeyboardView: void showPreview(int)> (4)
<com.android.internal.widget.PasswordEntryKeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: java.lang.String getKeyDescription(com.android.inputmethod.keyboard.Key)> (2)
<com.android.inputmethod.accessibility.AccessibilityUtils: void onStartInputViewInternal(android.view.View,android.view.inputmethod.EditorInfo,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (2)
<android.inputmethodservice.KeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (2)
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (5)
<com.android.internal.widget.PasswordEntryKeyboardView: void showPreview(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: android.view.accessibility.AccessibilityEvent createAccessibilityEvent(com.android.inputmethod.keyboard.Key,int)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (2)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleModeChange()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleShift()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setKeyboardMode(int)> ()
<com.android.internal.widget.PasswordEntryKeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int)> (2)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void sendAccessibilityEventForKey(com.android.inputmethod.keyboard.Key,int)> (2)
<com.android.inputmethod.latin.LatinIME: void access$1000(com.android.inputmethod.latin.LatinIME,android.view.inputmethod.EditorInfo,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void onKey(int,int[])> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performActionForKey(com.android.inputmethod.keyboard.Key,int,android.os.Bundle)> (2)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onHoverKey(com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (2)
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge: java.lang.Object createAccessibilityNodeInfo(int)> (1)
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,com.android.inputmethod.keyboard.PointerTracker)> (1)
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onTransitionKey(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.Key,android.view.MotionEvent)> (1)
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: boolean performAction(int,int,android.os.Bundle)> (4)
<com.android.inputmethod.keyboard.MainKeyboardView: boolean dispatchHoverEvent(android.view.MotionEvent)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1: boolean performAction(int,int,android.os.Bundle)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderKitKatImpl$1: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewTouchHelper: void clearFocusedVirtualView()> (1)
<com.android.datetimepicker.date.SimpleMonthView$MonthViewTouchHelper: void setFocusedVirtualView(int)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: boolean performAction(int,int,android.os.Bundle)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$AccessibilityNodeInfoBridge: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.SimpleMonthView: void clearAccessibilityFocus()> (2)
<com.android.datetimepicker.date.SimpleMonthView: boolean restoreAccessibilityFocus(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1: boolean performAction(int,int,android.os.Bundle)> (1)
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatKitKat$1: boolean performAction(int,int,android.os.Bundle)> (1)
<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay findAccessibilityFocus()> (1)
<com.android.datetimepicker.date.DayPickerView: boolean restoreAccessibilityFocus(com.android.datetimepicker.date.SimpleMonthAdapter$CalendarDay)> (1)
<com.android.datetimepicker.date.DayPickerView: void layoutChildren()> (2)
<android.media.AudioManager: boolean isWiredHeadsetOn()> (2)
<android.media.AudioManager: void setMicrophoneMute(boolean)> ()
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> ()
<android.media.AudioManager: void setParameters(java.lang.String)> (5)
<com.android.bluetooth.hfp.HeadsetStateMachine: void configAudioParameters()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processLocalVrEvent(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processNoiceReductionEvent(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processVrEvent(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$2300(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4200(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5400(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$4800(com.android.bluetooth.hfp.HeadsetStateMachine,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<android.server.BluetoothA2dpService: boolean checkSinkSuspendState(int)> ()
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> ()
<android.server.BluetoothA2dpService: void onBluetoothEnable()> ()
<android.server.BluetoothA2dpService: void onBluetoothDisable()> ()
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
Permission:android.permission.READ_USER_DICTIONARY
53 Callers:
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: boolean hasWord(java.lang.String,android.content.Context)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: int apply(android.content.Context,android.os.Bundle)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void onPause()> (1)
<com.android.providers.userdictionary.UserDictionaryProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: android.database.Cursor createCursor(java.lang.String)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: void onActivityCreated(android.os.Bundle)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: byte[] getDictionary()> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> (2)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: java.util.TreeSet getUserDictionaryLocalesSet(android.app.Activity)> (3)
<com.android.inputmethod.latin.settings.SettingsFragment: void overwriteUserDictionaryPreference(android.preference.Preference)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: java.util.ArrayList getLocalesList(android.app.Activity)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: void createUserDictSettings(android.preference.PreferenceGroup)> (1)
<com.android.inputmethod.latin.settings.SettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void updateSpinner()> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryList: void onResume()> (1)
<com.android.inputmethodcommon.InputMethodSettingsFragment: void onCreate(android.os.Bundle)> (3)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: void onResume()> (1)
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void loadDictionaryAsync()> (2)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$13: void run()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void writeBinaryDictionary()> (9)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (10)
<com.android.inputmethod.latin.personalization.DecayingExpandableBinaryDictionaryBase: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.personalization.PersonalizationDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.personalization.PersonalizationPredictionDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.personalization.UserHistoryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void writeBinaryDictionary()> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void writeBinaryDictionary()> (1)
<com.android.inputmethod.latin.ContactsBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$12: void run()> (1)
<com.android.inputmethod.latin.ExpandableBinaryDictionary$14: void run()> (1)
<com.android.inputmethod.latin.personalization.DecayingExpandableBinaryDictionaryBase: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.personalization.PersonalizationDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<com.android.inputmethod.latin.personalization.PersonalizationPredictionDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.personalization.UserHistoryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void access$700(com.android.inputmethod.latin.ExpandableBinaryDictionary)> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> (1)
<com.android.inputmethod.compat.UserDictionaryCompatUtils: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (2)
<com.android.inputmethod.latin.UserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (2)
<com.android.inputmethod.latin.LatinIME: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView$Listener: void addWordToUserDictionary(java.lang.String)> (1)
<com.android.inputmethod.latin.suggestions.SuggestionStripView: void onClick(android.view.View)> (1)
<com.android.providers.userdictionary.DictionaryBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> (2)
<com.android.inputmethod.latin.userdictionary.UserDictionarySettings: void deleteWord(java.lang.String,java.lang.String,android.content.ContentResolver)> (2)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordContents: void delete(android.content.Context)> (1)
<com.android.inputmethod.latin.userdictionary.UserDictionaryAddWordFragment: boolean onOptionsItemSelected(android.view.MenuItem)> (1)
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
19 Callers:
<com.android.server.wifi.WifiService: void enforceMulticastChangePermission()> (3)
<com.android.server.wifi.WifiService: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<com.android.server.wifi.WifiService: void initializeMulticastFiltering()> (2)
<com.android.server.wifi.WifiService: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> ()
<android.net.wifi.IWifiManager$Stub: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void initializeMulticastFiltering()> ()
<android.net.wifi.IWifiManager$Stub: void initializeMulticastFiltering()> (2)
<android.net.wifi.IWifiManager$Stub$Proxy: void releaseMulticastLock()> ()
<android.net.wifi.IWifiManager$Stub: void releaseMulticastLock()> (2)
<android.net.wifi.IWifiManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.IWifiManager: void acquireMulticastLock(android.os.IBinder,java.lang.String)> (1)
<android.net.wifi.IWifiManager: void initializeMulticastFiltering()> (1)
<android.net.wifi.IWifiManager: void releaseMulticastLock()> (2)
<com.android.server.wifi.WifiService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.wifi.WifiManager$MulticastLock: void acquire()> ()
<android.net.wifi.WifiManager: boolean initializeMulticastFiltering()> ()
<android.net.wifi.WifiManager$MulticastLock: void release()> (1)
<android.net.wifi.WifiManager$MulticastLock: void finalize()> ()
Permission:android.permission.FLASHLIGHT
6 Callers:
<com.android.server.LightsService$1: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub$Proxy: void setFlashlightEnabled(boolean)> ()
<android.os.IHardwareService$Stub: void setFlashlightEnabled(boolean)> (2)
<android.os.IHardwareService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IHardwareService: void setFlashlightEnabled(boolean)> ()
<com.android.server.LightsService$1: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
Permission:android.permission.USE_SIP
59 Callers:
<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.SipProfile[] getListOfProfiles()> ()
<android.net.sip.ISipService$Stub: android.net.sip.SipProfile[] getListOfProfiles()> (2)
<android.net.sip.ISipService: android.net.sip.SipProfile[] getListOfProfiles()> (1)
<android.net.sip.ISipService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.net.sip.SipManager: android.net.sip.SipProfile[] getListOfProfiles()> ()
<com.android.server.sip.SipService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)> (2)
<android.net.sip.ISipService$Stub$Proxy: void open(android.net.sip.SipProfile)> ()
<android.net.sip.ISipService$Stub: void open(android.net.sip.SipProfile)> (2)
<android.net.sip.ISipService: void open(android.net.sip.SipProfile)> (1)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> ()
<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> ()
<com.android.server.sip.SipService: void close(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> ()
<android.net.sip.ISipService$Stub: void close(java.lang.String)> (2)
<android.net.sip.ISipService: void close(java.lang.String)> (1)
<android.net.sip.SipManager: void close(java.lang.String)> ()
<com.android.server.sip.SipService: boolean isOpened(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: boolean isOpened(java.lang.String)> ()
<android.net.sip.ISipService$Stub: boolean isOpened(java.lang.String)> (2)
<android.net.sip.ISipService: boolean isOpened(java.lang.String)> (1)
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> ()
<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> ()
<android.net.sip.ISipService$Stub: boolean isRegistered(java.lang.String)> (2)
<android.net.sip.ISipService: boolean isRegistered(java.lang.String)> (1)
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> ()
<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)> (1)
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> ()
<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> ()
<android.net.sip.ISipService$Stub: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (2)
<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)> (3)
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> (1)
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)> ()
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)> ()
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> (2)
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> ()
<com.android.internal.telephony.sip.SipPhone$SipConnection: void dial()> (1)
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)> (1)
<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.ISipService$Stub$Proxy: android.net.sip.ISipSession getPendingSession(java.lang.String)> ()
<android.net.sip.ISipService$Stub: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String)> (2)
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> ()
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> ()
Permission:android.permission.SET_WALLPAPER_HINTS
7 Callers:
<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub$Proxy: void setDimensionHints(int,int)> ()
<android.app.IWallpaperManager$Stub: void setDimensionHints(int,int)> (2)
<android.app.IWallpaperManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IWallpaperManager: void setDimensionHints(int,int)> (1)
<com.android.server.WallpaperManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)> ()
Permission:android.permission.GET_PACKAGE_SIZE
7 Callers:
<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub$Proxy: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> ()
<android.content.pm.IPackageManager$Stub: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (2)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (1)
<com.android.server.pm.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.ApplicationPackageManager: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)> (1)
Permission:android.permission.BLUETOOTH
1159 Callers:
<com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> ()
<android.bluetooth.IBluetoothManager$Stub: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothManager: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)> (1)
<com.android.server.BluetoothManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: void finalize()> ()
<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> ()
<android.bluetooth.IBluetoothManager$Stub: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (7)
<android.bluetooth.BluetoothA2dp: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothHeadset: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothHealth: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothInputDevice: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothMap: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothPan: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)> (1)
<android.bluetooth.BluetoothPbap: void <init>(android.content.Context,android.bluetooth.BluetoothPbap$ServiceListener)> ()
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> (4)
<android.bluetooth.BluetoothTetheringDataTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<android.media.AudioService$AudioServiceBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService: boolean getBluetoothHeadset()> (2)
<com.android.server.am.BatteryStatsService: void noteBluetoothOn()> (2)
<android.net.BaseNetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (2)
<android.media.AudioService: boolean access$2600(android.media.AudioService)> (2)
<android.media.AudioService: void disconnectBluetoothSco(int)> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: void noteBluetoothOn()> ()
<com.android.internal.app.IBatteryStats$Stub: void noteBluetoothOn()> (2)
<android.net.NetworkStateTracker: void startMonitoring(android.content.Context,android.os.Handler)> (1)
<com.android.server.connectivity.Vpn: void startMonitoring(android.content.Context,android.os.Handler)> (2)
<android.media.AudioService$ScoClient: void requestScoState(int,int)> (3)
<android.media.AudioService: void access$1100(android.media.AudioService,int)> (1)
<android.media.AudioService: void setMode(int,android.os.IBinder)> (2)
<com.android.internal.app.IBatteryStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.IBatteryStats: void noteBluetoothOn()> ()
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,com.android.server.ConnectivityService$NetworkFactory)> (1)
<com.android.server.ConnectivityService: void onUserStart(int)> (1)
<android.media.AudioService$ScoClient: void clearCount(boolean)> (2)
<android.media.AudioService$ScoClient: void decCount()> (1)
<android.media.AudioService$ScoClient: void incCount(int)> (1)
<android.media.IAudioService$Stub$Proxy: void setMode(int,android.os.IBinder)> ()
<android.media.IAudioService$Stub: void setMode(int,android.os.IBinder)> (2)
<com.android.server.am.BatteryStatsService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager)> (1)
<com.android.server.ConnectivityService: void access$5400(com.android.server.ConnectivityService,int)> (1)
<android.media.AudioService$ScoClient: void binderDied()> (1)
<android.media.AudioService: void clearAllScoClients(int,boolean)> (3)
<android.media.IAudioService$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IAudioService: void setMode(int,android.os.IBinder)> (1)
<com.android.server.ServerThread: void initAndLoop()> (1)
<com.android.server.ConnectivityService$7: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.media.AudioService: void resetBluetoothSco()> (1)
<android.media.AudioService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.AudioManager: void setMode(int)> (2)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<android.media.AudioService: void access$6600(android.media.AudioService)> (2)
<com.android.internal.telephony.CallManager: void acceptCall(com.android.internal.telephony.Call)> ()
<com.android.internal.telephony.CallManager: void setAudioMode()> ()
<com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> ()
<android.bluetooth.IBluetoothManager$Stub: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (2)
<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)> (7)
<android.bluetooth.BluetoothA2dp: void close()> (2)
<android.bluetooth.BluetoothHeadset: void close()> (1)
<android.bluetooth.BluetoothHealth: void close()> (1)
<android.bluetooth.BluetoothInputDevice: void close()> (1)
<android.bluetooth.BluetoothMap: void close()> (2)
<android.bluetooth.BluetoothPan: void close()> (2)
<android.bluetooth.BluetoothPbap: void close()> (1)
<android.bluetooth.BluetoothA2dp: void finalize()> ()
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)> ()
<android.bluetooth.BluetoothMap: void finalize()> ()
<android.bluetooth.BluetoothPan: void finalize()> ()
<android.bluetooth.BluetoothPbap: void finalize()> ()
<com.android.server.BluetoothManagerService: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getAddress()> ()
<android.bluetooth.IBluetoothManager$Stub: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetoothManager: java.lang.String getAddress()> (1)
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> (1)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)> (8)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocket(int)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)> (2)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocket(int)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> ()
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createScoSocket()> ()
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,android.os.ParcelUuid)> (1)
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,int)> (4)
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,java.lang.String,int)> ()
<com.android.bluetooth.map.BluetoothMnsObexClient: void connect()> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer$SocketConnectThread: void run()> (3)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket createNewRfcommSocketAndRecord(java.lang.String,java.util.UUID,boolean,boolean)> (3)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommOn(int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommOn(int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommOn(int)> ()
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingScoOn()> ()
<com.android.bluetooth.map.BluetoothMnsObexClient: void handleRegistration(int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppTransfer: void startConnectSession()> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String,java.util.UUID)> (2)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> (1)
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> ()
<com.android.bluetooth.opp.BluetoothOppTransfer: void start()> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean initSocket()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: boolean initSocket()> (1)
<com.android.bluetooth.opp.BluetoothOppRfcommListener$1: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void insertShare(android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void removeBatch(com.android.bluetooth.opp.BluetoothOppBatch)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean access$200(com.android.bluetooth.map.BluetoothMapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: boolean access$200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$1800(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void deleteShare(int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void updateShare(android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.map.BluetoothMapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService$SocketAcceptThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService$UpdateThread: void run()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void access$1700(com.android.bluetooth.opp.BluetoothOppService,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$2200(com.android.bluetooth.opp.BluetoothOppService,android.database.Cursor,int,boolean)> (1)
<com.android.bluetooth.map.BluetoothMapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startRfcommSocketListener()> (2)
<com.android.bluetooth.opp.BluetoothOppService: void updateFromProvider()> (3)
<com.android.bluetooth.map.BluetoothMapService: void access$900(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.map.BluetoothMapService: void stopObexServerSession()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1000(com.android.bluetooth.pbap.BluetoothPbapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void stopObexServerSession()> (2)
<com.android.bluetooth.opp.BluetoothOppService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void access$000(com.android.bluetooth.opp.BluetoothOppService)> (1)
<com.android.bluetooth.opp.BluetoothOppService: void onCreate()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean start()> (1)
<com.android.bluetooth.map.BluetoothMapService: void access$1000(com.android.bluetooth.map.BluetoothMapService)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void onCreate()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$1200(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void parseIntent(android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppService$BluetoothShareContentObserver: void onChange(boolean)> (1)
<com.android.bluetooth.btservice.ProfileService: boolean start()> (1)
<com.android.bluetooth.map.BluetoothMapService$MapBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: int onStartCommand(android.content.Intent,int,int)> (1)
<com.android.bluetooth.btservice.ProfileService: void doStart(android.content.Intent)> (8)
<com.android.bluetooth.a2dp.A2dpService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.btservice.ProfileService: int onStartCommand(android.content.Intent,int,int)> (8)
<com.android.bluetooth.gatt.GattService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStart(android.content.Intent)> (1)
<com.android.bluetooth.a2dp.A2dpService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.gatt.GattService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.hid.HidService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.bluetooth.pan.PanService: int onStartCommand(android.content.Intent,int,int)> (2)
<com.android.server.BluetoothManagerService: java.lang.String getName()> (2)
<android.bluetooth.IBluetoothManager$Stub$Proxy: java.lang.String getName()> ()
<android.bluetooth.IBluetoothManager$Stub: java.lang.String getName()> (2)
<android.bluetooth.IBluetoothManager: java.lang.String getName()> (1)
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> ()
<com.android.bluetooth.pan.PanService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.pan.PanService: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService: void setBluetoothTethering(boolean)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPan$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.IBluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: void setBluetoothTethering(boolean)> ()
<android.bluetooth.IBluetoothPan$Stub: void setBluetoothTethering(boolean)> (2)
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(boolean)> (1)
<android.bluetooth.BluetoothTetheringDataTracker: boolean teardown()> ()
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> ()
<com.android.bluetooth.pan.PanService: java.util.List getConnectedDevices()> (3)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.pan.PanService: boolean cleanup()> (1)
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothPan$Stub: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.btservice.ProfileService: boolean cleanup()> (1)
<android.bluetooth.IBluetoothPan: java.util.List getConnectedDevices()> (1)
<com.android.bluetooth.btservice.ProfileService: void onDestroy()> (8)
<android.bluetooth.BluetoothPan: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.a2dp.A2dpService: void onDestroy()> (2)
<com.android.bluetooth.gatt.GattService: void onDestroy()> (2)
<com.android.bluetooth.hdp.HealthService: void onDestroy()> (2)
<com.android.bluetooth.hfp.HeadsetService: void onDestroy()> (2)
<com.android.bluetooth.hid.HidService: void onDestroy()> (2)
<com.android.bluetooth.map.BluetoothMapService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: void onDestroy()> (2)
<com.android.bluetooth.pan.PanService: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothPan$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothPan$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothPan: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.btservice.AdapterService: boolean isEnabled()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isEnabled()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isEnabled()> ()
<android.bluetooth.IBluetooth$Stub: boolean isEnabled()> (2)
<android.bluetooth.IBluetooth: boolean isEnabled()> (2)
<android.bluetooth.IBluetooth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean isEnabled()> (15)
<com.android.server.BluetoothManagerService: boolean isEnabled()> (2)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothAdapter: boolean enableNoAutoConnect()> ()
<android.bluetooth.BluetoothAdapter: boolean enable()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnablingActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppManager: boolean isEnabled()> (1)
<com.android.bluetooth.opp.BluetoothOppService: void startListener()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void updateNotificationWhenBtDisabled()> (3)
<com.android.bluetooth.pbap.BluetoothPbapReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean isEnabled()> ()
<android.bluetooth.IBluetoothManager$Stub: boolean isEnabled()> (2)
<com.android.bluetooth.opp.BluetoothOppManager: void enableBluetooth()> (1)
<com.android.internal.app.AlertActivity: void onCreate(android.os.Bundle)> (11)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void launchDevicePicker()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: boolean onContextItemSelected(android.view.MenuItem)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void clearAllDownloads()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<android.bluetooth.IBluetoothManager: boolean isEnabled()> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.opp.BluetoothOppBtEnableActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppBtErrorActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppIncomingFileConfirmActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.pbap.BluetoothPbapActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ExternalMediaFormatActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.NetInitiatedActivity: void onCreate(android.os.Bundle)> (2)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (3)
<com.android.internal.app.RestrictionsPinActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity: void access$000(com.android.bluetooth.opp.BluetoothOppLauncherActivity)> (3)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void access$000(com.android.bluetooth.opp.BluetoothOppTransferHistory)> (1)
<com.android.server.power.ShutdownThread$5: void run()> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)> (1)
<com.android.internal.app.ChooserActivity: void onCreate(android.os.Bundle)> (3)
<com.android.internal.app.ResolverActivity: void onCreate(android.os.Bundle)> (2)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity$1: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity$2: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppLauncherActivity$3: void run()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferHistory$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.btservice.AdapterService: int getState()> (4)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()> (2)
<com.android.bluetooth.btservice.AdapterService: void autoConnect()> (1)
<com.android.bluetooth.btservice.AdapterService: void processConnectOtherProfiles(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.btservice.AdapterService: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetooth$Stub: int getState()> (2)
<com.android.bluetooth.btservice.AdapterState$OnState: void enter()> (1)
<com.android.bluetooth.btservice.AdapterService: void access$200(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int)> (2)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<android.bluetooth.IBluetooth: int getState()> (3)
<com.android.internal.util.State: void enter()> (36)
<com.android.bluetooth.btservice.AdapterService: void connectOtherProfile(android.bluetooth.BluetoothDevice,int)> (3)
<android.bluetooth.IBluetooth$Stub$Proxy: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> ()
<android.bluetooth.IBluetooth$Stub: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> (3)
<android.bluetooth.BluetoothAdapter: int getState()> (26)
<com.android.server.BluetoothManagerService: boolean canUnbindBluetoothService()> (1)
<com.android.server.BluetoothManagerService: boolean waitForOnOff(boolean,boolean)> (2)
<android.net.CaptivePortalTracker$ActiveNetworkState: void enter()> (1)
<android.net.CaptivePortalTracker$DefaultState: void enter()> (1)
<android.net.DhcpStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$DefaultState: void enter()> (1)
<android.net.wifi.WifiApConfigStore$InactiveState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DefaultState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()> (1)
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()> (1)
<android.net.wifi.WifiStateMachine$TetheredState: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void enter()> (1)
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcActivatingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectingState: void enter()> (1)
<com.android.internal.telephony.dataconnection.DataConnection$DcDisconnectionErrorCreatingConnection: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$DefaultState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$StartupState: void enter()> (1)
<com.android.internal.telephony.InboundSmsHandler$WaitingState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void enter()> (1)
<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void enter()> (1)
<com.android.internal.util.IState: void enter()> ()
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void enter()> (1)
<com.android.internal.util.StateMachine$SmHandler: void invokeEnterMethods(int)> (2)
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void enter()> (1)
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void enter()> (1)
<com.android.server.NsdService$NsdStateMachine$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$ApEnabledState: void enter()> (1)
<com.android.server.wifi.WifiController$DefaultState: void enter()> (1)
<com.android.server.wifi.WifiController$DeviceInactiveState: void enter()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void processProfileStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetooth: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)> ()
<android.bluetooth.BluetoothA2dp: boolean isEnabled()> (12)
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()> ()
<android.bluetooth.BluetoothAdapter: android.util.Pair readOutOfBandData()> ()
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> ()
<android.bluetooth.BluetoothAdapter: boolean isAdvertising()> (1)
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> ()
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> ()
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> (1)
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> ()
<android.bluetooth.BluetoothAdapter: boolean startAdvertising(android.bluetooth.BluetoothAdapter$AdvertiseCallback)> ()
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> ()
<android.bluetooth.BluetoothAdapter: int getConnectionState()> ()
<android.bluetooth.BluetoothAdapter: int getDiscoverableTimeout()> (1)
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> ()
<android.bluetooth.BluetoothAdapter: int getScanMode()> ()
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> (4)
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> ()
<android.bluetooth.BluetoothHeadset: boolean isDisabled()> (1)
<android.bluetooth.BluetoothHeadset: boolean isEnabled()> (20)
<android.bluetooth.BluetoothHealth: boolean isEnabled()> (10)
<android.bluetooth.BluetoothInputDevice: boolean isEnabled()> (13)
<android.bluetooth.BluetoothMap: boolean isEnabled()> (6)
<android.bluetooth.BluetoothPan: boolean isEnabled()> (5)
<com.android.server.BluetoothManagerService: void bluetoothStateChangeHandler(int,int)> (1)
<com.android.server.BluetoothManagerService: boolean access$1700(com.android.server.BluetoothManagerService,boolean,boolean)> (3)
<com.android.server.BluetoothManagerService: void recoverBluetoothServiceFromError()> (1)
<com.android.internal.util.StateMachine$SmHandler: void performTransitions(com.android.internal.util.State,android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.AdapterService: void access$100(com.android.bluetooth.btservice.AdapterService,android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetStateMachine$Disconnected: boolean processMessage(android.os.Message)> (1)
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothA2dp: boolean isAvrcpAbsoluteVolumeSupported()> ()
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothA2dp: boolean shouldSendVolumeKeys(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()> (2)
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothA2dp: void adjustAvrcpAbsoluteVolume(int)> (1)
<android.bluetooth.BluetoothA2dp: void setAvrcpAbsoluteVolume(int)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.gatt.GattService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.map.BluetoothMapService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothHeadset: int getAudioState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothHeadset: boolean connectAudio()> (2)
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothHeadset: boolean disconnectAudio()> (2)
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothHeadset: boolean isAudioOn()> ()
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> ()
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothHeadset: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothHeadset: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.BluetoothHeadset: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> (3)
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothHeadset: void clccResponse(int,int,int,int,boolean,java.lang.String,int)> ()
<android.bluetooth.BluetoothHeadset: void phoneStateChanged(int,int,int,java.lang.String,int)> ()
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.BluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.BluetoothHealth: boolean registerAppConfiguration(java.lang.String,int,int,int,android.bluetooth.BluetoothHealthCallback)> (1)
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)> ()
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()> (1)
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothInputDevice: boolean getProtocolMode(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothInputDevice: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)> ()
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> ()
<android.bluetooth.BluetoothInputDevice: boolean virtualUnplug(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothInputDevice: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothInputDevice: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothInputDevice: java.util.List getConnectedDevices()> (1)
<android.bluetooth.BluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothMap: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.BluetoothMap: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothMap: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothMap: java.util.List getConnectedDevices()> (1)
<android.bluetooth.BluetoothMap: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.BluetoothPan: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.server.BluetoothManagerService: void access$2800(com.android.server.BluetoothManagerService,int,int)> (3)
<com.android.server.BluetoothManagerService: void sendDisableMsg()> (2)
<com.android.server.BluetoothManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.BluetoothManagerService: void access$2900(com.android.server.BluetoothManagerService)> (2)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.bluetooth.btservice.AdapterService: void onProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (3)
<android.media.AudioService$2: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<android.media.AudioService: void adjustStreamVolume(int,int,int,java.lang.String)> (4)
<android.media.AudioService: void setStreamVolume(int,int,int,java.lang.String)> (2)
<com.android.bluetooth.a2dp.A2dpService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.bluetooth.hfp.HeadsetService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.media.AudioService: void checkScoAudioState()> (2)
<com.android.internal.os.BatteryStatsImpl: int getCurrentBluetoothPingCount()> (3)
<com.android.server.BluetoothManagerService$1: void onBluetoothStateChange(int,int)> (2)
<com.android.server.BluetoothManagerService: boolean disable(boolean)> (2)
<com.android.server.BluetoothManagerService: void access$600(com.android.server.BluetoothManagerService)> (1)
<android.net.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<android.net.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.ProfileService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (7)
<com.android.bluetooth.map.BluetoothMapService: void setState(int,int)> (4)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int,int)> (3)
<android.media.IAudioService$Stub$Proxy: void adjustStreamVolume(int,int,int,java.lang.String)> ()
<android.media.AudioService: void adjustLocalOrRemoteStreamVolume(int,int,java.lang.String)> (2)
<android.media.AudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String)> (3)
<android.media.IAudioService$Stub: void adjustStreamVolume(int,int,int,java.lang.String)> (2)
<android.media.IAudioService$Stub$Proxy: void setStreamVolume(int,int,int,java.lang.String)> ()
<android.media.IAudioService$Stub: void setStreamVolume(int,int,int,java.lang.String)> (2)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothGatt$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.bluetooth.hfp.HeadsetService: java.util.List access$200(com.android.bluetooth.hfp.HeadsetService,int[])> (1)
<android.bluetooth.IBluetoothMap$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothMap$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.media.AudioService: void access$2000(android.media.AudioService)> (2)
<com.android.internal.os.BatteryStatsImpl: int getBluetoothPingCount()> (2)
<com.android.internal.os.BatteryStatsImpl: void doUnplugLocked(long,long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void setBtHeadset(android.bluetooth.BluetoothHeadset)> (2)
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void onBluetoothStateChange(int,int)> ()
<android.bluetooth.IBluetoothManager$Stub$Proxy: boolean disable(boolean)> ()
<android.bluetooth.IBluetoothManager$Stub: boolean disable(boolean)> (2)
<com.android.bluetooth.a2dp.A2dpService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.gatt.GattService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.hid.HidService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (1)
<com.android.bluetooth.pan.PanService: void notifyProfileConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int,int)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean cleanup()> (1)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnectMap(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void setState(int)> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$2000(com.android.bluetooth.pbap.BluetoothPbapService,int,int)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void onDestroy()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService: void setState(int)> (2)
<android.media.IAudioService$Stub$Proxy: void adjustLocalOrRemoteStreamVolume(int,int,java.lang.String)> ()
<android.media.IAudioService$Stub: void adjustLocalOrRemoteStreamVolume(int,int,java.lang.String)> (2)
<android.media.IAudioService$Stub$Proxy: void adjustSuggestedStreamVolume(int,int,int,java.lang.String)> ()
<android.media.AudioService: void adjustVolume(int,int,java.lang.String)> (2)
<android.media.IAudioService$Stub: void adjustSuggestedStreamVolume(int,int,int,java.lang.String)> (2)
<android.media.IAudioService: void adjustStreamVolume(int,int,int,java.lang.String)> (2)
<android.media.IAudioService: void setStreamVolume(int,int,int,java.lang.String)> (3)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothA2dp$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothGatt: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothGatt$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothMap: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothMap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.BatteryStatsImpl: void doPlugLocked(long,long,long)> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcelLocked(android.os.Parcel,boolean,int)> (2)
<com.android.internal.os.BatteryStatsImpl: void setOnBatteryLocked(boolean,int,int)> (2)
<com.android.server.am.BatteryStatsService$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)> (1)
<android.bluetooth.IBluetoothManager: boolean disable(boolean)> (3)
<com.android.bluetooth.a2dp.A2dpStateMachine$IntentBroadcastHandler: void onConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int)> (2)
<com.android.bluetooth.hdp.HealthService: void updateAndSendIntent(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hid.HidService: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.pan.PanService: void handlePanDeviceStateChange(android.bluetooth.BluetoothDevice,java.lang.String,int,int,int)> (5)
<com.android.bluetooth.map.BluetoothMapService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.ProfileService: boolean stop()> (1)
<com.android.bluetooth.map.BluetoothMapService: void startObexServerSession()> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: void disconnect()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void startObexServerSession()> (2)
<android.media.IAudioService: void adjustLocalOrRemoteStreamVolume(int,int,java.lang.String)> (2)
<android.media.IAudioService$Stub$Proxy: void adjustVolume(int,int,java.lang.String)> ()
<android.media.IAudioService$Stub: void adjustVolume(int,int,java.lang.String)> (2)
<android.media.IAudioService: void adjustSuggestedStreamVolume(int,int,int,java.lang.String)> (1)
<android.media.AudioManager: void adjustStreamVolume(int,int,int)> ()
<com.android.internal.policy.impl.PhoneWindowManager: void handleVolumeKey(int,int)> (1)
<android.media.AudioManager: void setStreamVolume(int,int,int)> (5)
<android.media.MediaRouter$RouteInfo: void requestSetVolume(int)> (2)
<android.media.MediaRouter$RouteInfo: void requestUpdateVolume(int)> (2)
<android.bluetooth.IBluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothA2dp$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)> (1)
<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,int[])> ()
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.os.BatteryStatsImpl: void writeToParcel(android.os.Parcel,int)> (1)
<com.android.internal.os.BatteryStatsImpl: void writeToParcelWithoutUids(android.os.Parcel,int)> ()
<com.android.internal.os.BatteryStatsImpl: void setBatteryState(int,int,int,int,int,int)> (1)
<com.android.internal.os.BatteryStatsImpl: void setOnBattery(boolean,int,int)> ()
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)> ()
<android.bluetooth.BluetoothAdapter: boolean disable()> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine: void broadcastConnectionState(android.bluetooth.BluetoothDevice,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: void broadcastHealthDeviceStateChange(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$1000(com.android.bluetooth.hfp.HeadsetStateMachine,android.bluetooth.BluetoothDevice,int,int)> (7)
<com.android.bluetooth.hid.HidService: void access$100(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice,int)> (4)
<com.android.bluetooth.pan.PanService: void onConnectStateChanged(byte[],int,int,int,int)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.ProfileService: void doStop(android.content.Intent)> (8)
<com.android.bluetooth.map.BluetoothMapService: void access$600(com.android.bluetooth.map.BluetoothMapService)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void disconnect()> ()
<android.bluetooth.IBluetoothPbap$Stub: void disconnect()> (2)
<com.android.bluetooth.pbap.BluetoothPbapService: void access$600(com.android.bluetooth.pbap.BluetoothPbapService)> (1)
<android.media.AudioManager: void adjustLocalOrRemoteStreamVolume(int,int)> ()
<android.media.IAudioService: void adjustVolume(int,int,java.lang.String)> (1)
<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)> (3)
<com.android.internal.policy.impl.PhoneWindowManager: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (2)
<android.preference.VolumePreference$SeekBarVolumizer: void revertVolume()> (2)
<android.view.VolumePanel: void setStreamVolume(int,int,int)> (1)
<com.android.bluetooth.a2dp.Avrcp: void notifyVolumeChanged(int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void processVolumeEvent(int,int)> (1)
<android.media.MediaRouter$RouteGroup: void requestSetVolume(int)> (1)
<com.android.internal.app.MediaRouteControllerDialog$1: void onProgressChanged(android.widget.SeekBar,int,boolean)> (1)
<android.media.MediaRouter$RouteGroup: void requestUpdateVolume(int)> (1)
<com.android.internal.app.MediaRouteControllerDialog: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothHeadset$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.BatteryStatsService: byte[] getStatistics()> (2)
<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)> (2)
<com.android.bluetooth.opp.BluetoothOppManager: void disableBluetooth()> ()
<com.android.bluetooth.a2dp.A2dpStateMachine: void access$1100(com.android.bluetooth.a2dp.A2dpStateMachine,android.bluetooth.BluetoothDevice,int,int)> (6)
<com.android.bluetooth.hdp.HealthService: void callHealthChannelCallback(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: void onConnectStateChanged(byte[],int)> ()
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.a2dp.A2dpService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.gatt.GattService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hdp.HealthService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hfp.HeadsetService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.hid.HidService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.map.BluetoothMapService: void doStop(android.content.Intent)> (1)
<com.android.bluetooth.pan.PanService: void doStop(android.content.Intent)> (1)
<android.bluetooth.IBluetoothPbap$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothPbap: void disconnect()> (1)
<android.media.AudioManager: void adjustVolume(int,int)> ()
<android.media.AudioManager: void handleKeyDown(android.view.KeyEvent,int)> (2)
<android.media.AudioManager: void handleKeyUp(android.view.KeyEvent,int)> (2)
<android.media.AudioManager: void preDispatchKeyEvent(android.view.KeyEvent,int)> (1)
<android.view.WindowManagerPolicy: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: boolean interceptFallback(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<android.preference.VolumePreference: void cleanup()> (1)
<android.preference.VolumePreference: void onDialogClosed(boolean)> (1)
<android.view.VolumePanel: void onProgressChanged(android.widget.SeekBar,int,boolean)> (1)
<com.android.bluetooth.a2dp.Avrcp: void access$2000(com.android.bluetooth.a2dp.Avrcp,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$5100(com.android.bluetooth.hfp.HeadsetStateMachine,int,int)> (2)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()> (2)
<com.android.internal.app.IBatteryStats$Stub$Proxy: void setBatteryState(int,int,int,int,int,int)> ()
<com.android.internal.app.IBatteryStats$Stub: void setBatteryState(int,int,int,int,int,int)> (2)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Connected: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.a2dp.A2dpStateMachine$Pending: void processConnectionEvent(int,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: void access$1700(com.android.bluetooth.hdp.HealthService,android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)> (3)
<com.android.bluetooth.hfp.HeadsetStateMachine$AudioOn: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothMap: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.BluetoothPbap: boolean disconnect()> ()
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyDown(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow: boolean onKeyDown(int,int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean onKeyUp(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow: boolean onKeyUp(int,int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: void preDispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.server.wm.InputMonitor: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.internal.app.IBatteryStats: byte[] getStatistics()> ()
<com.android.internal.app.IBatteryStats: void setBatteryState(int,int,int,int,int,int)> (1)
<com.android.bluetooth.hdp.HealthService: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService: boolean connectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: boolean disconnect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothInputDevice$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)> (2)
<com.android.internal.policy.impl.PhoneFallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<android.view.FallbackEventHandler: void preDispatchKeyEvent(android.view.KeyEvent)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> (1)
<android.view.WindowManagerPolicy: android.view.KeyEvent dispatchUnhandledKey(android.view.WindowManagerPolicy$WindowState,android.view.KeyEvent,int)> (1)
<com.android.server.BatteryService: void processValuesLocked()> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<com.android.bluetooth.hdp.HealthService: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<android.bluetooth.IBluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothInputDevice$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> (1)
<android.view.FallbackEventHandler: boolean dispatchKeyEvent(android.view.KeyEvent)> (1)
<android.view.ViewRootImpl$EarlyPostImeInputStage: int processKeyEvent(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.server.input.InputManagerService: int interceptKeyBeforeQueueing(android.view.KeyEvent,int,boolean)> ()
<com.android.server.wm.InputMonitor: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.BatteryService: void update(android.os.BatteryProperties)> (1)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.ViewRootImpl$ViewPostImeInputStage: int processKeyEvent(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<android.view.ViewRootImpl$EarlyPostImeInputStage: int onProcess(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> (1)
<com.android.server.BatteryService: void access$600(com.android.server.BatteryService,android.os.BatteryProperties)> (1)
<android.bluetooth.IBluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.IBluetoothHealth$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.view.ViewRootImpl$ViewPostImeInputStage: int onProcess(android.view.ViewRootImpl$QueuedInputEvent)> (1)
<com.android.server.input.InputManagerService: android.view.KeyEvent dispatchUnhandledKey(com.android.server.input.InputWindowHandle,android.view.KeyEvent,int)> ()
<com.android.server.BatteryService$BatteryListener: void batteryPropertiesChanged(android.os.BatteryProperties)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> (1)
<android.bluetooth.IBluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<android.os.IBatteryPropertiesListener$Stub$Proxy: void batteryPropertiesChanged(android.os.BatteryProperties)> ()
<android.os.IBatteryPropertiesListener$Stub: void batteryPropertiesChanged(android.os.BatteryProperties)> (2)
<android.os.IBatteryPropertiesListener$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.os.IBatteryPropertiesListener: void batteryPropertiesChanged(android.os.BatteryProperties)> ()
<com.android.server.BatteryService$BatteryListener: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getAddress()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getAddress()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getAddress()> (2)
<android.bluetooth.IBluetooth: java.lang.String getAddress()> (2)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getUuids()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getUuids()> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelUuid[] getUuids()> (2)
<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getUuids()> (1)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getName()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getName()> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getName()> (2)
<android.bluetooth.IBluetooth: java.lang.String getName()> (2)
<com.android.bluetooth.btservice.AdapterService: int getScanMode()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getScanMode()> ()
<android.bluetooth.IBluetooth$Stub: int getScanMode()> (2)
<android.bluetooth.IBluetooth: int getScanMode()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setScanMode(int,int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setScanMode(int,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setScanMode(int,int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setScanMode(int,int)> (2)
<android.bluetooth.IBluetooth: boolean setScanMode(int,int)> (1)
<com.android.bluetooth.btservice.AdapterService: int getDiscoverableTimeout()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getDiscoverableTimeout()> ()
<android.bluetooth.IBluetooth$Stub: int getDiscoverableTimeout()> (2)
<android.bluetooth.IBluetooth: int getDiscoverableTimeout()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setDiscoverableTimeout(int)> (2)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setDiscoverableTimeout(int)> ()
<android.bluetooth.IBluetooth$Stub: boolean setDiscoverableTimeout(int)> (2)
<android.bluetooth.IBluetooth: boolean setDiscoverableTimeout(int)> (1)
<com.android.bluetooth.btservice.AdapterService: boolean isDiscovering()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isDiscovering()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean isDiscovering()> ()
<android.bluetooth.IBluetooth$Stub: boolean isDiscovering()> (2)
<android.bluetooth.IBluetooth: boolean isDiscovering()> (1)
<com.android.bluetooth.btservice.AdapterService: android.bluetooth.BluetoothDevice[] getBondedDevices()> (5)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()> (2)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherHeadsetPriorities(com.android.bluetooth.hfp.HeadsetService,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void adjustOtherSinkPriorities(com.android.bluetooth.a2dp.A2dpService,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService: void autoConnectA2dp()> (1)
<com.android.bluetooth.btservice.AdapterService: void autoConnectHeadset()> (1)
<android.bluetooth.IBluetooth$Stub$Proxy: android.bluetooth.BluetoothDevice[] getBondedDevices()> ()
<android.bluetooth.IBluetooth$Stub: android.bluetooth.BluetoothDevice[] getBondedDevices()> (2)
<com.android.bluetooth.btservice.AdapterService: void setProfileAutoConnectionPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetooth: android.bluetooth.BluetoothDevice[] getBondedDevices()> (1)
<com.android.bluetooth.btservice.AdapterService: int getAdapterConnectionState()> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getAdapterConnectionState()> ()
<android.bluetooth.IBluetooth$Stub: int getAdapterConnectionState()> (2)
<android.bluetooth.IBluetooth: int getAdapterConnectionState()> (1)
<com.android.bluetooth.btservice.AdapterService: int getProfileConnectionState(int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getProfileConnectionState(int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getProfileConnectionState(int)> ()
<android.bluetooth.IBluetooth$Stub: int getProfileConnectionState(int)> (2)
<android.bluetooth.IBluetooth: int getProfileConnectionState(int)> (1)
<com.android.bluetooth.btservice.AdapterService: int getBondState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getBondState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getBondState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getBondState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getBondState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: int getBondState()> (7)
<com.android.bluetooth.a2dp.A2dpStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean cancelBond(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean createBond(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean removeBond(android.bluetooth.BluetoothDevice,boolean)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hid.HidService: boolean okToConnect(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean access$1000(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.BondStateMachine: boolean access$300(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice,boolean)> (2)
<com.android.bluetooth.btservice.BondStateMachine: boolean access$400(com.android.bluetooth.btservice.BondStateMachine,android.bluetooth.BluetoothDevice,boolean)> (2)
<com.android.bluetooth.hid.HidService: boolean access$600(com.android.bluetooth.hid.HidService,android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.btservice.BondStateMachine$PendingCommandState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.BondStateMachine$StableState: boolean processMessage(android.os.Message)> (1)
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: java.lang.String getName()> (6)
<android.bluetooth.BluetoothDevice: java.lang.String getAliasName()> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: java.lang.String getCurrentDeviceName()> (1)
<com.android.bluetooth.opp.BluetoothOppManager: java.lang.String getDeviceName(android.bluetooth.BluetoothDevice)> (4)
<android.media.AudioService: void onSetA2dpConnectionState(android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void configAudioParameters()> (1)
<com.android.bluetooth.opp.BluetoothOppReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void onClick(android.content.DialogInterface,int)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferAdapter: void bindView(android.view.View,android.content.Context,android.database.Cursor)> (2)
<com.android.bluetooth.opp.BluetoothOppUtility: com.android.bluetooth.opp.BluetoothOppTransferInfo queryRecord(android.content.Context,android.net.Uri)> (5)
<android.media.AudioService: void access$6900(android.media.AudioService,android.bluetooth.BluetoothDevice,int)> (1)
<com.android.bluetooth.hfp.HeadsetStateMachine: void access$2300(com.android.bluetooth.hfp.HeadsetStateMachine)> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void updateProgressbar()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferHistory: void openCompleteTransfer()> (2)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: android.view.View createView()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void access$100(com.android.bluetooth.opp.BluetoothOppTransferActivity)> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity: void setUpDialog()> (1)
<com.android.bluetooth.opp.BluetoothOppTransferActivity$BluetoothTransferContentObserver: void onChange(boolean)> (1)
<com.android.bluetooth.btservice.AdapterService: int getRemoteType(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteType(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteType(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteType(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getRemoteType(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: int getType()> ()
<com.android.bluetooth.btservice.AdapterService: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: java.lang.String getAlias()> (1)
<com.android.bluetooth.btservice.AdapterService: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> ()
<android.bluetooth.IBluetooth$Stub: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (2)
<android.bluetooth.IBluetooth: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)> (1)
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)> ()
<com.android.bluetooth.btservice.AdapterService: int getRemoteClass(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteClass(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: int getRemoteClass(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: int getRemoteClass(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: int getRemoteClass(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> (2)
<com.android.bluetooth.btservice.RemoteDevices: void pinRequestCallback(byte[],byte[],int)> (1)
<com.android.bluetooth.btservice.JniCallbacks: void pinRequestCallback(byte[],byte[],int)> ()
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> (4)
<com.android.bluetooth.btservice.AdapterService: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetooth$Stub: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetooth: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()> ()
<com.android.bluetooth.btservice.AdapterService: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<android.bluetooth.IBluetooth$Stub: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> (2)
<android.bluetooth.IBluetooth: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[])> ()
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)> (1)
<android.bluetooth.BluetoothSocket: void connect()> (2)
<com.android.bluetooth.btservice.AdapterService: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> ()
<android.bluetooth.IBluetooth$Stub: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetooth: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)> (1)
<android.bluetooth.BluetoothSocket: int bindListen()> (5)
<com.android.bluetooth.btservice.AdapterService: boolean configHciSnoopLog(boolean)> (1)
<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean configHciSnoopLog(boolean)> (2)
<android.bluetooth.IBluetooth$Stub$Proxy: boolean configHciSnoopLog(boolean)> ()
<android.bluetooth.IBluetooth$Stub: boolean configHciSnoopLog(boolean)> (2)
<android.bluetooth.IBluetooth: boolean configHciSnoopLog(boolean)> (2)
<android.bluetooth.BluetoothAdapter: boolean configHciSnoopLog(boolean)> ()
<com.android.bluetooth.a2dp.A2dpService: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothA2dp$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothA2dp: java.util.List getConnectedDevices()> (1)
<com.android.bluetooth.a2dp.A2dpService: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothA2dp$Stub: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (2)
<android.bluetooth.IBluetoothHealth: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)> (1)
<com.android.bluetooth.hdp.HealthService: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthDeathRecipient: void binderDied()> (1)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<com.android.bluetooth.hdp.HealthService: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> ()
<android.bluetooth.IBluetoothHealth$Stub: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (2)
<android.bluetooth.IBluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> (1)
<com.android.bluetooth.hdp.HealthService: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHealth$Stub: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHealth: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hdp.HealthService: java.util.List getConnectedHealthDevices()> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getConnectedHealthDevices()> ()
<android.bluetooth.IBluetoothHealth$Stub: java.util.List getConnectedHealthDevices()> (2)
<android.bluetooth.IBluetoothHealth: java.util.List getConnectedHealthDevices()> (1)
<com.android.bluetooth.hdp.HealthService: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothHealth$Stub$Proxy: java.util.List getHealthDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothHealth$Stub: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (2)
<android.bluetooth.IBluetoothHealth: java.util.List getHealthDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hfp.HeadsetService: java.util.List getConnectedDevices()> (2)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothHeadset: java.util.List getConnectedDevices()> (1)
<com.android.bluetooth.hfp.HeadsetService: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean isAudioOn()> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioOn()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean isAudioOn()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean isAudioOn()> (2)
<android.bluetooth.IBluetoothHeadset: boolean isAudioOn()> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean connectAudio()> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connectAudio()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean connectAudio()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectAudio()> (2)
<android.bluetooth.IBluetoothHeadset: boolean connectAudio()> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean disconnectAudio()> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnectAudio()> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean disconnectAudio()> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectAudio()> (2)
<android.bluetooth.IBluetoothHeadset: boolean disconnectAudio()> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetService: boolean access$500(com.android.bluetooth.hfp.HeadsetService,android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> (2)
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> ()
<android.bluetooth.IBluetoothHeadset$Stub: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> (2)
<android.bluetooth.IBluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> (1)
<com.android.bluetooth.hid.HidService: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates(int[])> (3)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getDevicesMatchingConnectionStates(int[])> ()
<android.bluetooth.IBluetoothInputDevice$Stub: java.util.List getDevicesMatchingConnectionStates(int[])> (2)
<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothInputDevice: java.util.List getDevicesMatchingConnectionStates(int[])> (1)
<android.bluetooth.IBluetoothInputDevice$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothInputDevice$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothInputDevice: java.util.List getConnectedDevices()> (1)
<com.android.bluetooth.gatt.GattService: void stopScan(int,boolean)> (2)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void stopScan(int,boolean)> (2)
<com.android.bluetooth.gatt.GattService$ClientDeathRecipient: void binderDied()> (1)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void stopScan(int,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void stopScan(int,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void stopScan(int,boolean)> (1)
<android.bluetooth.BluetoothAdapter$GattCallbackWrapper: void stopLeScan()> (1)
<android.bluetooth.BluetoothAdapter: void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)> ()
<com.android.bluetooth.gatt.GattService: void registerClient(java.util.UUID,android.bluetooth.IBluetoothGattCallback)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> ()
<android.bluetooth.IBluetoothGatt$Stub: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> (2)
<android.bluetooth.IBluetoothGatt: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)> (3)
<android.bluetooth.BluetoothAdapter: boolean startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)> (1)
<android.bluetooth.BluetoothGatt: boolean registerApp(android.bluetooth.BluetoothGattCallback)> (1)
<android.bluetooth.BluetoothAdapter: boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)> ()
<android.bluetooth.BluetoothGatt: boolean connect(java.lang.Boolean,android.bluetooth.BluetoothGattCallback)> (1)
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)> ()
<com.android.bluetooth.gatt.GattService: void unregisterClient(int)> (2)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterClient(int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void unregisterClient(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void unregisterClient(int)> (2)
<android.bluetooth.IBluetoothGatt: void unregisterClient(int)> (4)
<android.bluetooth.BluetoothAdapter$GattCallbackWrapper: void onAdvertiseStateChange(int,int)> (2)
<android.bluetooth.BluetoothAdapter$GattCallbackWrapper: void onClientRegistered(int,int)> (2)
<android.bluetooth.BluetoothGatt: void unregisterApp()> (1)
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onAdvertiseStateChange(int,int)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onClientRegistered(int,int)> ()
<android.bluetooth.BluetoothGatt: void close()> (1)
<com.android.bluetooth.gatt.GattService: void clientConnect(int,java.lang.String,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void clientConnect(int,java.lang.String,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void clientConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void clientConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.BluetoothGatt$1: void onClientRegistered(int,int)> (2)
<android.bluetooth.BluetoothGatt: boolean connect()> ()
<com.android.bluetooth.gatt.GattService: void clientDisconnect(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void clientDisconnect(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void clientDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void clientDisconnect(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: void disconnect()> ()
<com.android.bluetooth.gatt.GattService: java.util.List getConnectedDevices()> ()
<com.android.bluetooth.gatt.GattService: void refreshDevice(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void refreshDevice(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void refreshDevice(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void refreshDevice(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void refreshDevice(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean refresh()> ()
<com.android.bluetooth.gatt.GattService: void discoverServices(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void discoverServices(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void discoverServices(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void discoverServices(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void discoverServices(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean discoverServices()> ()
<com.android.bluetooth.gatt.GattService: void readCharacteristic(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.BluetoothGatt$1: void onCharacteristicRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,byte[])> (2)
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onCharacteristicRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,byte[])> ()
<com.android.bluetooth.gatt.GattService: void writeCharacteristic(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int,int,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.BluetoothGatt$1: void onCharacteristicWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid)> (2)
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onCharacteristicWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid)> ()
<com.android.bluetooth.gatt.GattService: void readDescriptor(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int,java.util.UUID,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.BluetoothGatt$1: void onDescriptorRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,byte[])> (2)
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onDescriptorRead(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,byte[])> ()
<com.android.bluetooth.gatt.GattService: void writeDescriptor(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int,java.util.UUID,int,int,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,byte[])> (2)
<android.bluetooth.BluetoothGatt$1: void onDescriptorWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid)> (2)
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)> ()
<android.bluetooth.IBluetoothGattCallback$Stub$Proxy: void onDescriptorWrite(java.lang.String,int,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,android.os.ParcelUuid)> ()
<com.android.bluetooth.gatt.GattService: void beginReliableWrite(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginReliableWrite(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void beginReliableWrite(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void beginReliableWrite(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void beginReliableWrite(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean beginReliableWrite()> ()
<com.android.bluetooth.gatt.GattService: void endReliableWrite(int,java.lang.String,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endReliableWrite(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void endReliableWrite(int,java.lang.String,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void endReliableWrite(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void endReliableWrite(int,java.lang.String,boolean)> (2)
<android.bluetooth.BluetoothGatt: boolean executeReliableWrite()> ()
<android.bluetooth.BluetoothGatt: void abortReliableWrite()> (1)
<android.bluetooth.BluetoothGatt: void abortReliableWrite(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.gatt.GattService: void registerForNotification(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)> (1)
<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)> ()
<com.android.bluetooth.gatt.GattService: void readRemoteRssi(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readRemoteRssi(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void readRemoteRssi(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void readRemoteRssi(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void readRemoteRssi(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()> ()
<com.android.bluetooth.gatt.GattService: void registerServer(java.util.UUID,android.bluetooth.IBluetoothGattServerCallback)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> ()
<android.bluetooth.IBluetoothGatt$Stub: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> (2)
<android.bluetooth.IBluetoothGatt: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)> (1)
<android.bluetooth.BluetoothGattServer: boolean registerCallback(android.bluetooth.BluetoothGattServerCallback)> (1)
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)> ()
<com.android.bluetooth.gatt.GattService: void unregisterServer(int)> (2)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterServer(int)> (2)
<com.android.bluetooth.gatt.GattService$ServerDeathRecipient: void binderDied()> (1)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void unregisterServer(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void unregisterServer(int)> (2)
<android.bluetooth.IBluetoothGatt: void unregisterServer(int)> (1)
<android.bluetooth.BluetoothGattServer: void unregisterCallback()> (1)
<android.bluetooth.BluetoothGattServer: void close()> (1)
<com.android.bluetooth.gatt.GattService: void serverConnect(int,java.lang.String,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void serverConnect(int,java.lang.String,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void serverConnect(int,java.lang.String,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void serverConnect(int,java.lang.String,boolean)> (1)
<android.bluetooth.BluetoothGattServer: boolean connect(android.bluetooth.BluetoothDevice,boolean)> ()
<com.android.bluetooth.gatt.GattService: void serverDisconnect(int,java.lang.String)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void serverDisconnect(int,java.lang.String)> ()
<android.bluetooth.IBluetoothGatt$Stub: void serverDisconnect(int,java.lang.String)> (2)
<android.bluetooth.IBluetoothGatt: void serverDisconnect(int,java.lang.String)> (1)
<android.bluetooth.BluetoothGattServer: void cancelConnection(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.gatt.GattService: void beginServiceDeclaration(int,int,int,int,java.util.UUID,boolean)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)> ()
<android.bluetooth.IBluetoothGatt$Stub: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)> (2)
<android.bluetooth.IBluetoothGatt: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)> (1)
<android.bluetooth.BluetoothGattServer: boolean addService(android.bluetooth.BluetoothGattService)> ()
<com.android.bluetooth.gatt.GattService: void addIncludedService(int,int,int,java.util.UUID)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addIncludedService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void addIncludedService(int,int,int,android.os.ParcelUuid)> ()
<android.bluetooth.IBluetoothGatt$Stub: void addIncludedService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt: void addIncludedService(int,int,int,android.os.ParcelUuid)> (1)
<com.android.bluetooth.gatt.GattService: void addCharacteristic(int,java.util.UUID,int,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addCharacteristic(int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void addCharacteristic(int,android.os.ParcelUuid,int,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void addCharacteristic(int,android.os.ParcelUuid,int,int)> (2)
<android.bluetooth.IBluetoothGatt: void addCharacteristic(int,android.os.ParcelUuid,int,int)> (1)
<com.android.bluetooth.gatt.GattService: void addDescriptor(int,java.util.UUID,int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addDescriptor(int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void addDescriptor(int,android.os.ParcelUuid,int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void addDescriptor(int,android.os.ParcelUuid,int)> (2)
<android.bluetooth.IBluetoothGatt: void addDescriptor(int,android.os.ParcelUuid,int)> (1)
<com.android.bluetooth.gatt.GattService: void endServiceDeclaration(int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endServiceDeclaration(int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void endServiceDeclaration(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void endServiceDeclaration(int)> (2)
<android.bluetooth.IBluetoothGatt: void endServiceDeclaration(int)> (1)
<com.android.bluetooth.gatt.GattService: void removeService(int,int,int,java.util.UUID)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void removeService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void removeService(int,int,int,android.os.ParcelUuid)> ()
<android.bluetooth.IBluetoothGatt$Stub: void removeService(int,int,int,android.os.ParcelUuid)> (2)
<android.bluetooth.IBluetoothGatt: void removeService(int,int,int,android.os.ParcelUuid)> (1)
<android.bluetooth.BluetoothGattServer: boolean removeService(android.bluetooth.BluetoothGattService)> ()
<com.android.bluetooth.gatt.GattService: void clearServices(int)> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clearServices(int)> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void clearServices(int)> ()
<android.bluetooth.IBluetoothGatt$Stub: void clearServices(int)> (2)
<android.bluetooth.IBluetoothGatt: void clearServices(int)> (1)
<android.bluetooth.BluetoothGattServer: void clearServices()> ()
<com.android.bluetooth.gatt.GattService: void sendResponse(int,java.lang.String,int,int,int,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendResponse(int,java.lang.String,int,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void sendResponse(int,java.lang.String,int,int,int,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void sendResponse(int,java.lang.String,int,int,int,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void sendResponse(int,java.lang.String,int,int,int,byte[])> (1)
<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,byte[])> ()
<com.android.bluetooth.gatt.GattService: void sendNotification(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,boolean,byte[])> (1)
<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> (2)
<android.bluetooth.IBluetoothGatt$Stub$Proxy: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> ()
<android.bluetooth.IBluetoothGatt$Stub: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> (2)
<android.bluetooth.IBluetoothGatt: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,byte[])> (1)
<android.bluetooth.BluetoothGattServer: boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: int getState()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetoothPbap$Stub: int getState()> (2)
<android.bluetooth.IBluetoothPbap: int getState()> (1)
<android.bluetooth.BluetoothPbap: int getState()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> ()
<android.bluetooth.IBluetoothPbap$Stub: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothPbap: android.bluetooth.BluetoothDevice getClient()> (1)
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothDevice getClient()> ()
<com.android.bluetooth.pbap.BluetoothPbapService$2: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap$Stub$Proxy: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothPbap$Stub: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.BluetoothPbap: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: com.android.bluetooth.map.BluetoothMapService getService()> (10)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: android.bluetooth.BluetoothDevice getClient()> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: int getState()> (2)
<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: android.bluetooth.BluetoothDevice getClient()> ()
<android.bluetooth.IBluetoothMap$Stub: android.bluetooth.BluetoothDevice getClient()> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean connect(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean isConnected(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: boolean setPriority(android.bluetooth.BluetoothDevice,int)> ()
<android.bluetooth.IBluetoothMap$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: int getConnectionState(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: int getPriority(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap$Stub: int getPriority(android.bluetooth.BluetoothDevice)> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: int getState()> ()
<android.bluetooth.IBluetoothMap$Stub: int getState()> (2)
<android.bluetooth.IBluetoothMap$Stub$Proxy: java.util.List getConnectedDevices()> ()
<android.bluetooth.IBluetoothMap$Stub: java.util.List getConnectedDevices()> (2)
<android.bluetooth.IBluetoothMap: android.bluetooth.BluetoothDevice getClient()> (1)
<android.bluetooth.IBluetoothMap: boolean connect(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.IBluetoothMap: boolean isConnected(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap: boolean setPriority(android.bluetooth.BluetoothDevice,int)> (1)
<android.bluetooth.IBluetoothMap: int getConnectionState(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap: int getPriority(android.bluetooth.BluetoothDevice)> (1)
<android.bluetooth.IBluetoothMap: int getState()> (1)
<android.bluetooth.IBluetoothMap: java.util.List getConnectedDevices()> (1)
<android.bluetooth.BluetoothMap: android.bluetooth.BluetoothDevice getClient()> ()
<android.bluetooth.BluetoothMap: boolean isConnected(android.bluetooth.BluetoothDevice)> ()
<android.bluetooth.BluetoothMap: int getState()> ()
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)> ()
<android.bluetooth.BluetoothSocket: void initSocketNative()> ()
Permission:android.permission.AUTHENTICATE_ACCOUNTS
52 Callers:
<com.android.server.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)> (7)
<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<com.android.server.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)> (2)
<com.android.server.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> (2)
<com.android.server.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> ()
<android.accounts.IAccountManager$Stub: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getPassword(android.accounts.Account)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getPassword(android.accounts.Account)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String getUserData(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setPassword(android.accounts.Account,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setPassword(android.accounts.Account,java.lang.String)> (2)
<android.accounts.IAccountManager$Stub$Proxy: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> ()
<android.accounts.IAccountManager$Stub: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (2)
<android.accounts.IAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<android.accounts.IAccountManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.IAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.IAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.IAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.IAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (4)
<com.android.server.accounts.AccountManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> (1)
<com.android.email.provider.DBHelper: void createAccountManagerAccount(android.content.Context,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.email.service.AuthenticatorService$Authenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<com.android.email.service.EasTestAuthenticatorService$EasAuthenticator: android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getPassword(android.accounts.Account)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setPassword(android.accounts.Account,java.lang.String)> (1)
<android.test.IsolatedContext$MockAccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> (1)
<com.android.email.provider.DBHelper: void migrateLegacyAccounts(android.database.sqlite.SQLiteDatabase,android.content.Context)> (2)
<com.android.email.provider.DBHelper: void access$800(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.email.provider.DBHelper: void upgradeFromVersion21ToVersion22(android.database.sqlite.SQLiteDatabase,android.content.Context)> (1)
<com.android.email.provider.DBHelper$DatabaseHelper: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)> (1)
