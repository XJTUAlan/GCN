Permission:android.permission.RECORD_AUDIO
6 Callers:
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.speech.SpeechRecognizer: void stopListening()>
<android.speech.SpeechRecognizer: void cancel()>
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
<android.media.MediaRecorder: void setAudioSource(int)>
Permission:android.permission.CHANGE_NETWORK_STATE
5 Callers:
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
Permission:android.permission.WRITE_EXTERNAL_STORAGE
1 Callers:
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
Permission:android.permission.RECEIVE_BOOT_COMPLETED
1 Callers:
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)>
Permission:android.permission.ACCESS_WIFI_STATE
7 Callers:
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.WifiManager: boolean isWifiEnabled()>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.net.wifi.WifiManager: int getWifiState()>
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
2 Callers:
<android.net.wifi.WifiManager$MulticastLock: void acquire()>
<android.net.wifi.WifiManager$MulticastLock: void release()>
Permission:android.permission.BROADCAST_STICKY
7 Callers:
<android.content.Context: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
Permission:android.permission.RESTART_PACKAGES
2 Callers:
<android.app.ActivityManager: void restartPackage(java.lang.String)>
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
Permission:android.permission.READ_CONTACTS
20 Callers:
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
Permission:android.permission.INTERNET
18 Callers:
<java.net.URL: java.lang.Object getContent()>
<java.net.URL: java.net.URLConnection openConnection()>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map)>
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.HttpURLConnection: void <init>(int)>
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>
<java.net.DatagramSocket: void <init>(int)>
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
<java.net.ServerSocket: void <init>(int)>
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<java.net.URL: java.io.InputStream openStream()>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<java.net.Socket: void <init>(int)>
<java.net.URLConnection: void connect()>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<java.net.MulticastSocket: void <init>(int)>
Permission:android.permission.DISABLE_KEYGUARD
3 Callers:
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>
Permission:android.permission.CHANGE_WIFI_STATE
12 Callers:
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<android.net.wifi.WifiManager: boolean startScan()>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
Permission:android.permission.SET_TIME_ZONE
1 Callers:
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
Permission:android.permission.ACCESS_FINE_LOCATION
21 Callers:
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
17 Callers:
<android.webkit.WebIconDatabase: void removeAllIcons()>
<android.webkit.WebIconDatabase: void close()>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)>
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.webkit.WebIconDatabase: void open(java.lang.String)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)>
Permission:android.permission.BLUETOOTH_ADMIN
9 Callers:
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.media.AudioManager: void setMode(int)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: void stopBluetoothSco()>
Permission:android.permission.USE_CREDENTIALS
10 Callers:
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
Permission:android.permission.CAMERA
2 Callers:
<android.media.MediaRecorder: void setVideoSource(int)>
<android.hardware.Camera: android.hardware.Camera open()>
Permission:android.permission.BLUETOOTH
23 Callers:
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothAdapter: int getState()>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.bluetooth.BluetoothSocket: void connect()>
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>
<android.bluetooth.BluetoothDevice: int getBondState()>
<android.media.AudioManager: void stopBluetoothSco()>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.media.AudioManager: void setMode(int)>
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>
<android.bluetooth.BluetoothDevice: java.lang.String getName()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>
<android.bluetooth.BluetoothAdapter: int getScanMode()>
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>
<android.media.AudioManager: void startBluetoothSco()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>
Permission:android.permission.READ_SYNC_SETTINGS
4 Callers:
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
Permission:android.permission.GET_ACCOUNTS
15 Callers:
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
1 Callers:
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
Permission:android.permission.MODIFY_AUDIO_SETTINGS
12 Callers:
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: void startBluetoothSco()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void setMode(int)>
Permission:android.permission.ACCESS_COARSE_LOCATION
20 Callers:
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
Permission:android.permission.SEND_SMS
6 Callers:
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
Permission:android.permission.GET_TASKS
3 Callers:
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)>
Permission:android.permission.MANAGE_ACCOUNTS
14 Callers:
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
Permission:android.permission.ACCESS_MOCK_LOCATION
8 Callers:
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
Permission:android.permission.READ_PHONE_STATE
8 Callers:
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
Permission:android.permission.VIBRATE
6 Callers:
<android.os.Vibrator: void vibrate(long)>
<android.os.Vibrator: void vibrate(long[],int)>
<android.app.NotificationManager: void notify(int,android.app.Notification)>
<android.os.Vibrator: void cancel()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>
Permission:android.permission.SET_WALLPAPER
10 Callers:
<android.app.WallpaperManager: void clear()>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.Context: void clearWallpaper()>
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: void setWallpaper(java.io.InputStream)>
<android.app.WallpaperManager: void setResource(int)>
<android.app.WallpaperManager: void setStream(java.io.InputStream)>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>
Permission:android.permission.WRITE_SETTINGS
16 Callers:
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
Permission:android.permission.USE_SIP
13 Callers:
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>
<android.net.sip.SipManager: void close(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>
Permission:android.permission.KILL_BACKGROUND_PROCESSES
2 Callers:
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<android.app.ActivityManager: void restartPackage(java.lang.String)>
Permission:android.permission.AUTHENTICATE_ACCOUNTS
7 Callers:
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
Permission:android.permission.NFC
39 Callers:
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>
<android.nfc.tech.NfcV: byte[] transceive(byte[])>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter()>
<android.nfc.tech.IsoDep: void setTimeout(int)>
<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[],boolean)>
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>
<android.nfc.tech.Ndef: boolean makeReadOnly()>
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>
<android.nfc.tech.MifareUltralight: void writePage(int,byte[])>
<android.nfc.tech.MifareClassic: void writeBlock(int,byte[])>
<android.nfc.tech.NfcA: byte[] transceive(byte[],boolean)>
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>
<android.nfc.tech.BasicTagTechnology: void close()>
<android.nfc.tech.MifareClassic: void transfer(int)>
<android.nfc.tech.MifareClassic: void restore(int)>
<android.nfc.NfcAdapter: boolean isEnabled()>
<android.nfc.tech.NfcF: byte[] transceive(byte[])>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[])>
<android.nfc.tech.IsoDep: byte[] transceive(byte[],boolean)>
<android.nfc.tech.NfcB: byte[] transceive(byte[],boolean)>
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,byte[])>
<android.nfc.tech.NfcV: byte[] transceive(byte[],boolean)>
<android.nfc.tech.MifareUltralight: byte[] readPages(int)>
<android.nfc.tech.NfcF: byte[] transceive(byte[],boolean)>
<android.nfc.tech.MifareClassic: byte[] readBlock(int)>
<android.nfc.tech.BasicTagTechnology: void connect()>
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)>
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])>
<android.nfc.tech.MifareClassic: void decrement(int,int)>
<android.nfc.tech.MifareClassic: byte[] transceive(byte[])>
<android.nfc.tech.NfcA: byte[] transceive(byte[])>
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage,boolean)>
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>
<android.nfc.tech.NfcB: byte[] transceive(byte[])>
<android.nfc.tech.MifareUltralight: byte[] transceive(byte[],boolean)>
<android.nfc.tech.MifareClassic: void increment(int,int)>
Permission:android.permission.ACCESS_NETWORK_STATE
55 Callers:
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebIconDatabase: void open(java.lang.String)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.webkit.WebView: void resumeTimers()>
<android.webkit.WebView: boolean zoomIn()>
<android.webkit.WebView: void goBack()>
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>
<android.webkit.WebView: void debugDump()>
<android.webkit.WebView: void goBackOrForward(int)>
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.webkit.WebView: void postUrl(java.lang.String,byte[])>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<android.webkit.WebView: void stopLoading()>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<android.webkit.WebView: void setNetworkAvailable(boolean)>
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.webkit.WebView: void freeMemory()>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.webkit.WebView: boolean zoomOut()>
<android.webkit.WebView: void clearCache(boolean)>
<android.webkit.WebIconDatabase: void removeAllIcons()>
<android.webkit.WebIconDatabase: void close()>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.webkit.WebView: void clearView()>
<android.webkit.WebView: void enablePlatformNotifications()>
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>
<android.webkit.WebView: void destroy()>
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.webkit.WebView: void reload()>
<android.webkit.WebView: void pauseTimers()>
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.webkit.HttpAuthHandler: void cancel()>
<android.webkit.WebView: void clearSslPreferences()>
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)>
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>
<android.net.ConnectivityManager: int getNetworkPreference()>
<android.webkit.WebView: void goForward()>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.webkit.WebView: void loadUrl(java.lang.String)>
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<android.webkit.WebView: void documentHasImages(android.os.Message)>
<android.webkit.WebView: void invokeZoomPicker()>
<android.webkit.WebView: void clearHistory()>
<android.webkit.WebView: void goBackOrForward(int,boolean)>
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
7 Callers:
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
Permission:android.permission.WRITE_SYNC_SETTINGS
6 Callers:
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
Permission:android.permission.READ_LOGS
1 Callers:
<android.os.DropBoxManager: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>
Permission:android.permission.READ_SYNC_STATS
4 Callers:
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
Permission:android.permission.WRITE_CONTACTS
13 Callers:
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
Permission:android.permission.WAKE_LOCK
50 Callers:
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.speech.tts.TextToSpeech: int stop()>
<android.media.MediaPlayer: void start()>
<android.net.sip.SipAudioCall: void endCall()>
<android.net.sip.SipManager: void close(java.lang.String)>
<android.widget.VideoView: void suspend()>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<android.media.Ringtone: void play()>
<android.os.PowerManager$WakeLock: void acquire(long)>
<android.net.wifi.WifiManager$WifiLock: void release()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.widget.VideoView: void setVideoPath(java.lang.String)>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.MediaPlayer: void stop()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)>
<android.app.backup.BackupManager: int requestRestore(android.app.backup.RestoreObserver)>
<android.widget.VideoView: void stopPlayback()>
<android.os.Vibrator: void vibrate(long)>
<android.widget.VideoView: void start()>
<android.os.PowerManager$WakeLock: void acquire()>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.widget.VideoView: void resume()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
<android.media.MediaPlayer: void release()>
<android.net.wifi.WifiManager$WifiLock: void acquire()>
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<android.net.sip.SipAudioCall: void close(boolean)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.media.Ringtone: void stop()>
<android.widget.VideoView: void pause()>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)>
<android.media.AsyncPlayer: void stop()>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.media.MediaPlayer: void reset()>
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.media.MediaPlayer: void pause()>
<android.media.AudioManager: void setMode(int)>
<android.os.PowerManager$WakeLock: void release(int)>
<android.net.sip.SipAudioCall: void close()>
<android.os.PowerManager$WakeLock: void release()>
<android.media.AudioManager: void stopBluetoothSco()>
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)>
Permission:android.permission.SET_WALLPAPER_HINTS
1 Callers:
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>
