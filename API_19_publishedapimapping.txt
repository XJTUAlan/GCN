Permission:android.permission.CHANGE_NETWORK_STATE
4 Callers:
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
Permission:android.permission.ACCESS_LOCATION_EXTRA_COMMANDS
1 Callers:
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
Permission:android.permission.WAKE_LOCK
123 Callers:
<android.widget.ZoomButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.widget.Space: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>
<android.widget.AdapterViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.app.MediaRouteButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AbsListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.ViewStub: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void stop()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.net.sip.SipAudioCall: void close(boolean)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)>
<android.os.PowerManager$WakeLock: void release()>
<android.appwidget.AppWidgetHostView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Chronometer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.Ringtone: void stop()>
<android.widget.CompoundButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void setVideoPath(java.lang.String)>
<android.widget.AdapterViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.CheckedTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.AsyncPlayer: void stop()>
<android.widget.SearchView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void suspend()>
<android.widget.ExpandableListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.net.sip.SipManager: void close(java.lang.String)>
<android.widget.TextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AdapterView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: int getAudioSessionId()>
<android.app.FragmentBreadCrumbs: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void pause()>
<android.widget.VideoView: void release(boolean)>
<android.net.wifi.WifiManager$WifiLock: void release()>
<android.widget.CalendarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.net.wifi.WifiManager$WifiLock: void acquire()>
<android.media.Ringtone: void setStreamType(int)>
<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)>
<android.widget.ListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TableLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Gallery: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.RadioGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ImageSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.inputmethodservice.ExtractEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.TextureView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.opengl.GLSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.widget.AbsSeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.Ringtone: void play()>
<android.widget.GridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>
<android.widget.Switch: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.DigitalClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ZoomControls: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.NumberPicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.Ringtone: void setUri(android.net.Uri)>
<android.net.sip.SipAudioCall: void endCall()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.view.ViewGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void pause()>
<android.os.PowerManager$WakeLock: void finalize()>
<android.net.wifi.WifiManager$WifiLock: void finalize()>
<android.widget.Button: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.webkit.WebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.net.sip.SipAudioCall: void startAudio()>
<android.widget.GridLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.RatingBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.widget.VideoView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.QuickContactBadge: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TimePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.RelativeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.gesture.GestureOverlayView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AbsSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.effect.EffectContext: void release()>
<android.widget.StackView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.FrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TextClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.SlidingDrawer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.net.sip.SipAudioCall: void close()>
<android.view.SurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.LinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void start()>
<android.inputmethodservice.KeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Spinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TabHost: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void reset()>
<android.widget.VideoView: void stopPlayback()>
<android.widget.TableRow: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>
<android.widget.ScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ToggleButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TabWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.HorizontalScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TwoLineListItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AbsoluteLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<android.widget.ViewSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void resume()>
<android.widget.EditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.os.PowerManager$WakeLock: void acquire()>
<android.widget.RadioButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.SeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.VideoView: void start()>
<android.widget.AnalogClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.os.PowerManager$WakeLock: void release(int)>
<android.widget.ImageButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TextSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<android.widget.ImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.MediaController: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.DatePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void release()>
<android.widget.CheckBox: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.DialerFilter: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.MultiAutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.os.PowerManager$WakeLock: void acquire(long)>
Permission:android.permission.BLUETOOTH_ADMIN
19 Callers:
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])>
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)>
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothDevice: boolean createBond()>
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)>
Permission:android.permission.ACCESS_COARSE_LOCATION
34 Callers:
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
Permission:android.permission.READ_SYNC_SETTINGS
8 Callers:
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: boolean getMasterSyncAutomatically()>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
Permission:android.permission.READ_PROFILE
423 Callers:
<android.widget.ExpandableListView: void playSoundEffect(int)>
<android.widget.ImageView: void playSoundEffect(int)>
<android.widget.AbsoluteLayout: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.DatePicker: void setMinDate(long)>
<android.widget.GridView: void playSoundEffect(int)>
<android.widget.TableLayout: void playSoundEffect(int)>
<android.widget.MultiAutoCompleteTextView: boolean performClick()>
<android.widget.FrameLayout: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TextView: void playSoundEffect(int)>
<android.widget.TableRow: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ImageSwitcher: void playSoundEffect(int)>
<android.widget.MediaController: void playSoundEffect(int)>
<android.widget.AnalogClock: boolean onKeyUp(int,android.view.KeyEvent)>
<android.print.PrintJob: boolean isStarted()>
<android.speech.tts.TextToSpeech: java.util.Locale getDefaultLanguage()>
<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>
<android.widget.ViewAnimator: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.ViewGroup: boolean performClick()>
<android.widget.ImageView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.AbsSpinner: void playSoundEffect(int)>
<android.widget.GridLayout: boolean onTouchEvent(android.view.MotionEvent)>
<android.print.PrinterDiscoverySession: void <init>(android.print.IPrintManager,android.content.Context,int)>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context)>
<android.app.FragmentBreadCrumbs: void playSoundEffect(int)>
<android.widget.RelativeLayout: boolean performClick()>
<android.widget.AdapterViewFlipper: boolean performItemClick(android.view.View,int,long)>
<android.widget.AdapterView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.gesture.GestureOverlayView: boolean performClick()>
<android.widget.TabWidget: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>
<android.widget.CheckedTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.widget.Space: void playSoundEffect(int)>
<android.widget.Switch: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.TableRow: boolean performClick()>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>
<android.inputmethodservice.ExtractEditText: void onAttachedToWindow()>
<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>
<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)>
<android.widget.AnalogClock: boolean performClick()>
<android.widget.DigitalClock: void setFormat()>
<android.widget.ImageSwitcher: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.StackView: void playSoundEffect(int)>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.widget.TwoLineListItem: boolean performClick()>
<android.widget.Spinner: boolean performClick()>
<android.widget.ProgressBar: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.AbsSpinner: boolean performClick()>
<android.widget.SearchView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TextSwitcher: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.RadioButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>
<android.widget.LinearLayout: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>
<android.widget.TextClock: void setFormat12Hour(java.lang.CharSequence)>
<android.widget.VideoView: boolean performClick()>
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TwoLineListItem: void playSoundEffect(int)>
<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()>
<android.widget.TwoLineListItem: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.ViewFlipper: void playSoundEffect(int)>
<android.widget.TabHost: boolean onTouchEvent(android.view.MotionEvent)>
<android.appwidget.AppWidgetHostView: void playSoundEffect(int)>
<android.webkit.WebView: boolean performClick()>
<android.speech.tts.TextToSpeech: int stop()>
<android.app.MediaRouteButton: void playSoundEffect(int)>
<android.widget.AutoCompleteTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.MultiAutoCompleteTextView: void playSoundEffect(int)>
<android.widget.QuickContactBadge: boolean performClick()>
<android.widget.ViewAnimator: boolean performClick()>
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.CalendarView: boolean performClick()>
<android.widget.AdapterViewAnimator: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.MultiAutoCompleteTextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.accessibility.CaptioningManager: float getFontScale()>
<android.widget.CheckedTextView: void playSoundEffect(int)>
<android.appwidget.AppWidgetHostView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.widget.DatePicker: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.CheckedTextView: boolean performClick()>
<android.widget.TimePicker: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.SearchView: boolean performClick()>
<android.appwidget.AppWidgetHostView: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.Ringtone: void play()>
<android.widget.FrameLayout: boolean performClick()>
<android.print.PrintJob: boolean isQueued()>
<android.widget.Button: void onAttachedToWindow()>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long)>
<android.widget.Button: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.ViewStub: void playSoundEffect(int)>
<android.widget.AbsSeekBar: void playSoundEffect(int)>
<android.widget.ExpandableListView: boolean arrowScroll(int)>
<android.widget.Gallery: boolean performItemClick(android.view.View,int,long)>
<android.widget.NumberPicker: void playSoundEffect(int)>
<android.widget.QuickContactBadge: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.AudioManager: void playSoundEffect(int)>
<android.view.ViewGroup: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.Space: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.ZoomControls: boolean performClick()>
<android.widget.ToggleButton: void playSoundEffect(int)>
<android.speech.tts.TextToSpeech: void shutdown()>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)>
<android.widget.RatingBar: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.CompoundButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.AbsListView: boolean performClick()>
<android.print.PrintJob: boolean isCompleted()>
<android.widget.ToggleButton: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.CalendarView: void playSoundEffect(int)>
<android.widget.TextClock: boolean is24HourModeEnabled()>
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)>
<android.widget.CalendarView: void <init>(android.content.Context)>
<android.view.View: void playSoundEffect(int)>
<android.widget.AnalogClock: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.ScrollView: void playSoundEffect(int)>
<android.widget.AbsListView: void playSoundEffect(int)>
<android.widget.NumberPicker: boolean dispatchHoverEvent(android.view.MotionEvent)>
<android.widget.TextView: boolean performClick()>
<android.view.SurfaceView: boolean performClick()>
<android.widget.Gallery: boolean onKeyDown(int,android.view.KeyEvent)>
<android.widget.ImageSwitcher: boolean performClick()>
<android.widget.ToggleButton: void onAttachedToWindow()>
<android.widget.CompoundButton: boolean performClick()>
<android.widget.ListView: void playSoundEffect(int)>
<android.widget.LinearLayout: boolean performClick()>
<android.view.ViewGroup: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.Button: void playSoundEffect(int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)>
<android.widget.CheckedTextView: void onAttachedToWindow()>
<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>
<android.widget.SeekBar: boolean performClick()>
<android.widget.TabHost: void playSoundEffect(int)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<android.widget.AdapterViewAnimator: void playSoundEffect(int)>
<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)>
<android.widget.RelativeLayout: void playSoundEffect(int)>
<android.widget.TimePicker: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.print.PrinterDiscoverySession: void destroy()>
<android.widget.ImageButton: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.AdapterViewAnimator: boolean performItemClick(android.view.View,int,long)>
<android.widget.AutoCompleteTextView: boolean performClick()>
<android.view.accessibility.CaptioningManager: boolean isEnabled()>
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<android.widget.RadioGroup: boolean performClick()>
<android.widget.TextClock: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.TextSwitcher: boolean onKeyUp(int,android.view.KeyEvent)>
<android.gesture.GestureOverlayView: void playSoundEffect(int)>
<android.view.TextureView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.TextSwitcher: boolean performClick()>
<android.widget.CalendarView: void setDate(long,boolean,boolean)>
<android.print.PrintJob: boolean isBlocked()>
<android.widget.GridView: boolean performClick()>
<android.app.MediaRouteButton: boolean onTouchEvent(android.view.MotionEvent)>
<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)>
<android.widget.TimePicker: boolean performClick()>
<android.widget.TableRow: boolean onTouchEvent(android.view.MotionEvent)>
<android.inputmethodservice.ExtractEditText: boolean performClick()>
<android.widget.TableLayout: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.Chronometer: void onAttachedToWindow()>
<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>
<android.opengl.GLSurfaceView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.widget.ListView: boolean arrowScroll(int)>
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>
<android.widget.ExpandableListView: boolean performClick()>
<android.widget.TableLayout: boolean performClick()>
<android.widget.ZoomControls: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.NumberPicker: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ProgressBar: boolean onKeyUp(int,android.view.KeyEvent)>
<android.appwidget.AppWidgetHostView: boolean performClick()>
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>
<android.widget.DigitalClock: void <init>(android.content.Context,android.util.AttributeSet)>
<android.text.method.PasswordTransformationMethod: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.Chronometer: void playSoundEffect(int)>
<android.widget.RatingBar: void playSoundEffect(int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)>
<android.app.MediaRouteButton: boolean performClick()>
<android.widget.DatePicker: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>
<android.view.TextureView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.RadioButton: void onAttachedToWindow()>
<android.widget.AbsSeekBar: boolean performClick()>
<android.widget.Switch: void onAttachedToWindow()>
<android.widget.ViewSwitcher: void playSoundEffect(int)>
<android.widget.TextClock: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.widget.ZoomButton: boolean performClick()>
<android.widget.TimePicker: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.CheckBox: void playSoundEffect(int)>
<android.widget.Gallery: void playSoundEffect(int)>
<android.widget.AdapterView: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>
<android.widget.RadioGroup: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.FragmentBreadCrumbs: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.DigitalClock: void onAttachedToWindow()>
<android.widget.GridLayout: void playSoundEffect(int)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.widget.AbsoluteLayout: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TabHost: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ProgressBar: boolean performClick()>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.widget.StackView: boolean performClick()>
<android.widget.TwoLineListItem: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.AbsSpinner: boolean performItemClick(android.view.View,int,long)>
<android.widget.TextSwitcher: void playSoundEffect(int)>
<android.app.DatePickerDialog: void onDateChanged(android.widget.DatePicker,int,int,int)>
<android.widget.FrameLayout: void playSoundEffect(int)>
<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>
<android.widget.StackView: boolean performItemClick(android.view.View,int,long)>
<android.widget.DatePicker: void updateDate(int,int,int)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String,java.lang.String,boolean)>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.widget.EditText: void playSoundEffect(int)>
<android.widget.AutoCompleteTextView: void playSoundEffect(int)>
<android.widget.CalendarView: void onScroll(android.widget.AbsListView,int,int,int)>
<android.widget.DatePicker: boolean performClick()>
<android.print.PrintJob: boolean isCancelled()>
<android.speech.tts.TextToSpeech: boolean isSpeaking()>
<android.text.format.DateUtils: java.lang.String formatDateRange(android.content.Context,long,long,int)>
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
<android.widget.TextClock: void onAttachedToWindow()>
<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)>
<android.widget.AdapterView: boolean performClick()>
<android.widget.RadioButton: void playSoundEffect(int)>
<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)>
<android.widget.VideoView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TextClock: void init()>
<android.widget.Spinner: boolean performItemClick(android.view.View,int,long)>
<android.view.ViewStub: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.GridLayout: boolean performClick()>
<android.widget.AdapterView: void playSoundEffect(int)>
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.widget.CalendarView: void setDate(long)>
<android.widget.DatePicker: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>
<android.print.PrintJob: android.print.PrintJobInfo getInfo()>
<android.widget.AbsoluteLayout: boolean performClick()>
<android.widget.Gallery: boolean performClick()>
<android.widget.DigitalClock: boolean performClick()>
<android.view.ViewStub: boolean onKeyUp(int,android.view.KeyEvent)>
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>
<android.widget.TextClock: void <init>(android.content.Context)>
<android.widget.Space: boolean performClick()>
<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ZoomButton: void playSoundEffect(int)>
<android.widget.ImageView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.accessibility.CaptioningManager: java.util.Locale getLocale()>
<android.widget.DatePicker: void setMaxDate(long)>
<android.print.PrintManager: android.print.PrintJob print(java.lang.String,android.print.PrintDocumentAdapter,android.print.PrintAttributes)>
<android.widget.ViewSwitcher: boolean onTouchEvent(android.view.MotionEvent)>
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>
<android.gesture.GestureOverlayView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ViewFlipper: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>
<android.widget.TabWidget: void playSoundEffect(int)>
<android.widget.Spinner: void playSoundEffect(int)>
<android.widget.CheckBox: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.speech.tts.TextToSpeechService: void onCreate()>
<android.widget.CalendarView: void setMinDate(long)>
<android.widget.ImageSwitcher: boolean onTouchEvent(android.view.MotionEvent)>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)>
<android.print.PrintJob: void restart()>
<android.widget.Space: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.GridView: boolean arrowScroll(int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)>
<android.widget.LinearLayout: void playSoundEffect(int)>
<android.inputmethodservice.KeyboardView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.print.PrintJob: void cancel()>
<android.speech.tts.TextToSpeech: void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener,java.lang.String)>
<android.widget.EditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.view.SurfaceView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.RelativeLayout: boolean onTouchEvent(android.view.MotionEvent)>
<android.view.ViewStub: boolean performClick()>
<android.app.DatePickerDialog: void <init>(android.content.Context,int,android.app.DatePickerDialog$OnDateSetListener,int,int,int)>
<android.widget.EditText: boolean performClick()>
<android.widget.TabHost: boolean performClick()>
<android.widget.SlidingDrawer: boolean performClick()>
<android.widget.DatePicker: boolean onKeyUp(int,android.view.KeyEvent)>
<android.inputmethodservice.KeyboardView: void playSoundEffect(int)>
<android.nfc.cardemulation.CardEmulation: int getSelectionModeForCategory(java.lang.String)>
<android.widget.ViewSwitcher: boolean onKeyUp(int,android.view.KeyEvent)>
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.DatePickerDialog: void <init>(android.content.Context,android.app.DatePickerDialog$OnDateSetListener,int,int,int)>
<android.widget.AnalogClock: void playSoundEffect(int)>
<android.widget.TextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.LinearLayout: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.View: boolean performClick()>
<android.inputmethodservice.KeyboardView: boolean performClick()>
<android.widget.CalendarView: void setMaxDate(long)>
<android.widget.Spinner: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ImageView: boolean performClick()>
<android.widget.ImageButton: void playSoundEffect(int)>
<android.widget.AbsSpinner: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.DatePicker: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.AbsSpinner: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.DialerFilter: boolean performClick()>
<android.inputmethodservice.ExtractEditText: void playSoundEffect(int)>
<android.opengl.GLSurfaceView: boolean performClick()>
<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>
<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.widget.TextClock: boolean performClick()>
<android.webkit.WebView: void playSoundEffect(int)>
<android.widget.SeekBar: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.DatePicker: void init(int,int,int,android.widget.DatePicker$OnDateChangedListener)>
<android.widget.DigitalClock: void <init>(android.content.Context)>
<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>
<android.text.method.MultiTapKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.widget.ProgressBar: void playSoundEffect(int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)>
<android.view.SurfaceView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.AdapterViewFlipper: boolean performClick()>
<android.widget.RadioGroup: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.HorizontalScrollView: boolean performClick()>
<android.widget.RatingBar: boolean performClick()>
<android.widget.TimePicker: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.GridLayout: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.FragmentBreadCrumbs: boolean performClick()>
<android.widget.ViewAnimator: void playSoundEffect(int)>
<android.widget.AbsoluteLayout: void playSoundEffect(int)>
<android.widget.HorizontalScrollView: void playSoundEffect(int)>
<android.widget.StackView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.widget.CalendarView: boolean onTouchEvent(android.view.MotionEvent)>
<android.print.PrinterDiscoverySession: void finalize()>
<android.widget.SeekBar: void playSoundEffect(int)>
<android.widget.RelativeLayout: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>
<android.widget.Switch: void playSoundEffect(int)>
<android.widget.CompoundButton: void onAttachedToWindow()>
<android.widget.AnalogClock: void onTimeChanged()>
<android.widget.ViewFlipper: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.ExpandableListView: boolean performItemClick(android.view.View,int,long)>
<android.widget.QuickContactBadge: void playSoundEffect(int)>
<android.widget.HorizontalScrollView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>
<android.widget.ScrollView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.AdapterViewAnimator: boolean performClick()>
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
<android.widget.TableRow: void playSoundEffect(int)>
<android.widget.DatePicker: void onRestoreInstanceState(android.os.Parcelable)>
<android.widget.CompoundButton: void playSoundEffect(int)>
<android.widget.DialerFilter: void playSoundEffect(int)>
<android.widget.ViewSwitcher: boolean performClick()>
<android.provider.Telephony$Sms: java.lang.String getDefaultSmsPackage(android.content.Context)>
<android.widget.TimePicker: void playSoundEffect(int)>
<android.view.ViewGroup: void playSoundEffect(int)>
<android.print.PrintJob: boolean isFailed()>
<android.view.SurfaceView: void playSoundEffect(int)>
<android.inputmethodservice.ExtractEditText: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.CheckBox: void onAttachedToWindow()>
<android.widget.TabHost: boolean dispatchKeyEvent(android.view.KeyEvent)>
<android.view.TextureView: void playSoundEffect(int)>
<android.text.method.QwertyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.widget.AnalogClock: void onAttachedToWindow()>
<android.widget.TableLayout: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.ImageButton: boolean performClick()>
<android.widget.NumberPicker: boolean performClick()>
<android.widget.SearchView: void playSoundEffect(int)>
<android.text.format.DateUtils: java.lang.CharSequence getRelativeTimeSpanString(long)>
<android.widget.FrameLayout: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.MediaRouteButton: boolean onKeyUp(int,android.view.KeyEvent)>
<android.app.FragmentBreadCrumbs: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.CalendarView: boolean onKeyUp(int,android.view.KeyEvent)>
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)>
<android.widget.SlidingDrawer: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.CalendarView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>
<android.widget.TextView: void onAttachedToWindow()>
<android.widget.DialerFilter: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.Ringtone: java.lang.String getTitle(android.content.Context,android.net.Uri,boolean)>
<android.widget.Button: boolean performClick()>
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)>
<android.widget.SlidingDrawer: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.ViewFlipper: boolean performClick()>
<android.speech.tts.TextToSpeech: java.lang.String getDefaultEngine()>
<android.widget.TextClock: void playSoundEffect(int)>
<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>
<android.print.PrintManager: java.util.List getPrintJobs()>
<android.widget.TabWidget: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.Chronometer: boolean performClick()>
<android.widget.RadioGroup: void playSoundEffect(int)>
<android.widget.VideoView: void playSoundEffect(int)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<android.widget.DigitalClock: void playSoundEffect(int)>
<android.widget.AbsSeekBar: boolean onKeyUp(int,android.view.KeyEvent)>
<android.opengl.GLSurfaceView: void playSoundEffect(int)>
<android.widget.ListView: boolean performClick()>
<android.widget.ImageButton: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.ScrollView: boolean performClick()>
<android.widget.SearchView: boolean onTouchEvent(android.view.MotionEvent)>
<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.widget.TabWidget: boolean performClick()>
<android.opengl.GLSurfaceView: boolean onTouchEvent(android.view.MotionEvent)>
<android.widget.ViewAnimator: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.SlidingDrawer: void playSoundEffect(int)>
<android.widget.TextClock: void setFormat24Hour(java.lang.CharSequence)>
<android.widget.ZoomControls: void playSoundEffect(int)>
<android.widget.AdapterViewFlipper: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.QuickContactBadge: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType,boolean,int)>
<android.view.TextureView: boolean performClick()>
<android.widget.MediaController: boolean onKeyUp(int,android.view.KeyEvent)>
<android.widget.Chronometer: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.gesture.GestureOverlayView: boolean onTouchEvent(android.view.MotionEvent)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.widget.MediaController: boolean performClick()>
<android.widget.EditText: void onAttachedToWindow()>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<android.widget.AdapterViewFlipper: void playSoundEffect(int)>
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.widget.DatePicker: void playSoundEffect(int)>
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>
<android.view.accessibility.CaptioningManager: android.view.accessibility.CaptioningManager$CaptionStyle getUserStyle()>
<android.widget.DigitalClock: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.text.format.DateUtils: java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int)>
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
11 Callers:
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
Permission:android.permission.BROADCAST_STICKY
222 Callers:
<android.speech.tts.TextToSpeechService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.inputmethodservice.InputMethodService: void sendStickyBroadcast(android.content.Intent)>
<android.app.AliasActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.speech.RecognitionService: void sendStickyBroadcast(android.content.Intent)>
<android.app.Service: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void removeStickyBroadcast(android.content.Intent)>
<android.content.MutableContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.accessibilityservice.AccessibilityService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.backup.BackupAgentHelper: void sendStickyBroadcast(android.content.Intent)>
<android.accessibilityservice.AccessibilityService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.backup.BackupAgent: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.nfc.cardemulation.HostApduService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.LauncherActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.textservice.SpellCheckerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.IsolatedContext: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.preference.PreferenceActivity: void removeStickyBroadcast(android.content.Intent)>
<android.speech.tts.TextToSpeechService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Service: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ListActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ExpandableListActivity: void removeStickyBroadcast(android.content.Intent)>
<android.speech.tts.TextToSpeechService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.net.VpnService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.preference.PreferenceActivity: void sendStickyBroadcast(android.content.Intent)>
<android.app.backup.BackupAgent: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.nfc.cardemulation.OffHostApduService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.notification.NotificationListenerService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.test.mock.MockApplication: void sendStickyBroadcast(android.content.Intent)>
<android.test.mock.MockApplication: void removeStickyBroadcast(android.content.Intent)>
<android.app.ListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.backup.BackupAgentHelper: void removeStickyBroadcast(android.content.Intent)>
<android.accounts.AccountAuthenticatorActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.NativeActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.accounts.AccountAuthenticatorActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.IsolatedContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.widget.RemoteViewsService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.nfc.cardemulation.OffHostApduService: void removeStickyBroadcast(android.content.Intent)>
<android.speech.tts.TextToSpeechService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.mock.MockApplication: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.wallpaper.WallpaperService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.printservice.PrintService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.speech.RecognitionService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.location.SettingInjectorService: void removeStickyBroadcast(android.content.Intent)>
<android.test.RenamingDelegatingContext: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.inputmethodservice.AbstractInputMethodService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.IntentService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.IntentService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.printservice.PrintService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.notification.NotificationListenerService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.wallpaper.WallpaperService: void sendStickyBroadcast(android.content.Intent)>
<android.service.notification.NotificationListenerService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.backup.BackupAgentHelper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Application: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ActivityGroup: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.preference.PreferenceActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.RenamingDelegatingContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.nfc.cardemulation.HostApduService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.TabActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.widget.RemoteViewsService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.widget.RemoteViewsService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Service: void sendStickyBroadcast(android.content.Intent)>
<android.test.IsolatedContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Application: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.accessibilityservice.AccessibilityService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.MutableContextWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.app.Application: void removeStickyBroadcast(android.content.Intent)>
<android.nfc.cardemulation.HostApduService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.TabActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.notification.NotificationListenerService: void removeStickyBroadcast(android.content.Intent)>
<android.inputmethodservice.AbstractInputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.IsolatedContext: void sendStickyBroadcast(android.content.Intent)>
<android.app.NativeActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.notification.NotificationListenerService: void sendStickyBroadcast(android.content.Intent)>
<android.inputmethodservice.InputMethodService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.preference.PreferenceActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.speech.RecognitionService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.LauncherActivity: void sendStickyBroadcast(android.content.Intent)>
<android.nfc.cardemulation.HostApduService: void sendStickyBroadcast(android.content.Intent)>
<android.service.textservice.SpellCheckerService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Service: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.printservice.PrintService: void removeStickyBroadcast(android.content.Intent)>
<android.inputmethodservice.InputMethodService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.speech.tts.TextToSpeechService: void removeStickyBroadcast(android.content.Intent)>
<android.app.Activity: void removeStickyBroadcast(android.content.Intent)>
<android.service.textservice.SpellCheckerService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.AliasActivity: void removeStickyBroadcast(android.content.Intent)>
<android.preference.PreferenceActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.printservice.PrintService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.nfc.cardemulation.OffHostApduService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.mock.MockApplication: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.dreams.DreamService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.LauncherActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ListActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.net.VpnService: void sendStickyBroadcast(android.content.Intent)>
<android.app.ActivityGroup: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.net.VpnService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ActivityGroup: void sendStickyBroadcast(android.content.Intent)>
<android.speech.RecognitionService: void removeStickyBroadcast(android.content.Intent)>
<android.app.ExpandableListActivity: void sendStickyBroadcast(android.content.Intent)>
<android.test.IsolatedContext: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.dreams.DreamService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.backup.BackupAgent: void removeStickyBroadcast(android.content.Intent)>
<android.app.IntentService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.view.ContextThemeWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.wallpaper.WallpaperService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.widget.RemoteViewsService: void sendStickyBroadcast(android.content.Intent)>
<android.location.SettingInjectorService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.view.ContextThemeWrapper: void sendStickyBroadcast(android.content.Intent)>
<android.app.TabActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.AliasActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.test.RenamingDelegatingContext: void removeStickyBroadcast(android.content.Intent)>
<android.accessibilityservice.AccessibilityService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.view.ContextThemeWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.widget.RemoteViewsService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.printservice.PrintService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ListActivity: void sendStickyBroadcast(android.content.Intent)>
<android.service.dreams.DreamService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.preference.PreferenceActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ListActivity: void removeStickyBroadcast(android.content.Intent)>
<android.accounts.AccountAuthenticatorActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.TabActivity: void sendStickyBroadcast(android.content.Intent)>
<android.app.backup.BackupAgent: void sendStickyBroadcast(android.content.Intent)>
<android.net.VpnService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.wallpaper.WallpaperService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.nfc.cardemulation.OffHostApduService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Application: void sendStickyBroadcast(android.content.Intent)>
<android.app.ListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.IsolatedContext: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.ExpandableListActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.LauncherActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.nfc.cardemulation.OffHostApduService: void sendStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.app.ExpandableListActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Application: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.RenamingDelegatingContext: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.nfc.cardemulation.HostApduService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Activity: void sendStickyBroadcast(android.content.Intent)>
<android.content.Context: void sendStickyBroadcast(android.content.Intent)>
<android.app.LauncherActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.dreams.DreamService: void sendStickyBroadcast(android.content.Intent)>
<android.view.ContextThemeWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.ExpandableListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Service: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.TabActivity: void removeStickyBroadcast(android.content.Intent)>
<android.view.ContextThemeWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.textservice.SpellCheckerService: void sendStickyBroadcast(android.content.Intent)>
<android.inputmethodservice.InputMethodService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.IntentService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.ActivityGroup: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcast(android.content.Intent)>
<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Activity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.location.SettingInjectorService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.inputmethodservice.AbstractInputMethodService: void removeStickyBroadcast(android.content.Intent)>
<android.accessibilityservice.AccessibilityService: void removeStickyBroadcast(android.content.Intent)>
<android.app.backup.BackupAgentHelper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.wallpaper.WallpaperService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.content.MutableContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.test.RenamingDelegatingContext: void sendStickyBroadcast(android.content.Intent)>
<android.inputmethodservice.InputMethodService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.accounts.AccountAuthenticatorActivity: void sendStickyBroadcast(android.content.Intent)>
<android.content.MutableContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.dreams.DreamService: void removeStickyBroadcast(android.content.Intent)>
<android.speech.RecognitionService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.nfc.cardemulation.OffHostApduService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.AliasActivity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.location.SettingInjectorService: void sendStickyBroadcast(android.content.Intent)>
<android.app.LauncherActivity: void removeStickyBroadcast(android.content.Intent)>
<android.view.ContextThemeWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.net.VpnService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.speech.RecognitionService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.nfc.cardemulation.HostApduService: void removeStickyBroadcast(android.content.Intent)>
<android.app.Service: void removeStickyBroadcast(android.content.Intent)>
<android.app.NativeActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.location.SettingInjectorService: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.inputmethodservice.AbstractInputMethodService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.IntentService: void removeStickyBroadcast(android.content.Intent)>
<android.app.NativeActivity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.inputmethodservice.InputMethodService: void removeStickyBroadcast(android.content.Intent)>
<android.service.wallpaper.WallpaperService: void removeStickyBroadcast(android.content.Intent)>
<android.app.AliasActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.mock.MockApplication: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.printservice.PrintService: void sendStickyBroadcast(android.content.Intent)>
<android.speech.tts.TextToSpeechService: void sendStickyBroadcast(android.content.Intent)>
<android.inputmethodservice.AbstractInputMethodService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.service.dreams.DreamService: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.content.MutableContextWrapper: void removeStickyBroadcast(android.content.Intent)>
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.test.RenamingDelegatingContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.TabActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.notification.NotificationListenerService: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.NativeActivity: void removeStickyBroadcast(android.content.Intent)>
<android.app.Application: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.backup.BackupAgent: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.accessibilityservice.AccessibilityService: void sendStickyBroadcast(android.content.Intent)>
<android.inputmethodservice.AbstractInputMethodService: void sendStickyBroadcast(android.content.Intent)>
<android.app.ActivityGroup: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.ExpandableListActivity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.backup.BackupAgent: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.service.textservice.SpellCheckerService: void removeStickyBroadcast(android.content.Intent)>
<android.app.AliasActivity: void sendStickyBroadcast(android.content.Intent)>
<android.content.MutableContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.backup.BackupAgentHelper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.net.VpnService: void removeStickyBroadcast(android.content.Intent)>
<android.widget.RemoteViewsService: void removeStickyBroadcast(android.content.Intent)>
<android.location.SettingInjectorService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.test.mock.MockApplication: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.IntentService: void sendStickyBroadcast(android.content.Intent)>
<android.service.textservice.SpellCheckerService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>
<android.app.backup.BackupAgentHelper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.NativeActivity: void sendStickyBroadcast(android.content.Intent)>
<android.app.ActivityGroup: void removeStickyBroadcast(android.content.Intent)>
Permission:android.permission.CHANGE_WIFI_STATE
15 Callers:
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.WifiManager: void init()>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.net.wifi.WifiManager: boolean startScan()>
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
<android.net.wifi.WifiManager: boolean startScan(android.os.WorkSource)>
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>
Permission:android.permission.VIBRATE
5 Callers:
<android.os.Vibrator: void vibrate(long[],int)>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: void vibrate(int,java.lang.String,long)>
<android.os.Vibrator: void vibrate(long)>
<android.os.Vibrator: void vibrate(int,java.lang.String,long[],int)>
Permission:android.permission.READ_CALENDAR
5 Callers:
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
Permission:android.permission.USE_CREDENTIALS
10 Callers:
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
Permission:android.permission.WRITE_CALENDAR
1 Callers:
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
Permission:android.permission.READ_CONTACTS
14 Callers:
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
Permission:android.permission.SET_WALLPAPER
115 Callers:
<android.preference.PreferenceActivity: void setWallpaper(java.io.InputStream)>
<android.service.wallpaper.WallpaperService: void setWallpaper(android.graphics.Bitmap)>
<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>
<android.nfc.cardemulation.HostApduService: void setWallpaper(android.graphics.Bitmap)>
<android.content.MutableContextWrapper: void clearWallpaper()>
<android.app.Application: void clearWallpaper()>
<android.app.Application: void setWallpaper(java.io.InputStream)>
<android.app.IntentService: void setWallpaper(java.io.InputStream)>
<android.printservice.PrintService: void clearWallpaper()>
<android.view.ContextThemeWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.accessibilityservice.AccessibilityService: void setWallpaper(java.io.InputStream)>
<android.content.ContextWrapper: void clearWallpaper()>
<android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)>
<android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)>
<android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)>
<android.location.SettingInjectorService: void setWallpaper(java.io.InputStream)>
<android.app.backup.BackupAgent: void setWallpaper(android.graphics.Bitmap)>
<android.service.dreams.DreamService: void setWallpaper(android.graphics.Bitmap)>
<android.test.RenamingDelegatingContext: void clearWallpaper()>
<android.service.dreams.DreamService: void clearWallpaper()>
<android.service.dreams.DreamService: void setWallpaper(java.io.InputStream)>
<android.nfc.cardemulation.OffHostApduService: void clearWallpaper()>
<android.location.SettingInjectorService: void setWallpaper(android.graphics.Bitmap)>
<android.app.Service: void clearWallpaper()>
<android.app.Activity: void clearWallpaper()>
<android.printservice.PrintService: void setWallpaper(java.io.InputStream)>
<android.speech.tts.TextToSpeechService: void clearWallpaper()>
<android.app.Activity: void setWallpaper(android.graphics.Bitmap)>
<android.service.notification.NotificationListenerService: void setWallpaper(java.io.InputStream)>
<android.app.NativeActivity: void setWallpaper(java.io.InputStream)>
<android.net.VpnService: void clearWallpaper()>
<android.service.textservice.SpellCheckerService: void setWallpaper(android.graphics.Bitmap)>
<android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)>
<android.nfc.cardemulation.OffHostApduService: void setWallpaper(android.graphics.Bitmap)>
<android.service.notification.NotificationListenerService: void setWallpaper(android.graphics.Bitmap)>
<android.service.wallpaper.WallpaperService: void clearWallpaper()>
<android.app.LauncherActivity: void clearWallpaper()>
<android.net.VpnService: void setWallpaper(java.io.InputStream)>
<android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)>
<android.content.Context: void clearWallpaper()>
<android.app.IntentService: void setWallpaper(android.graphics.Bitmap)>
<android.test.RenamingDelegatingContext: void setWallpaper(java.io.InputStream)>
<android.speech.tts.TextToSpeechService: void setWallpaper(java.io.InputStream)>
<android.speech.tts.TextToSpeechService: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>
<android.app.AliasActivity: void clearWallpaper()>
<android.speech.RecognitionService: void setWallpaper(android.graphics.Bitmap)>
<android.app.WallpaperManager: void clear()>
<android.net.VpnService: void setWallpaper(android.graphics.Bitmap)>
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(java.io.InputStream)>
<android.app.ActivityGroup: void setWallpaper(java.io.InputStream)>
<android.app.IntentService: void clearWallpaper()>
<android.test.IsolatedContext: void setWallpaper(java.io.InputStream)>
<android.app.Activity: void setWallpaper(java.io.InputStream)>
<android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)>
<android.inputmethodservice.InputMethodService: void setWallpaper(android.graphics.Bitmap)>
<android.service.textservice.SpellCheckerService: void clearWallpaper()>
<android.test.mock.MockApplication: void clearWallpaper()>
<android.app.NativeActivity: void setWallpaper(android.graphics.Bitmap)>
<android.service.notification.NotificationListenerService: void clearWallpaper()>
<android.accessibilityservice.AccessibilityService: void clearWallpaper()>
<android.nfc.cardemulation.OffHostApduService: void setWallpaper(java.io.InputStream)>
<android.app.ListActivity: void setWallpaper(java.io.InputStream)>
<android.view.ContextThemeWrapper: void setWallpaper(java.io.InputStream)>
<android.app.ActivityGroup: void clearWallpaper()>
<android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)>
<android.test.IsolatedContext: void setWallpaper(android.graphics.Bitmap)>
<android.app.NativeActivity: void clearWallpaper()>
<android.app.LauncherActivity: void setWallpaper(java.io.InputStream)>
<android.inputmethodservice.AbstractInputMethodService: void setWallpaper(android.graphics.Bitmap)>
<android.app.TabActivity: void setWallpaper(java.io.InputStream)>
<android.app.backup.BackupAgent: void setWallpaper(java.io.InputStream)>
<android.app.backup.BackupAgentHelper: void clearWallpaper()>
<android.widget.RemoteViewsService: void clearWallpaper()>
<android.test.RenamingDelegatingContext: void setWallpaper(android.graphics.Bitmap)>
<android.app.backup.BackupAgent: void clearWallpaper()>
<android.app.AliasActivity: void setWallpaper(java.io.InputStream)>
<android.preference.PreferenceActivity: void setWallpaper(android.graphics.Bitmap)>
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)>
<android.service.textservice.SpellCheckerService: void setWallpaper(java.io.InputStream)>
<android.inputmethodservice.InputMethodService: void clearWallpaper()>
<android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)>
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.view.ContextThemeWrapper: void clearWallpaper()>
<android.inputmethodservice.InputMethodService: void setWallpaper(java.io.InputStream)>
<android.printservice.PrintService: void setWallpaper(android.graphics.Bitmap)>
<android.app.WallpaperManager: void setResource(int)>
<android.speech.RecognitionService: void setWallpaper(java.io.InputStream)>
<android.widget.RemoteViewsService: void setWallpaper(android.graphics.Bitmap)>
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)>
<android.app.Service: void setWallpaper(java.io.InputStream)>
<android.inputmethodservice.AbstractInputMethodService: void clearWallpaper()>
<android.test.mock.MockApplication: void setWallpaper(android.graphics.Bitmap)>
<android.accounts.AccountAuthenticatorActivity: void clearWallpaper()>
<android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)>
<android.speech.RecognitionService: void clearWallpaper()>
<android.test.IsolatedContext: void clearWallpaper()>
<android.preference.PreferenceActivity: void clearWallpaper()>
<android.content.Context: void setWallpaper(android.graphics.Bitmap)>
<android.app.WallpaperManager: void setStream(java.io.InputStream)>
<android.content.Context: void setWallpaper(java.io.InputStream)>
<android.app.Application: void setWallpaper(android.graphics.Bitmap)>
<android.app.Service: void setWallpaper(android.graphics.Bitmap)>
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)>
<android.app.LauncherActivity: void setWallpaper(android.graphics.Bitmap)>
<android.service.wallpaper.WallpaperService: void setWallpaper(java.io.InputStream)>
<android.app.TabActivity: void clearWallpaper()>
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)>
<android.app.ExpandableListActivity: void clearWallpaper()>
<android.nfc.cardemulation.HostApduService: void setWallpaper(java.io.InputStream)>
<android.widget.RemoteViewsService: void setWallpaper(java.io.InputStream)>
<android.location.SettingInjectorService: void clearWallpaper()>
<android.app.ListActivity: void clearWallpaper()>
<android.nfc.cardemulation.HostApduService: void clearWallpaper()>
<android.test.mock.MockApplication: void setWallpaper(java.io.InputStream)>
Permission:android.permission.CHANGE_WIFI_MULTICAST_STATE
3 Callers:
<android.net.wifi.WifiManager$MulticastLock: void release()>
<android.net.wifi.WifiManager$MulticastLock: void finalize()>
<android.net.wifi.WifiManager$MulticastLock: void acquire()>
Permission:android.permission.READ_USER_DICTIONARY
2 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>
Permission:android.permission.ACCESS_FINE_LOCATION
33 Callers:
<android.hardware.location.GeofenceHardware: boolean removeGeofence(int,int)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>
<android.hardware.location.GeofenceHardware: boolean resumeGeofence(int,int,int)>
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>
<android.hardware.location.GeofenceHardware: boolean pauseGeofence(int,int)>
<android.location.LocationManager: void addGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent)>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.hardware.location.GeofenceHardware: boolean addGeofence(int,int,android.hardware.location.GeofenceHardwareRequest,android.hardware.location.GeofenceHardwareCallback)>
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.hardware.location.GeofenceHardware: boolean registerForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.location.LocationManager: void removeGeofence(android.location.Geofence,android.app.PendingIntent)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper,android.app.PendingIntent)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.hardware.location.GeofenceHardware: boolean unregisterForMonitorStateChangeCallback(int,android.hardware.location.GeofenceHardwareMonitorCallback)>
Permission:android.permission.MODIFY_AUDIO_SETTINGS
15 Callers:
<android.media.AudioManager: void setMode(int)>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)>
<android.media.AudioManager: void stopBluetoothSco()>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)>
Permission:android.permission.RECORD_AUDIO
6 Callers:
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.speech.SpeechRecognizer: void stopListening()>
<android.speech.SpeechRecognizer: void cancel()>
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
<android.media.MediaRecorder: void setAudioSource(int)>
<android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
Permission:android.permission.RESTART_PACKAGES
2 Callers:
<android.app.ActivityManager: void restartPackage(java.lang.String)>
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
Permission:android.permission.DISABLE_KEYGUARD
3 Callers:
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>
<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>
Permission:android.permission.SET_TIME_ZONE
1 Callers:
<android.app.AlarmManager: void setTimeZone(java.lang.String)>
Permission:android.permission.WRITE_SYNC_SETTINGS
18 Callers:
<android.test.SyncBaseInstrumentation: void cancelSyncsandDisableAutoSync()>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.test.mock.MockContentResolver: void startSync(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.test.mock.MockContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.test.mock.MockContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>
<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.test.mock.MockContentResolver: void requestSync(android.content.SyncRequest)>
<android.test.mock.MockContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.test.mock.MockContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.test.mock.MockContentResolver: void setMasterSyncAutomatically(boolean)>
<android.test.mock.MockContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)>
Permission:android.permission.AUTHENTICATE_ACCOUNTS
7 Callers:
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
Permission:android.permission.BLUETOOTH
115 Callers:
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>
<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)>
<android.bluetooth.BluetoothGattServer: boolean connect(android.bluetooth.BluetoothDevice,boolean)>
<android.media.MediaRouter$RouteInfo: void requestUpdateVolume(int)>
<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,byte[])>
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothDevice: java.lang.String getName()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)>
<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)>
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)>
<android.bluetooth.BluetoothHeadset: boolean isEnabled()>
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHealth: void close()>
<android.bluetooth.BluetoothGattServer: void close()>
<android.bluetooth.BluetoothGattServer: boolean addService(android.bluetooth.BluetoothGattService)>
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)>
<android.bluetooth.BluetoothGatt: void abortReliableWrite()>
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>
<android.media.MediaRouter$RouteInfo: void requestSetVolume(int)>
<android.bluetooth.BluetoothGatt: boolean beginReliableWrite()>
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()>
<android.bluetooth.BluetoothGatt: boolean executeReliableWrite()>
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGatt: boolean refresh()>
<android.media.AudioManager: void setStreamVolume(int,int,int)>
<android.bluetooth.BluetoothAdapter: int getState()>
<android.bluetooth.BluetoothAdapter: void finalize()>
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,android.os.ParcelUuid)>
<android.media.MediaRouter$RouteGroup: void requestUpdateVolume(int)>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothGatt: boolean discoverServices()>
<android.media.AudioManager: void adjustVolume(int,int)>
<android.bluetooth.BluetoothHealth: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)>
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>
<android.bluetooth.BluetoothAdapter: int getConnectionState()>
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>
<android.bluetooth.BluetoothGatt: boolean connect()>
<android.bluetooth.BluetoothAdapter: boolean startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)>
<android.bluetooth.BluetoothGatt: void disconnect()>
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>
<android.bluetooth.BluetoothAdapter: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)>
<android.bluetooth.BluetoothHeadset: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothHeadset: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)>
<android.media.AudioManager: void handleKeyUp(android.view.KeyEvent,int)>
<android.bluetooth.BluetoothA2dp: boolean isEnabled()>
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.media.AudioManager: void setMode(int)>
<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: void close()>
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothGattServer: void clearServices()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)>
<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)>
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: void finalize()>
<android.bluetooth.BluetoothAdapter: int getScanMode()>
<android.bluetooth.BluetoothHealth: boolean isEnabled()>
<android.bluetooth.BluetoothSocket: void connect()>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>
<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>
<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>
<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothGattServer: boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)>
<android.bluetooth.BluetoothGatt: void close()>
<android.media.AudioManager: void adjustStreamVolume(int,int,int)>
<android.bluetooth.BluetoothDevice: int getType()>
<android.bluetooth.BluetoothAdapter: boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)>
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>
<android.bluetooth.BluetoothSocket: void <init>(int,int,boolean,boolean,java.lang.String,int)>
<android.bluetooth.BluetoothGatt: boolean connect(java.lang.Boolean,android.bluetooth.BluetoothGattCallback)>
<android.media.AudioManager: void handleKeyDown(android.view.KeyEvent,int)>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()>
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,int[])>
<android.bluetooth.BluetoothGatt: void abortReliableWrite(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothA2dp: void <init>(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener)>
<android.bluetooth.BluetoothAdapter: boolean disable(boolean)>
<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)>
<android.bluetooth.BluetoothServerSocket: void <init>(int,boolean,boolean,int)>
<android.bluetooth.BluetoothDevice: int getBondState()>
<android.bluetooth.BluetoothA2dp: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)>
<android.bluetooth.BluetoothGattServer: void cancelConnection(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.media.MediaRouter$RouteGroup: void requestSetVolume(int)>
<android.bluetooth.BluetoothHeadset: void close()>
<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)>
<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.bluetooth.BluetoothGattServer: boolean removeService(android.bluetooth.BluetoothGattService)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>
Permission:android.permission.ACCESS_WIFI_STATE
13 Callers:
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<android.net.sip.SipAudioCall: void startAudio()>
<android.net.wifi.WifiManager: void init()>
<android.net.wifi.WifiManager: void <init>(android.content.Context,android.net.wifi.IWifiManager)>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.net.wifi.WifiManager: boolean isWifiEnabled()>
<android.net.wifi.WifiManager: int getWifiState()>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
Permission:android.permission.SET_WALLPAPER_HINTS
1 Callers:
<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>
Permission:android.permission.RECEIVE_SMS
2 Callers:
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
Permission:android.permission.USE_SIP
13 Callers:
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>
<android.net.sip.SipManager: void close(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
<android.net.sip.SipManager: boolean isOpened(java.lang.String)>
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>
Permission:android.permission.ACCESS_NETWORK_STATE
5 Callers:
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
<android.net.ConnectivityManager: int getNetworkPreference()>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
Permission:android.permission.GET_ACCOUNTS
24 Callers:
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
Permission:com.android.voicemail.permission.ADD_VOICEMAIL
2 Callers:
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
Permission:android.permission.READ_SMS
4 Callers:
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
Permission:android.permission.TRANSMIT_IR
2 Callers:
<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies()>
<android.hardware.ConsumerIrManager: void transmit(int,int[])>
Permission:android.permission.WRITE_USER_DICTIONARY
2 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
7 Callers:
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
Permission:android.permission.GET_TASKS
3 Callers:
<android.app.ActivityManager: java.util.List getRunningTasks(int)>
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)>
Permission:android.permission.READ_CALL_LOG
1 Callers:
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
Permission:android.permission.ACCESS_MOCK_LOCATION
8 Callers:
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
Permission:android.permission.CAMERA
2 Callers:
<android.media.MediaRecorder: void setVideoSource(int)>
<android.hardware.Camera: android.hardware.Camera open()>
Permission:android.permission.SEND_SMS
6 Callers:
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
Permission:android.permission.KILL_BACKGROUND_PROCESSES
2 Callers:
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<android.app.ActivityManager: void restartPackage(java.lang.String)>
Permission:android.permission.READ_SYNC_STATS
9 Callers:
<android.test.mock.MockContentResolver: java.util.List getCurrentSyncs()>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.test.mock.MockContentResolver: android.content.SyncInfo getCurrentSync()>
<android.test.mock.MockContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.test.SyncBaseInstrumentation: void syncProvider(android.net.Uri,java.lang.String,java.lang.String)>
Permission:android.permission.INTERNET
21 Callers:
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
<java.net.Socket: void <init>(int)>
<java.net.DatagramSocket: void <init>(int)>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<java.net.URL: java.net.URLConnection openConnection()>
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
<android.net.nsd.NsdManager: void <init>(android.content.Context,android.net.nsd.INsdManager)>
<java.net.URL: java.lang.Object getContent()>
<java.net.HttpURLConnection: void connect()>
<java.net.ServerSocket: void <init>(int)>
<java.net.NetworkInterface: void <init>(int)>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<java.net.URLConnection: void connect()>
<android.net.nsd.NsdManager: void init()>
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)>
<java.net.HttpURLConnection: void <init>(int)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean)>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.URL: java.io.InputStream openStream()>
<java.net.MulticastSocket: void <init>(int)>
Permission:android.permission.WRITE_SETTINGS
5 Callers:
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>
<android.view.accessibility.CaptioningManager: void registerObserver(java.lang.String)>
<android.view.accessibility.CaptioningManager: void addCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
Permission:android.permission.SYSTEM_ALERT_WINDOW
3 Callers:
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)>
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)>
<android.service.wallpaper.WallpaperService$Engine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)>
Permission:android.permission.MANAGE_ACCOUNTS
15 Callers:
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenLabel(java.lang.String,java.lang.String,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
Permission:android.permission.WRITE_CONTACTS
15 Callers:
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
Permission:android.permission.READ_PHONE_STATE
10 Callers:
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
Permission:android.permission.REORDER_TASKS
2 Callers:
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>
<android.app.ActivityManager: void moveTaskToFront(int,int)>
